
Skip to content
This repository

    Pull requests
    Issues
    Gist

    @itchie6

1
0

    0

itchie6/Gone-Rogue-Chat
Code
Issues 0
Pull requests 0
Wiki
Pulse
Graphs
Settings

chat1

12345

    master 

0 parents commit de6ba447e36105da54fdc9e1e50e669a747f9472 @itchie6 itchie6 committed on Apr 1
Showing
with 15,988 additions and 0 deletions.

    +17 −0 .gitattributes
    +61 −0 about.php
    +84 −0 chatroom.php
    BIN db/chatrooms.sqlite
    +1 −0 db/logs.txt
    BIN favicon.ico
    +68 −0 getMessages.php
    BIN images/accent.png
    +20 −0 inc/classes.php
    +22 −0 inc/constants.php
    +264 −0 inc/dbmanager.php
    +9 −0 inc/functions.php
    +3 −0 inc/init.php
    +165 −0 index.php
    +58 −0 newroom.php
    +23 −0 removeChatroom.php
    +1 −0 scripts/jquery.js
    +9,440 −0 scripts/jquery/jquery-1.8.2.js
    +1 −0 scripts/modernizr.js
    +1,393 −0 scripts/modernizr/modernizr-2.6.2.js
    +1 −0 scripts/myCryptoChat.js
    +178 −0 scripts/myCryptoChat/myCryptoChat.js
    +1 −0 scripts/zerobin.js
    +237 −0 scripts/zerobin/base64.js
    +1,671 −0 scripts/zerobin/rawdeflate.js
    +753 −0 scripts/zerobin/rawinflate.js
    +45 −0 scripts/zerobin/sjcl.js
    +2 −0 scripts/zerobin/vizhash.js
    +560 −0 scripts/zerobin/zerobin.js
    +25 −0 sendMessage.php
    +62 −0 stats.php
    +1 −0 styles/myCryptoChat.css
    +805 −0 styles/myCryptoChat/myCryptoChat.css
    +17 −0 web.config

17 .gitattributes
@@ -0,0 +1,17 @@
+# Auto detect text files and perform LF normalization
+* text=auto
+
+# Custom for Visual Studio
+*.cs     diff=csharp
+
+# Standard to msysgit
+*.doc	 diff=astextplain
+*.DOC	 diff=astextplain
+*.docx diff=astextplain
+*.DOCX diff=astextplain
+*.dot  diff=astextplain
+*.DOT  diff=astextplain
+*.pdf  diff=astextplain
+*.PDF	 diff=astextplain
+*.rtf	 diff=astextplain
+*.RTF	 diff=astextplain
61 about.php
@@ -0,0 +1,61 @@
+<!DOCTYPE html>
+<html lang="en">
+    <head>
+        <meta charset="utf-8" />
+        <title>About - MyCryptoChat by HowTommy.net</title>
+        <link href="/favicon.ico" rel="shortcut icon" type="image/x-icon" />
+        <meta name="viewport" content="width=device-width" />
+        <link href="styles/myCryptoChat.css" rel="stylesheet"/>
+
+        <script src="scripts/modernizr.js"></script>
+(function(n,t){function yu(n){var t=wt[n]={};return i.each(n.split(h),function(n,i){t[i]=!0}),t}function ui(n,r,u){if(u===t&&n.nodeType===1){var f="data-"+r.replace(sr,"-$1").toLowerCase();if(u=n.getAttribute(f),typeof u=="string"){try{u=u==="true"?!0:u==="false"?!1:u==="null"?null:+u+""===u?+u:or.test(u)?i.parseJSON(u):u}catch(e){}i.data(n,r,u)}else u=t}return u}function at(n){var t;for(t in n)if((t!=="data"||!i.isEmptyObject(n[t]))&&t!=="toJSON")return!1;return!0}function a(){return!1}function d(){return!0}function b(n){return!n||!n.parentNode||n.parentNode.nodeType===11}function fi(n,t){do n=n[t];while(n&&n.nodeType!==1);return n}function ei(n,t,r){if(t=t||0,i.isFunction(t))return i.grep(n,function(n,i){var u=!!t.call(n,i,n);return u===r});if(t.nodeType)return i.grep(n,function(n){return n===t===r});if(typeof t=="string"){var u=i.grep(n,function(n){return n.nodeType===1});if(fe.test(t))return i.filter(t,u,!r);t=i.filter(t,u)}return i.grep(n,function(n){return i.inArray(n,t)>=0===r})}function oi(n){var i=kr.split("|"),t=n.createDocumentFragment();if(t.createElement)while(i.length)t.createElement(i.pop());return t}function pu(n,t){return n.getElementsByTagName(t)[0]||n.appendChild(n.ownerDocument.createElement(t))}function si(n,t){if(t.nodeType===1&&i.hasData(n)){var u,f,o,s=i._data(n),r=i._data(t,s),e=s.events;if(e){delete r.handle,r.events={};for(u in e)for(f=0,o=e[u].length;f<o;f++)i.event.add(t,u,e[u][f])}r.data&&(r.data=i.extend({},r.data))}}function hi(n,t){var r;t.nodeType===1&&(t.clearAttributes&&t.clearAttributes(),t.mergeAttributes&&t.mergeAttributes(n),r=t.nodeName.toLowerCase(),r==="object"?(t.parentNode&&(t.outerHTML=n.outerHTML),i.support.html5Clone&&n.innerHTML&&!i.trim(t.innerHTML)&&(t.innerHTML=n.innerHTML)):r==="input"&&nu.test(n.type)?(t.defaultChecked=t.checked=n.checked,t.value!==n.value&&(t.value=n.value)):r==="option"?t.selected=n.defaultSelected:r==="input"||r==="textarea"?t.defaultValue=n.defaultValue:r==="script"&&t.text!==n.text&&(t.text=n.text),t.removeAttribute(i.expando))}function g(n){return typeof n.getElementsByTagName!="undefined"?n.getElementsByTagName("*"):typeof n.querySelectorAll!="undefined"?n.querySelectorAll("*"):[]}function ci(n){nu.test(n.type)&&(n.defaultChecked=n.checked)}function li(n,t){if(t in n)return t;for(var r=t.charAt(0).toUpperCase()+t.slice(1),u=t,i=fu.length;i--;)if(t=fu[i]+r,t in n)return t;return u}function nt(n,t){return n=t||n,i.css(n,"display")==="none"||!i.contains(n.ownerDocument,n)}function ai(n,t){for(var r,o,e=[],f=0,s=n.length;f<s;f++)(r=n[f],r.style)&&(e[f]=i._data(r,"olddisplay"),t?(!e[f]&&r.style.display==="none"&&(r.style.display=""),r.style.display===""&&nt(r)&&(e[f]=i._data(r,"olddisplay",wi(r.nodeName)))):(o=u(r,"display"),!e[f]&&o!=="none"&&i._data(r,"olddisplay",o)));for(f=0;f<s;f++)(r=n[f],r.style)&&(t&&r.style.display!=="none"&&r.style.display!==""||(r.style.display=t?e[f]||"":"none"));return n}function vi(n,t,i){var r=be.exec(t);return r?Math.max(0,r[1]-(i||0))+(r[2]||"px"):t}function yi(n,t,r,f){for(var e=r===(f?"border":"content")?4:t==="width"?1:0,o=0;e<4;e+=2)r==="margin"&&(o+=i.css(n,r+c[e],!0)),f?(r==="content"&&(o-=parseFloat(u(n,"padding"+c[e]))||0),r!=="margin"&&(o-=parseFloat(u(n,"border"+c[e]+"Width"))||0)):(o+=parseFloat(u(n,"padding"+c[e]))||0,r!=="padding"&&(o+=parseFloat(u(n,"border"+c[e]+"Width"))||0));return o}function pi(n,t,r){var f=t==="width"?n.offsetWidth:n.offsetHeight,e=!0,o=i.support.boxSizing&&i.css(n,"boxSizing")==="border-box";if(f<=0||f==null){if(f=u(n,t),(f<0||f==null)&&(f=n.style[t]),et.test(f))return f;e=o&&(i.support.boxSizingReliable||f===n.style[t]),f=parseFloat(f)||0}return f+yi(n,t,r||(o?"border":"content"),e)+"px"}function wi(n){if(ti[n])return ti[n];var f=i("<"+n+">").appendTo(r.body),t=f.css("display");return f.remove(),(t==="none"||t==="")&&(v=r.body.appendChild(v||i.extend(r.createElement("iframe"),{frameBorder:0,width:0,height:0})),y&&v.createElement||(y=(v.contentWindow||v.contentDocument).document,y.write("<!doctype html><html><body>"),y.close()),f=y.body.appendChild(y.createElement(n)),t=u(f,"display"),r.body.removeChild(v)),ti[n]=t,t}function vt(n,t,r,u){var f;if(i.isArray(t))i.each(t,function(t,i){r||to.test(n)?u(n,i):vt(n+"["+(typeof i=="object"?t:"")+"]",i,r,u)});else if(r||i.type(t)!=="object")u(n,t);else for(f in t)vt(n+"["+f+"]",t[f],r,u)}function bi(n){return function(t,r){typeof t!="string"&&(r=t,t="*");var u,o,f,s=t.toLowerCase().split(h),e=0,c=s.length;if(i.isFunction(r))for(;e<c;e++)u=s[e],f=/^\+/.test(u),f&&(u=u.substr(1)||"*"),o=n[u]=n[u]||[],o[f?"unshift":"push"](r)}}function tt(n,i,r,u,f,e){f=f||i.dataTypes[0],e=e||{},e[f]=!0;for(var o,s=n[f],h=0,l=s?s.length:0,c=n===ii;h<l&&(c||!o);h++)o=s[h](i,r,u),typeof o=="string"&&(!c||e[o]?o=t:(i.dataTypes.unshift(o),o=tt(n,i,r,u,o,e)));return(c||!o)&&!e["*"]&&(o=tt(n,i,r,u,"*",e)),o}function ki(n,r){var u,f,e=i.ajaxSettings.flatOptions||{};for(u in r)r[u]!==t&&((e[u]?n:f||(f={}))[u]=r[u]);f&&i.extend(!0,n,f)}function wu(n,i,r){var o,u,e,s,h=n.contents,f=n.dataTypes,c=n.responseFields;for(u in c)u in r&&(i[c[u]]=r[u]);while(f[0]==="*")f.shift(),o===t&&(o=n.mimeType||i.getResponseHeader("content-type"));if(o)for(u in h)if(h[u]&&h[u].test(o)){f.unshift(u);break}if(f[0]in r)e=f[0];else{for(u in r){if(!f[0]||n.converters[u+" "+f[0]]){e=u;break}s||(s=u)}e=e||s}if(e)return e!==f[0]&&f.unshift(e),r[e]}function bu(n,t){var i,o,r,e,s=n.dataTypes.slice(),f=s[0],u={},h=0;if(n.dataFilter&&(t=n.dataFilter(t,n.dataType)),s[1])for(i in n.converters)u[i.toLowerCase()]=n.converters[i];for(;r=s[++h];)if(r!=="*"){if(f!=="*"&&f!==r){if(i=u[f+" "+r]||u["* "+r],!i)for(o in u)if(e=o.split(" "),e[1]===r&&(i=u[f+" "+e[0]]||u["* "+e[0]],i)){i===!0?i=u[o]:u[o]!==!0&&(r=e[0],s.splice(h--,0,r));break}if(i!==!0)if(i&&n.throws)t=i(t);else try{t=i(t)}catch(c){return{state:"parsererror",error:i?c:"No conversion from "+f+" to "+r}}}f=r}return{state:"success",data:t}}function di(){try{return new n.XMLHttpRequest}catch(t){}}function ku(){try{return new n.ActiveXObject("Microsoft.XMLHTTP")}catch(t){}}function gi(){return setTimeout(function(){ht=t},0),ht=i.now()}function du(n,t){i.each(t,function(t,i){for(var u=(k[t]||[]).concat(k["*"]),r=0,f=u.length;r<f;r++)if(u[r].call(n,t,i))return})}function nr(n,t,r){var e,o=0,l=0,c=lt.length,f=i.Deferred().always(function(){delete h.elem}),h=function(){for(var o=ht||gi(),t=Math.max(0,u.startTime+u.duration-o),i=1-(t/u.duration||0),r=0,e=u.tweens.length;r<e;r++)u.tweens[r].run(i);return f.notifyWith(n,[u,i,t]),i<1&&e?t:(f.resolveWith(n,[u]),!1)},u=f.promise({elem:n,props:i.extend({},t),opts:i.extend(!0,{specialEasing:{}},r),originalProperties:t,originalOptions:r,startTime:ht||gi(),duration:r.duration,tweens:[],createTween:function(t,r){var e=i.Tween(n,u.opts,t,r,u.opts.specialEasing[t]||u.opts.easing);return u.tweens.push(e),e},stop:function(t){for(var i=0,r=t?u.tweens.length:0;i<r;i++)u.tweens[i].run(1);return t?f.resolveWith(n,[u,t]):f.rejectWith(n,[u,t]),this}}),s=u.props;for(gu(s,u.opts.specialEasing);o<c;o++)if(e=lt[o].call(u,n,s,u.opts),e)return e;return du(u,s),i.isFunction(u.opts.start)&&u.opts.start.call(n,u),i.fx.timer(i.extend(h,{anim:u,queue:u.opts.queue,elem:n})),u.progress(u.opts.progress).done(u.opts.done,u.opts.complete).fail(u.opts.fail).always(u.opts.always)}function gu(n,t){var r,f,e,u,o;for(r in n)if(f=i.camelCase(r),e=t[f],u=n[r],i.isArray(u)&&(e=u[1],u=n[r]=u[0]),r!==f&&(n[f]=u,delete n[r]),o=i.cssHooks[f],o&&"expand"in o){u=o.expand(u),delete n[f];for(r in u)r in n||(n[r]=u[r],t[r]=e)}else t[f]=e}function nf(n,t,r){var o,u,a,v,h,c,f,w,s=this,e=n.style,y={},p=[],l=n.nodeType&&nt(n);r.queue||(f=i._queueHooks(n,"fx"),f.unqueued==null&&(f.unqueued=0,w=f.empty.fire,f.empty.fire=function(){f.unqueued||w()}),f.unqueued++,s.always(function(){s.always(function(){f.unqueued--,i.queue(n,"fx").length||f.empty.fire()})})),n.nodeType===1&&("height"in t||"width"in t)&&(r.overflow=[e.overflow,e.overflowX,e.overflowY],i.css(n,"display")==="inline"&&i.css(n,"float")==="none"&&(!i.support.inlineBlockNeedsLayout||wi(n.nodeName)==="inline"?e.display="inline-block":e.zoom=1)),r.overflow&&(e.overflow="hidden",i.support.shrinkWrapBlocks||s.done(function(){e.overflow=r.overflow[0],e.overflowX=r.overflow[1],e.overflowY=r.overflow[2]}));for(o in t)if(a=t[o],vo.exec(a)){if(delete t[o],a===(l?"hide":"show"))continue;p.push(o)}if(v=p.length,v)for(h=i._data(n,"fxshow")||i._data(n,"fxshow",{}),l?i(n).show():s.done(function(){i(n).hide()}),s.done(function(){var t;i.removeData(n,"fxshow",!0);for(t in y)i.style(n,t,y[t])}),o=0;o<v;o++)u=p[o],c=s.createTween(u,l?h[u]:0),y[u]=h[u]||i.style(n,u),u in h||(h[u]=c.start,l&&(c.end=c.start,c.start=u==="width"||u==="height"?1:0))}function f(n,t,i,r,u){return new f.prototype.init(n,t,i,r,u)}function it(n,t){var r,i={height:n},u=0;for(t=t?1:0;u<4;u+=2-t)r=c[u],i["margin"+r]=i["padding"+r]=n;return t&&(i.opacity=i.width=n),i}function tr(n){return i.isWindow(n)?n:n.nodeType===9?n.defaultView||n.parentWindow:!1}var ir,rt,r=n.document,tf=n.location,rf=n.navigator,uf=n.jQuery,ff=n.$,rr=Array.prototype.push,o=Array.prototype.slice,ur=Array.prototype.indexOf,ef=Object.prototype.toString,yt=Object.prototype.hasOwnProperty,pt=String.prototype.trim,i=function(n,t){return new i.fn.init(n,t,ir)},ut=/[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,of=/\S/,h=/\s+/,sf=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,hf=/^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,fr=/^<(\w+)\s*\/?>(?:<\/\1>|)$/,cf=/^[\],:{}\s]*$/,lf=/(?:^|:|,)(?:\s*\[)+/g,af=/\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,vf=/"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,yf=/^-ms-/,pf=/-([\da-z])/gi,wf=function(n,t){return(t+"").toUpperCase()},ft=function(){r.addEventListener?(r.removeEventListener("DOMContentLoaded",ft,!1),i.ready()):r.readyState==="complete"&&(r.detachEvent("onreadystatechange",ft),i.ready())},er={},wt,or,sr,w,st,vu,ri;i.fn=i.prototype={constructor:i,init:function(n,u,f){var e,o,h,s;if(!n)return this;if(n.nodeType)return this.context=this[0]=n,this.length=1,this;if(typeof n=="string"){if(e=n.charAt(0)==="<"&&n.charAt(n.length-1)===">"&&n.length>=3?[null,n,null]:hf.exec(n),e&&(e[1]||!u)){if(e[1])return u=u instanceof i?u[0]:u,s=u&&u.nodeType?u.ownerDocument||u:r,n=i.parseHTML(e[1],s,!0),fr.test(e[1])&&i.isPlainObject(u)&&this.attr.call(n,u,!0),i.merge(this,n);if(o=r.getElementById(e[2]),o&&o.parentNode){if(o.id!==e[2])return f.find(n);this.length=1,this[0]=o}return this.context=r,this.selector=n,this}return!u||u.jquery?(u||f).find(n):this.constructor(u).find(n)}return i.isFunction(n)?f.ready(n):(n.selector!==t&&(this.selector=n.selector,this.context=n.context),i.makeArray(n,this))},selector:"",jquery:"1.8.2",length:0,size:function(){return this.length},toArray:function(){return o.call(this)},get:function(n){return n==null?this.toArray():n<0?this[this.length+n]:this[n]},pushStack:function(n,t,r){var u=i.merge(this.constructor(),n);return u.prevObject=this,u.context=this.context,t==="find"?u.selector=this.selector+(this.selector?" ":"")+r:t&&(u.selector=this.selector+"."+t+"("+r+")"),u},each:function(n,t){return i.each(this,n,t)},ready:function(n){return i.ready.promise().done(n),this},eq:function(n){return n=+n,n===-1?this.slice(n):this.slice(n,n+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(o.apply(this,arguments),"slice",o.call(arguments).join(","))},map:function(n){return this.pushStack(i.map(this,function(t,i){return n.call(t,i,t)}))},end:function(){return this.prevObject||this.constructor(null)},push:rr,sort:[].sort,splice:[].splice},i.fn.init.prototype=i.fn,i.extend=i.fn.extend=function(){var o,e,u,r,s,h,n=arguments[0]||{},f=1,l=arguments.length,c=!1;for(typeof n=="boolean"&&(c=n,n=arguments[1]||{},f=2),typeof n!="object"&&!i.isFunction(n)&&(n={}),l===f&&(n=this,--f);f<l;f++)if((o=arguments[f])!=null)for(e in o)(u=n[e],r=o[e],n!==r)&&(c&&r&&(i.isPlainObject(r)||(s=i.isArray(r)))?(s?(s=!1,h=u&&i.isArray(u)?u:[]):h=u&&i.isPlainObject(u)?u:{},n[e]=i.extend(c,h,r)):r!==t&&(n[e]=r));return n},i.extend({noConflict:function(t){return n.$===i&&(n.$=ff),t&&n.jQuery===i&&(n.jQuery=uf),i},isReady:!1,readyWait:1,holdReady:function(n){n?i.readyWait++:i.ready(!0)},ready:function(n){if(n===!0?!--i.readyWait:!i.isReady){if(!r.body)return setTimeout(i.ready,1);(i.isReady=!0,n!==!0&&--i.readyWait>0)||(rt.resolveWith(r,[i]),i.fn.trigger&&i(r).trigger("ready").off("ready"))}},isFunction:function(n){return i.type(n)==="function"},isArray:Array.isArray||function(n){return i.type(n)==="array"},isWindow:function(n){return n!=null&&n==n.window},isNumeric:function(n){return!isNaN(parseFloat(n))&&isFinite(n)},type:function(n){return n==null?String(n):er[ef.call(n)]||"object"},isPlainObject:function(n){if(!n||i.type(n)!=="object"||n.nodeType||i.isWindow(n))return!1;try{if(n.constructor&&!yt.call(n,"constructor")&&!yt.call(n.constructor.prototype,"isPrototypeOf"))return!1}catch(u){return!1}var r;for(r in n);return r===t||yt.call(n,r)},isEmptyObject:function(n){var t;for(t in n)return!1;return!0},error:function(n){throw new Error(n);},parseHTML:function(n,t,u){var f;return!n||typeof n!="string"?null:(typeof t=="boolean"&&(u=t,t=0),t=t||r,(f=fr.exec(n))?[t.createElement(f[1])]:(f=i.buildFragment([n],t,u?null:[]),i.merge([],(f.cacheable?i.clone(f.fragment):f.fragment).childNodes)))},parseJSON:function(t){if(!t||typeof t!="string")return null;if(t=i.trim(t),n.JSON&&n.JSON.parse)return n.JSON.parse(t);if(cf.test(t.replace(af,"@").replace(vf,"]").replace(lf,"")))return new Function("return "+t)();i.error("Invalid JSON: "+t)},parseXML:function(r){var u,f;if(!r||typeof r!="string")return null;try{n.DOMParser?(f=new DOMParser,u=f.parseFromString(r,"text/xml")):(u=new ActiveXObject("Microsoft.XMLDOM"),u.async="false",u.loadXML(r))}catch(e){u=t}return(!u||!u.documentElement||u.getElementsByTagName("parsererror").length)&&i.error("Invalid XML: "+r),u},noop:function(){},globalEval:function(t){t&&of.test(t)&&(n.execScript||function(t){n.eval.call(n,t)})(t)},camelCase:function(n){return n.replace(yf,"ms-").replace(pf,wf)},nodeName:function(n,t){return n.nodeName&&n.nodeName.toLowerCase()===t.toLowerCase()},each:function(n,r,u){var f,e=0,o=n.length,s=o===t||i.isFunction(n);if(u){if(s){for(f in n)if(r.apply(n[f],u)===!1)break}else for(;e<o;)if(r.apply(n[e++],u)===!1)break}else if(s){for(f in n)if(r.call(n[f],f,n[f])===!1)break}else for(;e<o;)if(r.call(n[e],e,n[e++])===!1)break;return n},trim:pt&&!pt.call("? ")?function(n){return n==null?"":pt.call(n)}:function(n){return n==null?"":(n+"").replace(sf,"")},makeArray:function(n,t){var r,u=t||[];return n!=null&&(r=i.type(n),n.length==null||r==="string"||r==="function"||r==="regexp"||i.isWindow(n)?rr.call(u,n):i.merge(u,n)),u},inArray:function(n,t,i){var r;if(t){if(ur)return ur.call(t,n,i);for(r=t.length,i=i?i<0?Math.max(0,r+i):i:0;i<r;i++)if(i in t&&t[i]===n)return i}return-1},merge:function(n,i){var f=i.length,u=n.length,r=0;if(typeof f=="number")for(;r<f;r++)n[u++]=i[r];else while(i[r]!==t)n[u++]=i[r++];return n.length=u,n},grep:function(n,t,i){var u,f=[],r=0,e=n.length;for(i=!!i;r<e;r++)u=!!t(n[r],r),i!==u&&f.push(n[r]);return f},map:function(n,r,u){var f,h,e=[],s=0,o=n.length,c=n instanceof i||o!==t&&typeof o=="number"&&(o>0&&n[0]&&n[o-1]||o===0||i.isArray(n));if(c)for(;s<o;s++)f=r(n[s],s,u),f!=null&&(e[e.length]=f);else for(h in n)f=r(n[h],h,u),f!=null&&(e[e.length]=f);return e.concat.apply([],e)},guid:1,proxy:function(n,r){var f,e,u;return typeof r=="string"&&(f=n[r],r=n,n=f),i.isFunction(n)?(e=o.call(arguments,2),u=function(){return n.apply(r,e.concat(o.call(arguments)))},u.guid=n.guid=n.guid||i.guid++,u):t},access:function(n,r,u,f,e,o,s){var c,l=u==null,h=0,a=n.length;if(u&&typeof u=="object"){for(h in u)i.access(n,r,h,u[h],1,o,f);e=1}else if(f!==t){if(c=s===t&&i.isFunction(f),l&&(c?(c=r,r=function(n,t,r){return c.call(i(n),r)}):(r.call(n,f),r=null)),r)for(;h<a;h++)r(n[h],u,c?f.call(n[h],h,r(n[h],u)):f,s);e=1}return e?n:l?r.call(n):a?r(n[0],u):o},now:function(){return+new Date}}),i.ready.promise=function(t){if(!rt)if(rt=i.Deferred(),r.readyState==="complete")setTimeout(i.ready,1);else if(r.addEventListener)r.addEventListener("DOMContentLoaded",ft,!1),n.addEventListener("load",i.ready,!1);else{r.attachEvent("onreadystatechange",ft),n.attachEvent("onload",i.ready);var u=!1;try{u=n.frameElement==null&&r.documentElement}catch(e){}u&&u.doScroll&&function f(){if(!i.isReady){try{u.doScroll("left")}catch(n){return setTimeout(f,50)}i.ready()}}()}return rt.promise(t)},i.each("Boolean Number String Function Array Date RegExp Object".split(" "),function(n,t){er["[object "+t+"]"]=t.toLowerCase()}),ir=i(r),wt={},i.Callbacks=function(n){n=typeof n=="string"?wt[n]||yu(n):i.extend({},n);var f,c,o,l,s,e,r=[],u=!n.once&&[],a=function(t){for(f=n.memory&&t,c=!0,e=l||0,l=0,s=r.length,o=!0;r&&e<s;e++)if(r[e].apply(t[0],t[1])===!1&&n.stopOnFalse){f=!1;break}o=!1,r&&(u?u.length&&a(u.shift()):f?r=[]:h.disable())},h={add:function(){if(r){var t=r.length;(function u(t){i.each(t,function(t,f){var e=i.type(f);e==="function"&&(!n.unique||!h.has(f))?r.push(f):f&&f.length&&e!=="string"&&u(f)})})(arguments),o?s=r.length:f&&(l=t,a(f))}return this},remove:function(){return r&&i.each(arguments,function(n,t){for(var u;(u=i.inArray(t,r,u))>-1;)r.splice(u,1),o&&(u<=s&&s--,u<=e&&e--)}),this},has:function(n){return i.inArray(n,r)>-1},empty:function(){return r=[],this},disable:function(){return r=u=f=t,this},disabled:function(){return!r},lock:function(){return u=t,f||h.disable(),this},locked:function(){return!u},fireWith:function(n,t){return t=t||[],t=[n,t.slice?t.slice():t],r&&(!c||u)&&(o?u.push(t):a(t)),this},fire:function(){return h.fireWith(this,arguments),this},fired:function(){return!!c}};return h},i.extend({Deferred:function(n){var u=[["resolve","done",i.Callbacks("once memory"),"resolved"],["reject","fail",i.Callbacks("once memory"),"rejected"],["notify","progress",i.Callbacks("memory")]],f="pending",r={state:function(){return f},always:function(){return t.done(arguments).fail(arguments),this},then:function(){var n=arguments;return i.Deferred(function(r){i.each(u,function(u,f){var e=f[0],o=n[u];t[f[1]](i.isFunction(o)?function(){var n=o.apply(this,arguments);n&&i.isFunction(n.promise)?n.promise().done(r.resolve).fail(r.reject).progress(r.notify):r[e+"With"](this===t?r:this,[n])}:r[e])}),n=null}).promise()},promise:function(n){return n!=null?i.extend(n,r):r}},t={};return r.pipe=r.then,i.each(u,function(n,i){var e=i[2],o=i[3];r[i[1]]=e.add,o&&e.add(function(){f=o},u[n^1][2].disable,u[2][2].lock),t[i[0]]=e.fire,t[i[0]+"With"]=e.fireWith}),r.promise(t),n&&n.call(t,t),t},when:function(n){var t=0,u=o.call(arguments),r=u.length,e=r!==1||n&&i.isFunction(n.promise)?r:0,f=e===1?n:i.Deferred(),c=function(n,t,i){return function(r){t[n]=this,i[n]=arguments.length>1?o.call(arguments):r,i===s?f.notifyWith(t,i):--e||f.resolveWith(t,i)}},s,l,h;if(r>1)for(s=new Array(r),l=new Array(r),h=new Array(r);t<r;t++)u[t]&&i.isFunction(u[t].promise)?u[t].promise().done(c(t,h,u)).fail(f.reject).progress(c(t,l,s)):--e;return e||f.resolveWith(h,u),f.promise()}}),i.support=function(){var u,h,e,c,l,f,o,a,v,s,y,t=r.createElement("div");if(t.setAttribute("className","t"),t.innerHTML="  <link/><table><\/table><a href='/a'>a<\/a><input type='checkbox'/>",h=t.getElementsByTagName("*"),e=t.getElementsByTagName("a")[0],e.style.cssText="top:1px;float:left;opacity:.5",!h||!h.length)return{};c=r.createElement("select"),l=c.appendChild(r.createElement("option")),f=t.getElementsByTagName("input")[0],u={leadingWhitespace:t.firstChild.nodeType===3,tbody:!t.getElementsByTagName("tbody").length,htmlSerialize:!!t.getElementsByTagName("link").length,style:/top/.test(e.getAttribute("style")),hrefNormalized:e.getAttribute("href")==="/a",opacity:/^0.5/.test(e.style.opacity),cssFloat:!!e.style.cssFloat,checkOn:f.value==="on",optSelected:l.selected,getSetAttribute:t.className!=="t",enctype:!!r.createElement("form").enctype,html5Clone:r.createElement("nav").cloneNode(!0).outerHTML!=="<:nav><\/:nav>",boxModel:r.compatMode==="CSS1Compat",submitBubbles:!0,changeBubbles:!0,focusinBubbles:!1,deleteExpando:!0,noCloneEvent:!0,inlineBlockNeedsLayout:!1,shrinkWrapBlocks:!1,reliableMarginRight:!0,boxSizingReliable:!0,pixelPosition:!1},f.checked=!0,u.noCloneChecked=f.cloneNode(!0).checked,c.disabled=!0,u.optDisabled=!l.disabled;try{delete t.test}catch(p){u.deleteExpando=!1}if(!t.addEventListener&&t.attachEvent&&t.fireEvent&&(t.attachEvent("onclick",y=function(){u.noCloneEvent=!1}),t.cloneNode(!0).fireEvent("onclick"),t.detachEvent("onclick",y)),f=r.createElement("input"),f.value="t",f.setAttribute("type","radio"),u.radioValue=f.value==="t",f.setAttribute("checked","checked"),f.setAttribute("name","t"),t.appendChild(f),o=r.createDocumentFragment(),o.appendChild(t.lastChild),u.checkClone=o.cloneNode(!0).cloneNode(!0).lastChild.checked,u.appendChecked=f.checked,o.removeChild(f),o.appendChild(t),t.attachEvent)for(v in{submit:!0,change:!0,focusin:!0})a="on"+v,s=a in t,s||(t.setAttribute(a,"return;"),s=typeof t[a]=="function"),u[v+"Bubbles"]=s;return i(function(){var i,t,f,e,h="padding:0;margin:0;border:0;display:block;overflow:hidden;",o=r.getElementsByTagName("body")[0];o&&(i=r.createElement("div"),i.style.cssText="visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px",o.insertBefore(i,o.firstChild),t=r.createElement("div"),i.appendChild(t),t.innerHTML="<table><tr><td><\/td><td>t<\/td><\/tr><\/table>",f=t.getElementsByTagName("td"),f[0].style.cssText="padding:0;margin:0;border:0;display:none",s=f[0].offsetHeight===0,f[0].style.display="",f[1].style.display="none",u.reliableHiddenOffsets=s&&f[0].offsetHeight===0,t.innerHTML="",t.style.cssText="box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;",u.boxSizing=t.offsetWidth===4,u.doesNotIncludeMarginInBodyOffset=o.offsetTop!==1,n.getComputedStyle&&(u.pixelPosition=(n.getComputedStyle(t,null)||{}).top!=="1%",u.boxSizingReliable=(n.getComputedStyle(t,null)||{width:"4px"}).width==="4px",e=r.createElement("div"),e.style.cssText=t.style.cssText=h,e.style.marginRight=e.style.width="0",t.style.width="1px",t.appendChild(e),u.reliableMarginRight=!parseFloat((n.getComputedStyle(e,null)||{}).marginRight)),typeof t.style.zoom!="undefined"&&(t.innerHTML="",t.style.cssText=h+"width:1px;padding:1px;display:inline;zoom:1",u.inlineBlockNeedsLayout=t.offsetWidth===3,t.style.display="block",t.style.overflow="visible",t.innerHTML="<div><\/div>",t.firstChild.style.width="5px",u.shrinkWrapBlocks=t.offsetWidth!==3,i.style.zoom=1),o.removeChild(i),i=t=f=e=null)}),o.removeChild(t),h=e=c=l=f=o=t=null,u}(),or=/(?:\{[\s\S]*\}|\[[\s\S]*\])$/,sr=/([A-Z])/g,i.extend({cache:{},deletedIds:[],uuid:0,expando:"jQuery"+(i.fn.jquery+Math.random()).replace(/\D/g,""),noData:{embed:!0,object:"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",applet:!0},hasData:function(n){return n=n.nodeType?i.cache[n[i.expando]]:n[i.expando],!!n&&!at(n)},data:function(n,r,u,f){if(i.acceptData(n)){var s,h,c=i.expando,a=typeof r=="string",l=n.nodeType,o=l?i.cache:n,e=l?n[c]:n[c]&&c;if(e&&o[e]&&(f||o[e].data)||!a||u!==t)return e||(l?n[c]=e=i.deletedIds.pop()||i.guid++:e=c),o[e]||(o[e]={},l||(o[e].toJSON=i.noop)),(typeof r=="object"||typeof r=="function")&&(f?o[e]=i.extend(o[e],r):o[e].data=i.extend(o[e].data,r)),s=o[e],f||(s.data||(s.data={}),s=s.data),u!==t&&(s[i.camelCase(r)]=u),a?(h=s[r],h==null&&(h=s[i.camelCase(r)])):h=s,h}},removeData:function(n,t,r){if(i.acceptData(n)){var e,o,h,s=n.nodeType,u=s?i.cache:n,f=s?n[i.expando]:i.expando;if(u[f]){if(t&&(e=r?u[f]:u[f].data,e)){for(i.isArray(t)||(t in e?t=[t]:(t=i.camelCase(t),t=t in e?[t]:t.split(" "))),o=0,h=t.length;o<h;o++)delete e[t[o]];if(!(r?at:i.isEmptyObject)(e))return}(r||(delete u[f].data,at(u[f])))&&(s?i.cleanData([n],!0):i.support.deleteExpando||u!=u.window?delete u[f]:u[f]=null)}}},_data:function(n,t,r){return i.data(n,t,r,!0)},acceptData:function(n){var t=n.nodeName&&i.noData[n.nodeName.toLowerCase()];return!t||t!==!0&&n.getAttribute("classid")===t}}),i.fn.extend({data:function(n,r){var u,s,h,o,l,e=this[0],c=0,f=null;if(n===t){if(this.length&&(f=i.data(e),e.nodeType===1&&!i._data(e,"parsedAttrs"))){for(h=e.attributes,l=h.length;c<l;c++)o=h[c].name,o.indexOf("data-")||(o=i.camelCase(o.substring(5)),ui(e,o,f[o]));i._data(e,"parsedAttrs",!0)}return f}return typeof n=="object"?this.each(function(){i.data(this,n)}):(u=n.split(".",2),u[1]=u[1]?"."+u[1]:"",s=u[1]+"!",i.access(this,function(r){if(r===t)return f=this.triggerHandler("getData"+s,[u[0]]),f===t&&e&&(f=i.data(e,n),f=ui(e,n,f)),f===t&&u[1]?this.data(u[0]):f;u[1]=r,this.each(function(){var t=i(this);t.triggerHandler("setData"+s,u),i.data(this,n,r),t.triggerHandler("changeData"+s,u)})},null,r,arguments.length>1,null,!1))},removeData:function(n){return this.each(function(){i.removeData(this,n)})}}),i.extend({queue:function(n,t,r){var u;if(n)return t=(t||"fx")+"queue",u=i._data(n,t),r&&(!u||i.isArray(r)?u=i._data(n,t,i.makeArray(r)):u.push(r)),u||[]},dequeue:function(n,t){t=t||"fx";var r=i.queue(n,t),e=r.length,u=r.shift(),f=i._queueHooks(n,t),o=function(){i.dequeue(n,t)};u==="inprogress"&&(u=r.shift(),e--),u&&(t==="fx"&&r.unshift("inprogress"),delete f.stop,u.call(n,o,f)),!e&&f&&f.empty.fire()},_queueHooks:function(n,t){var r=t+"queueHooks";return i._data(n,r)||i._data(n,r,{empty:i.Callbacks("once memory").add(function(){i.removeData(n,t+"queue",!0),i.removeData(n,r,!0)})})}}),i.fn.extend({queue:function(n,r){var u=2;return typeof n!="string"&&(r=n,n="fx",u--),arguments.length<u?i.queue(this[0],n):r===t?this:this.each(function(){var t=i.queue(this,n,r);i._queueHooks(this,n),n==="fx"&&t[0]!=="inprogress"&&i.dequeue(this,n)})},dequeue:function(n){return this.each(function(){i.dequeue(this,n)})},delay:function(n,t){return n=i.fx?i.fx.speeds[n]||n:n,t=t||"fx",this.queue(t,function(t,i){var r=setTimeout(t,n);i.stop=function(){clearTimeout(r)}})},clearQueue:function(n){return this.queue(n||"fx",[])},promise:function(n,r){var u,e=1,o=i.Deferred(),f=this,s=this.length,h=function(){--e||o.resolveWith(f,[f])};for(typeof n!="string"&&(r=n,n=t),n=n||"fx";s--;)u=i._data(f[s],n+"queueHooks"),u&&u.empty&&(e++,u.empty.add(h));return h(),o.promise(r)}});var s,hr,cr,lr=/[\t\r\n]/g,bf=/\r/g,kf=/^(?:button|input)$/i,df=/^(?:button|input|object|select|textarea)$/i,gf=/^a(?:rea|)$/i,ar=/^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,vr=i.support.getSetAttribute;i.fn.extend({attr:function(n,t){return i.access(this,i.attr,n,t,arguments.length>1)},removeAttr:function(n){return this.each(function(){i.removeAttr(this,n)})},prop:function(n,t){return i.access(this,i.prop,n,t,arguments.length>1)},removeProp:function(n){return n=i.propFix[n]||n,this.each(function(){try{this[n]=t,delete this[n]}catch(i){}})},addClass:function(n){var r,f,o,t,e,u,s;if(i.isFunction(n))return this.each(function(t){i(this).addClass(n.call(this,t,this.className))});if(n&&typeof n=="string")for(r=n.split(h),f=0,o=this.length;f<o;f++)if(t=this[f],t.nodeType===1)if(t.className||r.length!==1){for(e=" "+t.className+" ",u=0,s=r.length;u<s;u++)e.indexOf(" "+r[u]+" ")<0&&(e+=r[u]+" ");t.className=i.trim(e)}else t.className=n;return this},removeClass:function(n){var e,r,u,f,s,o,c;if(i.isFunction(n))return this.each(function(t){i(this).removeClass(n.call(this,t,this.className))});if(n&&typeof n=="string"||n===t)for(e=(n||"").split(h),o=0,c=this.length;o<c;o++)if(u=this[o],u.nodeType===1&&u.className){for(r=(" "+u.className+" ").replace(lr," "),f=0,s=e.length;f<s;f++)while(r.indexOf(" "+e[f]+" ")>=0)r=r.replace(" "+e[f]+" "," ");u.className=n?i.trim(r):""}return this},toggleClass:function(n,t){var r=typeof n,u=typeof t=="boolean";return i.isFunction(n)?this.each(function(r){i(this).toggleClass(n.call(this,r,this.className,t),t)}):this.each(function(){if(r==="string")for(var f,s=0,o=i(this),e=t,c=n.split(h);f=c[s++];)e=u?e:!o.hasClass(f),o[e?"addClass":"removeClass"](f);else(r==="undefined"||r==="boolean")&&(this.className&&i._data(this,"__className__",this.className),this.className=this.className||n===!1?"":i._data(this,"__className__")||"")})},hasClass:function(n){for(var i=" "+n+" ",t=0,r=this.length;t<r;t++)if(this[t].nodeType===1&&(" "+this[t].className+" ").replace(lr," ").indexOf(i)>=0)return!0;return!1},val:function(n){var r,u,e,f=this[0];return arguments.length?(e=i.isFunction(n),this.each(function(u){var f,o=i(this);this.nodeType===1&&(f=e?n.call(this,u,o.val()):n,f==null?f="":typeof f=="number"?f+="":i.isArray(f)&&(f=i.map(f,function(n){return n==null?"":n+""})),r=i.valHooks[this.type]||i.valHooks[this.nodeName.toLowerCase()],r&&"set"in r&&r.set(this,f,"value")!==t||(this.value=f))})):f?(r=i.valHooks[f.type]||i.valHooks[f.nodeName.toLowerCase()],r&&"get"in r&&(u=r.get(f,"value"))!==t?u:(u=f.value,typeof u=="string"?u.replace(bf,""):u==null?"":u)):void 0}}),i.extend({valHooks:{option:{get:function(n){var t=n.attributes.value;return!t||t.specified?n.value:n.text}},select:{get:function(n){var o,r,h,t,u=n.selectedIndex,s=[],f=n.options,e=n.type==="select-one";if(u<0)return null;for(r=e?u:0,h=e?u+1:f.length;r<h;r++)if(t=f[r],t.selected&&(i.support.optDisabled?!t.disabled:t.getAttribute("disabled")===null)&&(!t.parentNode.disabled||!i.nodeName(t.parentNode,"optgroup"))){if(o=i(t).val(),e)return o;s.push(o)}return e&&!s.length&&f.length?i(f[u]).val():s},set:function(n,t){var r=i.makeArray(t);return i(n).find("option").each(function(){this.selected=i.inArray(i(this).val(),r)>=0}),r.length||(n.selectedIndex=-1),r}}},attrFn:{},attr:function(n,r,u,f){var e,o,h,c=n.nodeType;if(n&&c!==3&&c!==8&&c!==2){if(f&&i.isFunction(i.fn[r]))return i(n)[r](u);if(typeof n.getAttribute=="undefined")return i.prop(n,r,u);if(h=c!==1||!i.isXMLDoc(n),h&&(r=r.toLowerCase(),o=i.attrHooks[r]||(ar.test(r)?hr:s)),u!==t){if(u===null){i.removeAttr(n,r);return}return o&&"set"in o&&h&&(e=o.set(n,u,r))!==t?e:(n.setAttribute(r,u+""),u)}return o&&"get"in o&&h&&(e=o.get(n,r))!==null?e:(e=n.getAttribute(r),e===null?t:e)}},removeAttr:function(n,t){var u,f,r,e,o=0;if(t&&n.nodeType===1)for(f=t.split(h);o<f.length;o++)r=f[o],r&&(u=i.propFix[r]||r,e=ar.test(r),e||i.attr(n,r,""),n.removeAttribute(vr?r:u),e&&u in n&&(n[u]=!1))},attrHooks:{type:{set:function(n,t){if(kf.test(n.nodeName)&&n.parentNode)i.error("type property can't be changed");else if(!i.support.radioValue&&t==="radio"&&i.nodeName(n,"input")){var r=n.value;return n.setAttribute("type",t),r&&(n.value=r),t}}},value:{get:function(n,t){return s&&i.nodeName(n,"button")?s.get(n,t):t in n?n.value:null},set:function(n,t,r){if(s&&i.nodeName(n,"button"))return s.set(n,t,r);n.value=t}}},propFix:{tabindex:"tabIndex",readonly:"readOnly","for":"htmlFor","class":"className",maxlength:"maxLength",cellspacing:"cellSpacing",cellpadding:"cellPadding",rowspan:"rowSpan",colspan:"colSpan",usemap:"useMap",frameborder:"frameBorder",contenteditable:"contentEditable"},prop:function(n,r,u){var e,f,s,o=n.nodeType;if(n&&o!==3&&o!==8&&o!==2)return s=o!==1||!i.isXMLDoc(n),s&&(r=i.propFix[r]||r,f=i.propHooks[r]),u!==t?f&&"set"in f&&(e=f.set(n,u,r))!==t?e:n[r]=u:f&&"get"in f&&(e=f.get(n,r))!==null?e:n[r]},propHooks:{tabIndex:{get:function(n){var i=n.getAttributeNode("tabindex");return i&&i.specified?parseInt(i.value,10):df.test(n.nodeName)||gf.test(n.nodeName)&&n.href?0:t}}}}),hr={get:function(n,r){var u,f=i.prop(n,r);return f===!0||typeof f!="boolean"&&(u=n.getAttributeNode(r))&&u.nodeValue!==!1?r.toLowerCase():t},set:function(n,t,r){var u;return t===!1?i.removeAttr(n,r):(u=i.propFix[r]||r,u in n&&(n[u]=!0),n.setAttribute(r,r.toLowerCase())),r}},vr||(cr={name:!0,id:!0,coords:!0},s=i.valHooks.button={get:function(n,i){var r;return r=n.getAttributeNode(i),r&&(cr[i]?r.value!=="":r.specified)?r.value:t},set:function(n,t,i){var u=n.getAttributeNode(i);return u||(u=r.createAttribute(i),n.setAttributeNode(u)),u.value=t+""}},i.each(["width","height"],function(n,t){i.attrHooks[t]=i.extend(i.attrHooks[t],{set:function(n,i){if(i==="")return n.setAttribute(t,"auto"),i}})}),i.attrHooks.contenteditable={get:s.get,set:function(n,t,i){t===""&&(t="false"),s.set(n,t,i)}}),i.support.hrefNormalized||i.each(["href","src","width","height"],function(n,r){i.attrHooks[r]=i.extend(i.attrHooks[r],{get:function(n){var i=n.getAttribute(r,2);return i===null?t:i}})}),i.support.style||(i.attrHooks.style={get:function(n){return n.style.cssText.toLowerCase()||t},set:function(n,t){return n.style.cssText=t+""}}),i.support.optSelected||(i.propHooks.selected=i.extend(i.propHooks.selected,{get:function(n){var t=n.parentNode;return t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex),null}})),i.support.enctype||(i.propFix.enctype="encoding"),i.support.checkOn||i.each(["radio","checkbox"],function(){i.valHooks[this]={get:function(n){return n.getAttribute("value")===null?"on":n.value}}}),i.each(["radio","checkbox"],function(){i.valHooks[this]=i.extend(i.valHooks[this],{set:function(n,t){if(i.isArray(t))return n.checked=i.inArray(i(n).val(),t)>=0}})});var bt=/^(?:textarea|input|select)$/i,yr=/^([^\.]*|)(?:\.(.+)|)$/,ne=/(?:^|\s)hover(\.\S+|)\b/,te=/^key/,ie=/^(?:mouse|contextmenu)|click/,pr=/^(?:focusinfocus|focusoutblur)$/,wr=function(n){return i.event.special.hover?n:n.replace(ne,"mouseenter$1 mouseleave$1")};i.event={add:function(n,r,u,f,e){var a,s,v,y,p,o,b,l,w,c,h;if(n.nodeType!==3&&n.nodeType!==8&&r&&u&&(a=i._data(n))){for(u.handler&&(w=u,u=w.handler,e=w.selector),u.guid||(u.guid=i.guid++),v=a.events,v||(a.events=v={}),s=a.handle,s||(a.handle=s=function(n){return typeof i!="undefined"&&(!n||i.event.triggered!==n.type)?i.event.dispatch.apply(s.elem,arguments):t},s.elem=n),r=i.trim(wr(r)).split(" "),y=0;y<r.length;y++)p=yr.exec(r[y])||[],o=p[1],b=(p[2]||"").split(".").sort(),h=i.event.special[o]||{},o=(e?h.delegateType:h.bindType)||o,h=i.event.special[o]||{},l=i.extend({type:o,origType:p[1],data:f,handler:u,guid:u.guid,selector:e,needsContext:e&&i.expr.match.needsContext.test(e),namespace:b.join(".")},w),c=v[o],c||(c=v[o]=[],c.delegateCount=0,h.setup&&h.setup.call(n,f,b,s)!==!1||(n.addEventListener?n.addEventListener(o,s,!1):n.attachEvent&&n.attachEvent("on"+o,s))),h.add&&(h.add.call(n,l),l.handler.guid||(l.handler.guid=u.guid)),e?c.splice(c.delegateCount++,0,l):c.push(l),i.event.global[o]=!0;n=null}},global:{},remove:function(n,t,r,u,f){var l,p,e,w,h,b,a,v,c,o,s,y=i.hasData(n)&&i._data(n);if(y&&(v=y.events)){for(t=i.trim(wr(t||"")).split(" "),l=0;l<t.length;l++){if(p=yr.exec(t[l])||[],e=w=p[1],h=p[2],!e){for(e in v)i.event.remove(n,e+t[l],r,u,!0);continue}for(c=i.event.special[e]||{},e=(u?c.delegateType:c.bindType)||e,o=v[e]||[],b=o.length,h=h?new RegExp("(^|\\.)"+h.split(".").sort().join("\\.(?:.*\\.|)")+"(\\.|$)"):null,a=0;a<o.length;a++)s=o[a],(f||w===s.origType)&&(!r||r.guid===s.guid)&&(!h||h.test(s.namespace))&&(!u||u===s.selector||u==="**"&&s.selector)&&(o.splice(a--,1),s.selector&&o.delegateCount--,c.remove&&c.remove.call(n,s));o.length===0&&b!==o.length&&((!c.teardown||c.teardown.call(n,h,y.handle)===!1)&&i.removeEvent(n,e,y.handle),delete v[e])}i.isEmptyObject(v)&&(delete y.handle,i.removeData(n,"events",!0))}},customEvent:{getData:!0,setData:!0,changeData:!0},trigger:function(u,f,e,o){if(!e||e.nodeType!==3&&e.nodeType!==8){var w,d,c,h,l,v,a,y,p,k,s=u.type||u,b=[];if(pr.test(s+i.event.triggered))return;if(s.indexOf("!")>=0&&(s=s.slice(0,-1),d=!0),s.indexOf(".")>=0&&(b=s.split("."),s=b.shift(),b.sort()),(!e||i.event.customEvent[s])&&!i.event.global[s])return;if(u=typeof u=="object"?u[i.expando]?u:new i.Event(s,u):new i.Event(s),u.type=s,u.isTrigger=!0,u.exclusive=d,u.namespace=b.join("."),u.namespace_re=u.namespace?new RegExp("(^|\\.)"+b.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,v=s.indexOf(":")<0?"on"+s:"",!e){w=i.cache;for(c in w)w[c].events&&w[c].events[s]&&i.event.trigger(u,f,w[c].handle.elem,!0);return}if(u.result=t,u.target||(u.target=e),f=f!=null?i.makeArray(f):[],f.unshift(u),a=i.event.special[s]||{},a.trigger&&a.trigger.apply(e,f)===!1)return;if(p=[[e,a.bindType||s]],!o&&!a.noBubble&&!i.isWindow(e)){for(k=a.delegateType||s,h=pr.test(k+s)?e:e.parentNode,l=e;h;h=h.parentNode)p.push([h,k]),l=h;l===(e.ownerDocument||r)&&p.push([l.defaultView||l.parentWindow||n,k])}for(c=0;c<p.length&&!u.isPropagationStopped();c++)h=p[c][0],u.type=p[c][1],y=(i._data(h,"events")||{})[u.type]&&i._data(h,"handle"),y&&y.apply(h,f),y=v&&h[v],y&&i.acceptData(h)&&y.apply&&y.apply(h,f)===!1&&u.preventDefault();return u.type=s,!o&&!u.isDefaultPrevented()&&(!a._default||a._default.apply(e.ownerDocument,f)===!1)&&(s!=="click"||!i.nodeName(e,"a"))&&i.acceptData(e)&&v&&e[s]&&(s!=="focus"&&s!=="blur"||u.target.offsetWidth!==0)&&!i.isWindow(e)&&(l=e[v],l&&(e[v]=null),i.event.triggered=s,e[s](),i.event.triggered=t,l&&(e[v]=l)),u.result}return},dispatch:function(r){r=i.event.fix(r||n.event);var f,c,e,l,a,h,v,u,s,g,y=(i._data(this,"events")||{})[r.type]||[],p=y.delegateCount,k=o.call(arguments),d=!r.exclusive&&!r.namespace,w=i.event.special[r.type]||{},b=[];if(k[0]=r,r.delegateTarget=this,!w.preDispatch||w.preDispatch.call(this,r)!==!1){if(p&&(!r.button||r.type!=="click"))for(e=r.target;e!=this;e=e.parentNode||this)if(e.disabled!==!0||r.type!=="click"){for(a={},v=[],f=0;f<p;f++)u=y[f],s=u.selector,a[s]===t&&(a[s]=u.needsContext?i(s,this).index(e)>=0:i.find(s,this,null,[e]).length),a[s]&&v.push(u);v.length&&b.push({elem:e,matches:v})}for(y.length>p&&b.push({elem:this,matches:y.slice(p)}),f=0;f<b.length&&!r.isPropagationStopped();f++)for(h=b[f],r.currentTarget=h.elem,c=0;c<h.matches.length&&!r.isImmediatePropagationStopped();c++)u=h.matches[c],(d||!r.namespace&&!u.namespace||r.namespace_re&&r.namespace_re.test(u.namespace))&&(r.data=u.data,r.handleObj=u,l=((i.event.special[u.origType]||{}).handle||u.handler).apply(h.elem,k),l!==t&&(r.result=l,l===!1&&(r.preventDefault(),r.stopPropagation())));return w.postDispatch&&w.postDispatch.call(this,r),r.result}},props:"attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),fixHooks:{},keyHooks:{props:"char charCode key keyCode".split(" "),filter:function(n,t){return n.which==null&&(n.which=t.charCode!=null?t.charCode:t.keyCode),n}},mouseHooks:{props:"button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),filter:function(n,i){var o,u,f,e=i.button,s=i.fromElement;return n.pageX==null&&i.clientX!=null&&(o=n.target.ownerDocument||r,u=o.documentElement,f=o.body,n.pageX=i.clientX+(u&&u.scrollLeft||f&&f.scrollLeft||0)-(u&&u.clientLeft||f&&f.clientLeft||0),n.pageY=i.clientY+(u&&u.scrollTop||f&&f.scrollTop||0)-(u&&u.clientTop||f&&f.clientTop||0)),!n.relatedTarget&&s&&(n.relatedTarget=s===n.target?i.toElement:s),!n.which&&e!==t&&(n.which=e&1?1:e&2?3:e&4?2:0),n}},fix:function(n){if(n[i.expando])return n;var f,e,t=n,u=i.event.fixHooks[n.type]||{},o=u.props?this.props.concat(u.props):this.props;for(n=i.Event(t),f=o.length;f;)e=o[--f],n[e]=t[e];return n.target||(n.target=t.srcElement||r),n.target.nodeType===3&&(n.target=n.target.parentNode),n.metaKey=!!n.metaKey,u.filter?u.filter(n,t):n},special:{load:{noBubble:!0},focus:{delegateType:"focusin"},blur:{delegateType:"focusout"},beforeunload:{setup:function(n,t,r){i.isWindow(this)&&(this.onbeforeunload=r)},teardown:function(n,t){this.onbeforeunload===t&&(this.onbeforeunload=null)}}},simulate:function(n,t,r,u){var f=i.extend(new i.Event,r,{type:n,isSimulated:!0,originalEvent:{}});u?i.event.trigger(f,null,t):i.event.dispatch.call(t,f),f.isDefaultPrevented()&&r.preventDefault()}},i.event.handle=i.event.dispatch,i.removeEvent=r.removeEventListener?function(n,t,i){n.removeEventListener&&n.removeEventListener(t,i,!1)}:function(n,t,i){var r="on"+t;n.detachEvent&&(typeof n[r]=="undefined"&&(n[r]=null),n.detachEvent(r,i))},i.Event=function(n,t){if(this instanceof i.Event)n&&n.type?(this.originalEvent=n,this.type=n.type,this.isDefaultPrevented=n.defaultPrevented||n.returnValue===!1||n.getPreventDefault&&n.getPreventDefault()?d:a):this.type=n,t&&i.extend(this,t),this.timeStamp=n&&n.timeStamp||i.now(),this[i.expando]=!0;else return new i.Event(n,t)},i.Event.prototype={preventDefault:function(){this.isDefaultPrevented=d;var n=this.originalEvent;n&&(n.preventDefault?n.preventDefault():n.returnValue=!1)},stopPropagation:function(){this.isPropagationStopped=d;var n=this.originalEvent;n&&(n.stopPropagation&&n.stopPropagation(),n.cancelBubble=!0)},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=d,this.stopPropagation()},isDefaultPrevented:a,isPropagationStopped:a,isImmediatePropagationStopped:a},i.each({mouseenter:"mouseover",mouseleave:"mouseout"},function(n,t){i.event.special[n]={delegateType:t,bindType:t,handle:function(n){var f,e=this,r=n.relatedTarget,u=n.handleObj,o=u.selector;return r&&(r===e||i.contains(e,r))||(n.type=u.origType,f=u.handler.apply(this,arguments),n.type=t),f}}}),i.support.submitBubbles||(i.event.special.submit={setup:function(){if(i.nodeName(this,"form"))return!1;i.event.add(this,"click._submit keypress._submit",function(n){var u=n.target,r=i.nodeName(u,"input")||i.nodeName(u,"button")?u.form:t;r&&!i._data(r,"_submit_attached")&&(i.event.add(r,"submit._submit",function(n){n._submit_bubble=!0}),i._data(r,"_submit_attached",!0))})},postDispatch:function(n){n._submit_bubble&&(delete n._submit_bubble,this.parentNode&&!n.isTrigger&&i.event.simulate("submit",this.parentNode,n,!0))},teardown:function(){if(i.nodeName(this,"form"))return!1;i.event.remove(this,"._submit")}}),i.support.changeBubbles||(i.event.special.change={setup:function(){if(bt.test(this.nodeName))return(this.type==="checkbox"||this.type==="radio")&&(i.event.add(this,"propertychange._change",function(n){n.originalEvent.propertyName==="checked"&&(this._just_changed=!0)}),i.event.add(this,"click._change",function(n){this._just_changed&&!n.isTrigger&&(this._just_changed=!1),i.event.simulate("change",this,n,!0)})),!1;i.event.add(this,"beforeactivate._change",function(n){var t=n.target;bt.test(t.nodeName)&&!i._data(t,"_change_attached")&&(i.event.add(t,"change._change",function(n){!this.parentNode||n.isSimulated||n.isTrigger||i.event.simulate("change",this.parentNode,n,!0)}),i._data(t,"_change_attached",!0))})},handle:function(n){var t=n.target;if(this!==t||n.isSimulated||n.isTrigger||t.type!=="radio"&&t.type!=="checkbox")return n.handleObj.handler.apply(this,arguments)},teardown:function(){return i.event.remove(this,"._change"),!bt.test(this.nodeName)}}),i.support.focusinBubbles||i.each({focus:"focusin",blur:"focusout"},function(n,t){var u=0,f=function(n){i.event.simulate(t,n.target,i.event.fix(n),!0)};i.event.special[t]={setup:function(){u++==0&&r.addEventListener(n,f,!0)},teardown:function(){--u==0&&r.removeEventListener(n,f,!0)}}}),i.fn.extend({on:function(n,r,u,f,e){var o,s;if(typeof n=="object"){typeof r!="string"&&(u=u||r,r=t);for(s in n)this.on(s,r,u,n[s],e);return this}if(u==null&&f==null?(f=r,u=r=t):f==null&&(typeof r=="string"?(f=u,u=t):(f=u,u=r,r=t)),f===!1)f=a;else if(!f)return this;return e===1&&(o=f,f=function(n){return i().off(n),o.apply(this,arguments)},f.guid=o.guid||(o.guid=i.guid++)),this.each(function(){i.event.add(this,n,f,u,r)})},one:function(n,t,i,r){return this.on(n,t,i,r,1)},off:function(n,r,u){var f,e;if(n&&n.preventDefault&&n.handleObj)return f=n.handleObj,i(n.delegateTarget).off(f.namespace?f.origType+"."+f.namespace:f.origType,f.selector,f.handler),this;if(typeof n=="object"){for(e in n)this.off(e,r,n[e]);return this}return(r===!1||typeof r=="function")&&(u=r,r=t),u===!1&&(u=a),this.each(function(){i.event.remove(this,n,u,r)})},bind:function(n,t,i){return this.on(n,null,t,i)},unbind:function(n,t){return this.off(n,null,t)},live:function(n,t,r){return i(this.context).on(n,this.selector,t,r),this},die:function(n,t){return i(this.context).off(n,this.selector||"**",t),this},delegate:function(n,t,i,r){return this.on(t,n,i,r)},undelegate:function(n,t,i){return arguments.length===1?this.off(n,"**"):this.off(t,n||"**",i)},trigger:function(n,t){return this.each(function(){i.event.trigger(n,t,this)})},triggerHandler:function(n,t){if(this[0])return i.event.trigger(n,t,this[0],!0)},toggle:function(n){var t=arguments,u=n.guid||i.guid++,r=0,f=function(u){var f=(i._data(this,"lastToggle"+n.guid)||0)%r;return i._data(this,"lastToggle"+n.guid,f+1),u.preventDefault(),t[f].apply(this,arguments)||!1};for(f.guid=u;r<t.length;)t[r++].guid=u;return this.click(f)},hover:function(n,t){return this.mouseenter(n).mouseleave(t||n)}}),i.each("blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error contextmenu".split(" "),function(n,t){i.fn[t]=function(n,i){return i==null&&(i=n,n=null),arguments.length>0?this.on(t,null,n,i):this.trigger(t)},te.test(t)&&(i.event.fixHooks[t]=i.event.keyHooks),ie.test(t)&&(i.event.fixHooks[t]=i.event.mouseHooks)}),function(n,t){function r(n,t,i,r){i=i||[],t=t||s;var e,u,o,f,h=t.nodeType;if(!n||typeof n!="string")return i;if(h!==1&&h!==9)return[];if(o=it(t),!o&&!r&&(e=di.exec(n)))if(f=e[1]){if(h===9){if(u=t.getElementById(f),!u||!u.parentNode)return i;if(u.id===f)return i.push(u),i}else if(t.ownerDocument&&(u=t.ownerDocument.getElementById(f))&&ni(t,u)&&u.id===f)return i.push(u),i}else{if(e[2])return p.apply(i,w.call(t.getElementsByTagName(n),0)),i;if((f=e[3])&&hi&&t.getElementsByClassName)return p.apply(i,w.call(t.getElementsByClassName(f),0)),i}return lt(n.replace(ft,"$1"),t,i,r,o)}function b(n){return function(t){var i=t.nodeName.toLowerCase();return i==="input"&&t.type===n}}function dt(n){return function(t){var i=t.nodeName.toLowerCase();return(i==="input"||i==="button")&&t.type===n}}function a(n){return h(function(t){return t=+t,h(function(i,r){for(var u,f=n([],i.length,t),e=f.length;e--;)i[u=f[e]]&&(i[u]=!(r[u]=i[u]))})})}function d(n,t,i){if(n===t)return i;for(var r=n.nextSibling;r;){if(r===t)return-1;r=r.nextSibling}return 1}function g(n,t){var o,f,c,h,i,l,a,v=fi[e][n];if(v)return t?0:v.slice(0);for(i=n,l=[],a=u.preFilter;i;){(!o||(f=wi.exec(i)))&&(f&&(i=i.slice(f[0].length)),l.push(c=[])),o=!1,(f=bi.exec(i))&&(c.push(o=new ii(f.shift())),i=i.slice(o.length),o.type=f[0].replace(ft," "));for(h in u.filter)(f=et[h].exec(i))&&(!a[h]||(f=a[h](f,s,!0)))&&(c.push(o=new ii(f.shift())),i=i.slice(o.length),o.type=h,o.matches=f);if(!o)break}return t?i.length:i?r.error(n):fi(n,l).slice(0)}function ot(n,t,i){var r=t.dir,u=i&&t.dir==="parentNode",f=ai++;return t.first?function(t,i,f){while(t=t[r])if(u||t.nodeType===1)return n(t,i,f)}:function(t,i,o){if(o){while(t=t[r])if((u||t.nodeType===1)&&n(t,i,o))return t}else for(var s,h=ut+" "+f+" ",c=h+at;t=t[r];)if(u||t.nodeType===1){if((s=t[e])===c)return t.sizset;if(typeof s=="string"&&s.indexOf(h)===0){if(t.sizset)return t}else{if(t[e]=c,n(t,i,o))return t.sizset=!0,t;t.sizset=!1}}}}function st(n){return n.length>1?function(t,i,r){for(var u=n.length;u--;)if(!n[u](t,i,r))return!1;return!0}:n[0]}function nt(n,t,i,r,u){for(var e,o=[],f=0,s=n.length,h=t!=null;f<s;f++)(e=n[f])&&(!i||i(e,r,u))&&(o.push(e),h&&t.push(f));return o}function ht(n,t,i,r,u,f){return r&&!r[e]&&(r=ht(r)),u&&!u[e]&&(u=ht(u,f)),h(function(f,e,o,s){if(!f||!u){var c,l,a,v=[],y=[],b=e.length,k=f||li(t||"*",o.nodeType?[o]:o,[],f),w=n&&(f||!t)?nt(k,v,n,o,s):k,h=i?u||(f?n:b||r)?[]:e:w;if(i&&i(w,h,o,s),r)for(a=nt(h,y),r(a,[],o,s),c=a.length;c--;)(l=a[c])&&(h[y[c]]=!(w[y[c]]=l));if(f)for(c=n&&h.length;c--;)(l=h[c])&&(f[v[c]]=!(e[v[c]]=l));else h=nt(h===e?h.splice(b,h.length):h),u?u(null,e,h,s):p.apply(e,h)}})}function ct(n){for(var s,r,i,o=n.length,h=u.relative[n[0].type],c=h||u.relative[" "],t=h?1:0,l=ot(function(n){return n===s},c,!0),a=ot(function(n){return ri.call(s,n)>-1},c,!0),f=[function(n,t,i){return!h&&(i||t!==rt)||((s=t).nodeType?l(n,t,i):a(n,t,i))}];t<o;t++)if(r=u.relative[n[t].type])f=[ot(st(f),r)];else{if(r=u.filter[n[t].type].apply(null,n[t].matches),r[e]){for(i=++t;i<o;i++)if(u.relative[n[i].type])break;return ht(t>1&&st(f),t>1&&n.slice(0,t-1).join("").replace(ft,"$1"),r,t<i&&ct(n.slice(t,i)),i<o&&ct(n=n.slice(i)),i<o&&n.join(""))}f.push(r)}return st(f)}function ci(n,t){var f=t.length>0,e=n.length>0,i=function(o,h,c,l,a){var y,b,k,w=[],d=0,v="0",g=o&&[],tt=a!=null,it=rt,et=o||e&&u.find.TAG("*",a&&h.parentNode||h),ft=ut+=it==null?1:Math.E;for(tt&&(rt=h!==s&&h,at=i.el);(y=et[v])!=null;v++){if(e&&y){for(b=0;k=n[b];b++)if(k(y,h,c)){l.push(y);break}tt&&(ut=ft,at=++i.el)}f&&((y=!k&&y)&&d--,o&&g.push(y))}if(d+=v,f&&v!==d){for(b=0;k=t[b];b++)k(g,w,h,c);if(o){if(d>0)while(v--)g[v]||w[v]||(w[v]=vi.call(l));w=nt(w)}p.apply(l,w),tt&&!o&&w.length>0&&d+t.length>1&&r.uniqueSort(l)}return tt&&(ut=ft,rt=it),g};return i.el=0,f?h(i):i}function li(n,t,i,u){for(var f=0,e=t.length;f<e;f++)r(n,t[f],i,u);return i}function lt(n,t,i,r,f){var o,e,s,c,l,h=g(n),a=h.length;if(!r&&h.length===1){if(e=h[0]=h[0].slice(0),e.length>2&&(s=e[0]).type==="ID"&&t.nodeType===9&&!f&&u.relative[e[1].type]){if(t=u.find.ID(s.matches[0].replace(y,""),t,f)[0],!t)return i;n=n.slice(e.shift().length)}for(o=et.POS.test(n)?-1:e.length-1;o>=0;o--){if(s=e[o],u.relative[c=s.type])break;if((l=u.find[c])&&(r=l(s.matches[0].replace(y,""),kt.test(e[0].type)&&t.parentNode||t,f))){if(e.splice(o,1),n=r.length&&e.join(""),!n)return p.apply(i,w.call(r,0)),i;break}}}return yt(n,h)(r,t,f,i,kt.test(n)),i}function gt(){}var at,vt,u,tt,it,ni,yt,pt,k,rt,ti=!0,c="undefined",e=("sizcache"+Math.random()).replace(".",""),ii=String,s=n.document,o=s.documentElement,ut=0,ai=0,vi=[].pop,p=[].push,w=[].slice,ri=[].indexOf||function(n){for(var t=0,i=this.length;t<i;t++)if(this[t]===n)return t;return-1},h=function(n,t){return n[e]=t==null||t,n},wt=function(){var n={},t=[];return h(function(i,r){return t.push(i)>u.cacheLength&&delete n[t.shift()],n[i]=r},n)},ui=wt(),fi=wt(),ei=wt(),f="[\\x20\\t\\r\\n\\f]",v="(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",yi=v.replace("w","w#"),pi="([*^$|!~]?=)",oi="\\["+f+"*("+v+")"+f+"*(?:"+pi+f+"*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|("+yi+")|)|)"+f+"*\\]",bt=":("+v+")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:"+oi+")|[^:]|\\\\.)*|.*))\\)|)",si=":(even|odd|eq|gt|lt|nth|first|last)(?:\\("+f+"*((?:-\\d)?\\d*)"+f+"*\\)|)(?=[^-]|$)",ft=new RegExp("^"+f+"+|((?:^|[^\\\\])(?:\\\\.)*)"+f+"+$","g"),wi=new RegExp("^"+f+"*,"+f+"*"),bi=new RegExp("^"+f+"*([\\x20\\t\\r\\n\\f>+~])"+f+"*"),ki=new RegExp(bt),di=/^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,fr=/^:not/,kt=/[\x20\t\r\n\f]*[+~]/,er=/:not\($/,gi=/h\d/i,nr=/input|select|textarea|button/i,y=/\\(?!\\)/g,et={ID:new RegExp("^#("+v+")"),CLASS:new RegExp("^\\.("+v+")"),NAME:new RegExp("^\\[name=['\"]?("+v+")['\"]?\\]"),TAG:new RegExp("^("+v.replace("w","w*")+")"),ATTR:new RegExp("^"+oi),PSEUDO:new RegExp("^"+bt),POS:new RegExp(si,"i"),CHILD:new RegExp("^:(only|nth|first|last)-child(?:\\("+f+"*(even|odd|(([+-]|)(\\d*)n|)"+f+"*(?:([+-]|)"+f+"*(\\d+)|))"+f+"*\\)|)","i"),needsContext:new RegExp("^"+f+"*[>+~]|"+si,"i")},l=function(n){var t=s.createElement("div");try{return n(t)}catch(i){return!1}finally{t=null}},tr=l(function(n){return n.appendChild(s.createComment("")),!n.getElementsByTagName("*").length}),ir=l(function(n){return n.innerHTML="<a href='#'><\/a>",n.firstChild&&typeof n.firstChild.getAttribute!==c&&n.firstChild.getAttribute("href")==="#"}),rr=l(function(n){n.innerHTML="<select><\/select>";var t=typeof n.lastChild.getAttribute("multiple");return t!=="boolean"&&t!=="string"}),hi=l(function(n){return n.innerHTML="<div class='hidden e'><\/div><div class='hidden'><\/div>",!n.getElementsByClassName||!n.getElementsByClassName("e").length?!1:(n.lastChild.className="e",n.getElementsByClassName("e").length===2)}),ur=l(function(n){n.id=e+0,n.innerHTML="<a name='"+e+"'><\/a><div name='"+e+"'><\/div>",o.insertBefore(n,o.firstChild);var t=s.getElementsByName&&s.getElementsByName(e).length===2+s.getElementsByName(e+0).length;return vt=!s.getElementById(e),o.removeChild(n),t});try{w.call(o.childNodes,0)[0].nodeType}catch(or){w=function(n){for(var t,i=[];t=this[n];n++)i.push(t);return i}}r.matches=function(n,t){return r(n,null,null,t)},r.matchesSelector=function(n,t){return r(t,null,null,[n]).length>0},tt=r.getText=function(n){var r,i="",u=0,t=n.nodeType;if(t){if(t===1||t===9||t===11){if(typeof n.textContent=="string")return n.textContent;for(n=n.firstChild;n;n=n.nextSibling)i+=tt(n)}else if(t===3||t===4)return n.nodeValue}else for(;r=n[u];u++)i+=tt(r);return i},it=r.isXML=function(n){var t=n&&(n.ownerDocument||n).documentElement;return t?t.nodeName!=="HTML":!1},ni=r.contains=o.contains?function(n,t){var r=n.nodeType===9?n.documentElement:n,i=t&&t.parentNode;return n===i||!!(i&&i.nodeType===1&&r.contains&&r.contains(i))}:o.compareDocumentPosition?function(n,t){return t&&!!(n.compareDocumentPosition(t)&16)}:function(n,t){while(t=t.parentNode)if(t===n)return!0;return!1},r.attr=function(n,t){var i,r=it(n);return r||(t=t.toLowerCase()),(i=u.attrHandle[t])?i(n):r||rr?n.getAttribute(t):(i=n.getAttributeNode(t),i?typeof n[t]=="boolean"?n[t]?t:null:i.specified?i.value:null:null)},u=r.selectors={cacheLength:50,createPseudo:h,match:et,attrHandle:ir?{}:{href:function(n){return n.getAttribute("href",2)},type:function(n){return n.getAttribute("type")}},find:{ID:vt?function(n,t,i){if(typeof t.getElementById!==c&&!i){var r=t.getElementById(n);return r&&r.parentNode?[r]:[]}}:function(n,i,r){if(typeof i.getElementById!==c&&!r){var u=i.getElementById(n);return u?u.id===n||typeof u.getAttributeNode!==c&&u.getAttributeNode("id").value===n?[u]:t:[]}},TAG:tr?function(n,t){if(typeof t.getElementsByTagName!==c)return t.getElementsByTagName(n)}:function(n,t){var f=t.getElementsByTagName(n),i,r,u;if(n==="*"){for(r=[],u=0;i=f[u];u++)i.nodeType===1&&r.push(i);return r}return f},NAME:ur&&function(n,t){if(typeof t.getElementsByName!==c)return t.getElementsByName(name)},CLASS:hi&&function(n,t,i){if(typeof t.getElementsByClassName!==c&&!i)return t.getElementsByClassName(n)}},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(n){return n[1]=n[1].replace(y,""),n[3]=(n[4]||n[5]||"").replace(y,""),n[2]==="~="&&(n[3]=" "+n[3]+" "),n.slice(0,4)},CHILD:function(n){return n[1]=n[1].toLowerCase(),n[1]==="nth"?(n[2]||r.error(n[0]),n[3]=+(n[3]?n[4]+(n[5]||1):2*(n[2]==="even"||n[2]==="odd")),n[4]=+(n[6]+n[7]||n[2]==="odd")):n[2]&&r.error(n[0]),n},PSEUDO:function(n){var t,i;return et.CHILD.test(n[0])?null:(n[3]?n[2]=n[3]:(t=n[4])&&(ki.test(t)&&(i=g(t,!0))&&(i=t.indexOf(")",t.length-i)-t.length)&&(t=t.slice(0,i),n[0]=n[0].slice(0,i)),n[2]=t),n.slice(0,3))}},filter:{ID:vt?function(n){return n=n.replace(y,""),function(t){return t.getAttribute("id")===n}}:function(n){return n=n.replace(y,""),function(t){var i=typeof t.getAttributeNode!==c&&t.getAttributeNode("id");return i&&i.value===n}},TAG:function(n){return n==="*"?function(){return!0}:(n=n.replace(y,"").toLowerCase(),function(t){return t.nodeName&&t.nodeName.toLowerCase()===n})},CLASS:function(n){var t=ui[e][n];return t||(t=ui(n,new RegExp("(^|"+f+")"+n+"("+f+"|$)"))),function(n){return t.test(n.className||typeof n.getAttribute!==c&&n.getAttribute("class")||"")}},ATTR:function(n,t,i){return function(u){var e=r.attr(u,n);return e==null?t==="!=":t?(e+="",t==="="?e===i:t==="!="?e!==i:t==="^="?i&&e.indexOf(i)===0:t==="*="?i&&e.indexOf(i)>-1:t==="$="?i&&e.substr(e.length-i.length)===i:t==="~="?(" "+e+" ").indexOf(i)>-1:t==="|="?e===i||e.substr(0,i.length+1)===i+"-":!1):!0}},CHILD:function(n,t,i,r){return n==="nth"?function(n){var t,u,f=n.parentNode;if(i===1&&r===0)return!0;if(f)for(u=0,t=f.firstChild;t;t=t.nextSibling)if(t.nodeType===1&&(u++,n===t))break;return u-=r,u===i||u%i==0&&u/i>=0}:function(t){var i=t;switch(n){case"only":case"first":while(i=i.previousSibling)if(i.nodeType===1)return!1;if(n==="first")return!0;i=t;case"last":while(i=i.nextSibling)if(i.nodeType===1)return!1;return!0}}},PSEUDO:function(n,t){var f,i=u.pseudos[n]||u.setFilters[n.toLowerCase()]||r.error("unsupported pseudo: "+n);return i[e]?i(t):i.length>1?(f=[n,n,"",t],u.setFilters.hasOwnProperty(n.toLowerCase())?h(function(n,r){for(var u,f=i(n,t),e=f.length;e--;)u=ri.call(n,f[e]),n[u]=!(r[u]=f[e])}):function(n){return i(n,0,f)}):i}},pseudos:{not:h(function(n){var i=[],r=[],t=yt(n.replace(ft,"$1"));return t[e]?h(function(n,i,r,u){for(var e,o=t(n,null,u,[]),f=n.length;f--;)(e=o[f])&&(n[f]=!(i[f]=e))}):function(n,u,f){return i[0]=n,t(i,null,f,r),!r.pop()}}),has:h(function(n){return function(t){return r(n,t).length>0}}),contains:h(function(n){return function(t){return(t.textContent||t.innerText||tt(t)).indexOf(n)>-1}}),enabled:function(n){return n.disabled===!1},disabled:function(n){return n.disabled===!0},checked:function(n){var t=n.nodeName.toLowerCase();return t==="input"&&!!n.checked||t==="option"&&!!n.selected},selected:function(n){return n.parentNode&&n.parentNode.selectedIndex,n.selected===!0},parent:function(n){return!u.pseudos.empty(n)},empty:function(n){var t;for(n=n.firstChild;n;){if(n.nodeName>"@"||(t=n.nodeType)===3||t===4)return!1;n=n.nextSibling}return!0},header:function(n){return gi.test(n.nodeName)},text:function(n){var t,i;return n.nodeName.toLowerCase()==="input"&&(t=n.type)==="text"&&((i=n.getAttribute("type"))==null||i.toLowerCase()===t)},radio:b("radio"),checkbox:b("checkbox"),file:b("file"),password:b("password"),image:b("image"),submit:dt("submit"),reset:dt("reset"),button:function(n){var t=n.nodeName.toLowerCase();return t==="input"&&n.type==="button"||t==="button"},input:function(n){return nr.test(n.nodeName)},focus:function(n){var t=n.ownerDocument;return n===t.activeElement&&(!t.hasFocus||t.hasFocus())&&(!!n.type||!!n.href)},active:function(n){return n===n.ownerDocument.activeElement},first:a(function(){return[0]}),last:a(function(n,t){return[t-1]}),eq:a(function(n,t,i){return[i<0?i+t:i]}),even:a(function(n,t){for(var r=0;r<t;r+=2)n.push(r);return n}),odd:a(function(n,t){for(var r=1;r<t;r+=2)n.push(r);return n}),lt:a(function(n,t,i){for(var r=i<0?i+t:i;--r>=0;)n.push(r);return n}),gt:a(function(n,t,i){for(var r=i<0?i+t:i;++r<t;)n.push(r);return n})}},pt=o.compareDocumentPosition?function(n,t){return n===t?(k=!0,0):(!n.compareDocumentPosition||!t.compareDocumentPosition?n.compareDocumentPosition:n.compareDocumentPosition(t)&4)?-1:1}:function(n,t){var i;if(n===t)return k=!0,0;if(n.sourceIndex&&t.sourceIndex)return n.sourceIndex-t.sourceIndex;var e,h,u=[],f=[],o=n.parentNode,s=t.parentNode,r=o;if(o===s)return d(n,t);if(!o)return-1;if(!s)return 1;while(r)u.unshift(r),r=r.parentNode;for(r=s;r;)f.unshift(r),r=r.parentNode;for(e=u.length,h=f.length,i=0;i<e&&i<h;i++)if(u[i]!==f[i])return d(u[i],f[i]);return i===e?d(n,f[i],-1):d(u[i],t,1)},[0,0].sort(pt),ti=!k,r.uniqueSort=function(n){var i,t=1;if(k=ti,n.sort(pt),k)for(;i=n[t];t++)i===n[t-1]&&n.splice(t--,1);return n},r.error=function(n){throw new Error("Syntax error, unrecognized expression: "+n);},yt=r.compile=function(n,t){var r,u=[],f=[],i=ei[e][n];if(!i){for(t||(t=g(n)),r=t.length;r--;)i=ct(t[r]),i[e]?u.push(i):f.push(i);i=ei(n,ci(f,u))}return i},s.querySelectorAll&&function(){var u,s=lt,h=/'|\\/g,c=/\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,n=[":focus"],t=[":active",":focus"],i=o.matchesSelector||o.mozMatchesSelector||o.webkitMatchesSelector||o.oMatchesSelector||o.msMatchesSelector;l(function(t){t.innerHTML="<select><option selected=''><\/option><\/select>",t.querySelectorAll("[selected]").length||n.push("\\["+f+"*(?:checked|disabled|ismap|multiple|readonly|selected|value)"),t.querySelectorAll(":checked").length||n.push(":checked")}),l(function(t){t.innerHTML="<p test=''><\/p>",t.querySelectorAll("[test^='']").length&&n.push("[*^$]="+f+"*(?:\"\"|'')"),t.innerHTML="<input type='hidden'/>",t.querySelectorAll(":enabled").length||n.push(":enabled",":disabled")}),n=new RegExp(n.join("|")),lt=function(t,i,r,u,f){if(!u&&!f&&(!n||!n.test(t))){var o,l,a=!0,c=e,y=i,v=i.nodeType===9&&t;if(i.nodeType===1&&i.nodeName.toLowerCase()!=="object"){for(o=g(t),(a=i.getAttribute("id"))?c=a.replace(h,"\\$&"):i.setAttribute("id",c),c="[id='"+c+"'] ",l=o.length;l--;)o[l]=c+o[l].join("");y=kt.test(t)&&i.parentNode||i,v=o.join(",")}if(v)try{return p.apply(r,w.call(y.querySelectorAll(v),0)),r}catch(b){}finally{a||i.removeAttribute("id")}}return s(t,i,r,u,f)},i&&(l(function(n){u=i.call(n,"div");try{i.call(n,"[test!='']:sizzle"),t.push("!=",bt)}catch(r){}}),t=new RegExp(t.join("|")),r.matchesSelector=function(f,e){if(e=e.replace(c,"='$1']"),!it(f)&&!t.test(e)&&(!n||!n.test(e)))try{var o=i.call(f,e);if(o||u||f.document&&f.document.nodeType!==11)return o}catch(s){}return r(e,null,null,[f]).length>0})}(),u.pseudos.nth=u.pseudos.eq,u.filters=gt.prototype=u.pseudos,u.setFilters=new gt,r.attr=i.attr,i.find=r,i.expr=r.selectors,i.expr[":"]=i.expr.pseudos,i.unique=r.uniqueSort,i.text=r.getText,i.isXMLDoc=r.isXML,i.contains=r.contains}(n);var re=/Until$/,ue=/^(?:parents|prev(?:Until|All))/,fe=/^.[^:#\[\.,]*$/,br=i.expr.match.needsContext,ee={children:!0,contents:!0,next:!0,prev:!0};i.fn.extend({find:function(n){var t,f,o,u,e,r,s=this;if(typeof n!="string")return i(n).filter(function(){for(t=0,f=s.length;t<f;t++)if(i.contains(s[t],this))return!0});for(r=this.pushStack("","find",n),t=0,f=this.length;t<f;t++)if(o=r.length,i.find(n,this[t],r),t>0)for(u=o;u<r.length;u++)for(e=0;e<o;e++)if(r[e]===r[u]){r.splice(u--,1);break}return r},has:function(n){var t,r=i(n,this),u=r.length;return this.filter(function(){for(t=0;t<u;t++)if(i.contains(this,r[t]))return!0})},not:function(n){return this.pushStack(ei(this,n,!1),"not",n)},filter:function(n){return this.pushStack(ei(this,n,!0),"filter",n)},is:function(n){return!!n&&(typeof n=="string"?br.test(n)?i(n,this.context).index(this[0])>=0:i.filter(n,this).length>0:this.filter(n).length>0)},closest:function(n,t){for(var r,f=0,o=this.length,u=[],e=br.test(n)||typeof n!="string"?i(n,t||this.context):0;f<o;f++)for(r=this[f];r&&r.ownerDocument&&r!==t&&r.nodeType!==11;){if(e?e.index(r)>-1:i.find.matchesSelector(r,n)){u.push(r);break}r=r.parentNode}return u=u.length>1?i.unique(u):u,this.pushStack(u,"closest",n)},index:function(n){return n?typeof n=="string"?i.inArray(this[0],i(n)):i.inArray(n.jquery?n[0]:n,this):this[0]&&this[0].parentNode?this.prevAll().length:-1},add:function(n,t){var u=typeof n=="string"?i(n,t):i.makeArray(n&&n.nodeType?[n]:n),r=i.merge(this.get(),u);return this.pushStack(b(u[0])||b(r[0])?r:i.unique(r))},addBack:function(n){return this.add(n==null?this.prevObject:this.prevObject.filter(n))}}),i.fn.andSelf=i.fn.addBack,i.each({parent:function(n){var t=n.parentNode;return t&&t.nodeType!==11?t:null},parents:function(n){return i.dir(n,"parentNode")},parentsUntil:function(n,t,r){return i.dir(n,"parentNode",r)},next:function(n){return fi(n,"nextSibling")},prev:function(n){return fi(n,"previousSibling")},nextAll:function(n){return i.dir(n,"nextSibling")},prevAll:function(n){return i.dir(n,"previousSibling")},nextUntil:function(n,t,r){return i.dir(n,"nextSibling",r)},prevUntil:function(n,t,r){return i.dir(n,"previousSibling",r)},siblings:function(n){return i.sibling((n.parentNode||{}).firstChild,n)},children:function(n){return i.sibling(n.firstChild)},contents:function(n){return i.nodeName(n,"iframe")?n.contentDocument||n.contentWindow.document:i.merge([],n.childNodes)}},function(n,t){i.fn[n]=function(r,u){var f=i.map(this,t,r);return re.test(n)||(u=r),u&&typeof u=="string"&&(f=i.filter(u,f)),f=this.length>1&&!ee[n]?i.unique(f):f,this.length>1&&ue.test(n)&&(f=f.reverse()),this.pushStack(f,n,o.call(arguments).join(","))}}),i.extend({filter:function(n,t,r){return r&&(n=":not("+n+")"),t.length===1?i.find.matchesSelector(t[0],n)?[t[0]]:[]:i.find.matches(n,t)},dir:function(n,r,u){for(var e=[],f=n[r];f&&f.nodeType!==9&&(u===t||f.nodeType!==1||!i(f).is(u));)f.nodeType===1&&e.push(f),f=f[r];return e},sibling:function(n,t){for(var i=[];n;n=n.nextSibling)n.nodeType===1&&n!==t&&i.push(n);return i}});var kr="abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",oe=/ jQuery\d+="(?:null|\d+)"/g,kt=/^\s+/,dr=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,gr=/<([\w:]+)/,se=/<tbody/i,he=/<|&#?\w+;/,ce=/<(?:script|style|link)/i,le=/<(?:script|object|embed|option|style)/i,dt=new RegExp("<(?:"+kr+")[\\s/>]","i"),nu=/^(?:checkbox|radio)$/,tu=/checked\s*(?:[^=]|=\s*.checked.)/i,ae=/\/(java|ecma)script/i,ve=/^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,e={option:[1,"<select multiple='multiple'>","<\/select>"],legend:[1,"<fieldset>","<\/fieldset>"],thead:[1,"<table>","<\/table>"],tr:[2,"<table><tbody>","<\/tbody><\/table>"],td:[3,"<table><tbody><tr>","<\/tr><\/tbody><\/table>"],col:[2,"<table><tbody><\/tbody><colgroup>","<\/colgroup><\/table>"],area:[1,"<map>","<\/map>"],_default:[0,"",""]},iu=oi(r),gt=iu.appendChild(r.createElement("div"));e.optgroup=e.option,e.tbody=e.tfoot=e.colgroup=e.caption=e.thead,e.th=e.td,i.support.htmlSerialize||(e._default=[1,"X<div>","<\/div>"]),i.fn.extend({text:function(n){return i.access(this,function(n){return n===t?i.text(this):this.empty().append((this[0]&&this[0].ownerDocument||r).createTextNode(n))},null,n,arguments.length)},wrapAll:function(n){if(i.isFunction(n))return this.each(function(t){i(this).wrapAll(n.call(this,t))});if(this[0]){var t=i(n,this[0].ownerDocument).eq(0).clone(!0);this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var n=this;n.firstChild&&n.firstChild.nodeType===1;)n=n.firstChild;return n}).append(this)}return this},wrapInner:function(n){return i.isFunction(n)?this.each(function(t){i(this).wrapInner(n.call(this,t))}):this.each(function(){var t=i(this),r=t.contents();r.length?r.wrapAll(n):t.append(n)})},wrap:function(n){var t=i.isFunction(n);return this.each(function(r){i(this).wrapAll(t?n.call(this,r):n)})},unwrap:function(){return this.parent().each(function(){i.nodeName(this,"body")||i(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,!0,function(n){(this.nodeType===1||this.nodeType===11)&&this.appendChild(n)})},prepend:function(){return this.domManip(arguments,!0,function(n){(this.nodeType===1||this.nodeType===11)&&this.insertBefore(n,this.firstChild)})},before:function(){if(!b(this[0]))return this.domManip(arguments,!1,function(n){this.parentNode.insertBefore(n,this)});if(arguments.length){var n=i.clean(arguments);return this.pushStack(i.merge(n,this),"before",this.selector)}},after:function(){if(!b(this[0]))return this.domManip(arguments,!1,function(n){this.parentNode.insertBefore(n,this.nextSibling)});if(arguments.length){var n=i.clean(arguments);return this.pushStack(i.merge(this,n),"after",this.selector)}},remove:function(n,t){for(var r,u=0;(r=this[u])!=null;u++)(!n||i.filter(n,[r]).length)&&(t||r.nodeType!==1||(i.cleanData(r.getElementsByTagName("*")),i.cleanData([r])),r.parentNode&&r.parentNode.removeChild(r));return this},empty:function(){for(var n,t=0;(n=this[t])!=null;t++)for(n.nodeType===1&&i.cleanData(n.getElementsByTagName("*"));n.firstChild;)n.removeChild(n.firstChild);return this},clone:function(n,t){return n=n==null?!1:n,t=t==null?n:t,this.map(function(){return i.clone(this,n,t)})},html:function(n){return i.access(this,function(n){var r=this[0]||{},u=0,f=this.length;if(n===t)return r.nodeType===1?r.innerHTML.replace(oe,""):t;if(typeof n=="string"&&!ce.test(n)&&(i.support.htmlSerialize||!dt.test(n))&&(i.support.leadingWhitespace||!kt.test(n))&&!e[(gr.exec(n)||["",""])[1].toLowerCase()]){n=n.replace(dr,"<$1><\/$2>");try{for(;u<f;u++)r=this[u]||{},r.nodeType===1&&(i.cleanData(r.getElementsByTagName("*")),r.innerHTML=n);r=0}catch(o){}}r&&this.empty().append(n)},null,n,arguments.length)},replaceWith:function(n){return b(this[0])?this.length?this.pushStack(i(i.isFunction(n)?n():n),"replaceWith",n):this:i.isFunction(n)?this.each(function(t){var r=i(this),u=r.html();r.replaceWith(n.call(this,t,u))}):(typeof n!="string"&&(n=i(n).detach()),this.each(function(){var t=this.nextSibling,r=this.parentNode;i(this).remove(),t?i(t).before(n):i(r).append(n)}))},detach:function(n){return this.remove(n,!0)},domManip:function(n,r,u){n=[].concat.apply([],n);var h,o,f,a,e=0,s=n[0],c=[],l=this.length;if(!i.support.checkClone&&l>1&&typeof s=="string"&&tu.test(s))return this.each(function(){i(this).domManip(n,r,u)});if(i.isFunction(s))return this.each(function(f){var e=i(this);n[0]=s.call(this,f,r?e.html():t),e.domManip(n,r,u)});if(this[0]){if(h=i.buildFragment(n,this,c),f=h.fragment,o=f.firstChild,f.childNodes.length===1&&(f=o),o)for(r=r&&i.nodeName(o,"tr"),a=h.cacheable||l-1;e<l;e++)u.call(r&&i.nodeName(this[e],"table")?pu(this[e],"tbody"):this[e],e===a?f:i.clone(f,!0,!0));f=o=null,c.length&&i.each(c,function(n,t){t.src?i.ajax?i.ajax({url:t.src,type:"GET",dataType:"script",async:!1,global:!1,throws:!0}):i.error("no ajax"):i.globalEval((t.text||t.textContent||t.innerHTML||"").replace(ve,"")),t.parentNode&&t.parentNode.removeChild(t)})}return this}}),i.buildFragment=function(n,u,f){var o,s,h,e=n[0];return u=u||r,u=!u.nodeType&&u[0]||u,u=u.ownerDocument||u,n.length===1&&typeof e=="string"&&e.length<512&&u===r&&e.charAt(0)==="<"&&!le.test(e)&&(i.support.checkClone||!tu.test(e))&&(i.support.html5Clone||!dt.test(e))&&(s=!0,o=i.fragments[e],h=o!==t),o||(o=u.createDocumentFragment(),i.clean(n,u,o,f),s&&(i.fragments[e]=h&&o)),{fragment:o,cacheable:s}},i.fragments={},i.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(n,t){i.fn[n]=function(r){var o,u=0,s=[],f=i(r),h=f.length,e=this.length===1&&this[0].parentNode;if((e==null||e&&e.nodeType===11&&e.childNodes.length===1)&&h===1)return f[t](this[0]),this;for(;u<h;u++)o=(u>0?this.clone(!0):this).get(),i(f[u])[t](o),s=s.concat(o);return this.pushStack(s,n,f.selector)}}),i.extend({clone:function(n,t,r){var f,o,u,e;if(i.support.html5Clone||i.isXMLDoc(n)||!dt.test("<"+n.nodeName+">")?e=n.cloneNode(!0):(gt.innerHTML=n.outerHTML,gt.removeChild(e=gt.firstChild)),(!i.support.noCloneEvent||!i.support.noCloneChecked)&&(n.nodeType===1||n.nodeType===11)&&!i.isXMLDoc(n))for(hi(n,e),f=g(n),o=g(e),u=0;f[u];++u)o[u]&&hi(f[u],o[u]);if(t&&(si(n,e),r))for(f=g(n),o=g(e),u=0;f[u];++u)si(f[u],o[u]);return f=o=null,e},clean:function(n,t,u,f){var h,c,o,p,v,d,s,w,a,g,b,k,y=t===r&&iu,l=[];for(t&&typeof t.createDocumentFragment!="undefined"||(t=r),h=0;(o=n[h])!=null;h++)if(typeof o=="number"&&(o+=""),o){if(typeof o=="string")if(he.test(o)){for(y=y||oi(t),s=t.createElement("div"),y.appendChild(s),o=o.replace(dr,"<$1><\/$2>"),p=(gr.exec(o)||["",""])[1].toLowerCase(),v=e[p]||e._default,d=v[0],s.innerHTML=v[1]+o+v[2];d--;)s=s.lastChild;if(!i.support.tbody)for(w=se.test(o),a=p==="table"&&!w?s.firstChild&&s.firstChild.childNodes:v[1]==="<table>"&&!w?s.childNodes:[],c=a.length-1;c>=0;--c)i.nodeName(a[c],"tbody")&&!a[c].childNodes.length&&a[c].parentNode.removeChild(a[c]);!i.support.leadingWhitespace&&kt.test(o)&&s.insertBefore(t.createTextNode(kt.exec(o)[0]),s.firstChild),o=s.childNodes,s.parentNode.removeChild(s)}else o=t.createTextNode(o);o.nodeType?l.push(o):i.merge(l,o)}if(s&&(o=s=y=null),!i.support.appendChecked)for(h=0;(o=l[h])!=null;h++)i.nodeName(o,"input")?ci(o):typeof o.getElementsByTagName!="undefined"&&i.grep(o.getElementsByTagName("input"),ci);if(u)for(b=function(n){if(!n.type||ae.test(n.type))return f?f.push(n.parentNode?n.parentNode.removeChild(n):n):u.appendChild(n)},h=0;(o=l[h])!=null;h++)i.nodeName(o,"script")&&b(o)||(u.appendChild(o),typeof o.getElementsByTagName!="undefined"&&(k=i.grep(i.merge([],o.getElementsByTagName("script")),b),l.splice.apply(l,[h+1,0].concat(k)),h+=k.length));return l},cleanData:function(n,t){for(var f,u,r,e,h=0,o=i.expando,s=i.cache,c=i.support.deleteExpando,l=i.event.special;(r=n[h])!=null;h++)if((t||i.acceptData(r))&&(u=r[o],f=u&&s[u],f)){if(f.events)for(e in f.events)l[e]?i.event.remove(r,e):i.removeEvent(r,e,f.handle);s[u]&&(delete s[u],c?delete r[o]:r.removeAttribute?r.removeAttribute(o):r[o]=null,i.deletedIds.push(u))}}}),function(){var t,n;i.uaMatch=function(n){n=n.toLowerCase();var t=/(chrome)[ \/]([\w.]+)/.exec(n)||/(webkit)[ \/]([\w.]+)/.exec(n)||/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(n)||/(msie) ([\w.]+)/.exec(n)||n.indexOf("compatible")<0&&/(mozilla)(?:.*? rv:([\w.]+)|)/.exec(n)||[];return{browser:t[1]||"",version:t[2]||"0"}},t=i.uaMatch(rf.userAgent),n={},t.browser&&(n[t.browser]=!0,n.version=t.version),n.chrome?n.webkit=!0:n.webkit&&(n.safari=!0),i.browser=n,i.sub=function(){function n(t,i){return new n.fn.init(t,i)}i.extend(!0,n,this),n.superclass=this,n.fn=n.prototype=this(),n.fn.constructor=n,n.sub=this.sub,n.fn.init=function t(c,r){return r&&r instanceof i&&!(r instanceof n)&&(r=n(r)),i.fn.init.call(this,t,r,u)},n.fn.init.prototype=n.fn;var u=n(r);return n}}();var u,v,y,ni=/alpha\([^)]*\)/i,ye=/opacity=([^)]*)/,pe=/^(top|right|bottom|left)$/,we=/^(none|table(?!-c[ea]).+)/,ru=/^margin/,be=new RegExp("^("+ut+")(.*)$","i"),et=new RegExp("^("+ut+")(?!px)[a-z%]+$","i"),ke=new RegExp("^([-+])=("+ut+")","i"),ti={},de={position:"absolute",visibility:"hidden",display:"block"},uu={letterSpacing:0,fontWeight:400},c=["Top","Right","Bottom","Left"],fu=["Webkit","O","Moz","ms"],ge=i.fn.toggle;i.fn.extend({css:function(n,r){return i.access(this,function(n,r,u){return u!==t?i.style(n,r,u):i.css(n,r)},n,r,arguments.length>1)},show:function(){return ai(this,!0)},hide:function(){return ai(this)},toggle:function(n,t){var r=typeof n=="boolean";return i.isFunction(n)&&i.isFunction(t)?ge.apply(this,arguments):this.each(function(){(r?n:nt(this))?i(this).show():i(this).hide()})}}),i.extend({cssHooks:{opacity:{get:function(n,t){if(t){var i=u(n,"opacity");return i===""?"1":i}}}},cssNumber:{fillOpacity:!0,fontWeight:!0,lineHeight:!0,opacity:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{float:i.support.cssFloat?"cssFloat":"styleFloat"},style:function(n,r,u,f){if(n&&n.nodeType!==3&&n.nodeType!==8&&n.style){var o,s,e,h=i.camelCase(r),c=n.style;if(r=i.cssProps[h]||(i.cssProps[h]=li(c,h)),e=i.cssHooks[r]||i.cssHooks[h],u===t)return e&&"get"in e&&(o=e.get(n,!1,f))!==t?o:c[r];if((s=typeof u,s==="string"&&(o=ke.exec(u))&&(u=(o[1]+1)*o[2]+parseFloat(i.css(n,r)),s="number"),u!=null&&(s!=="number"||!isNaN(u)))&&(s!=="number"||i.cssNumber[h]||(u+="px"),!e||!("set"in e)||(u=e.set(n,u,f))!==t))try{c[r]=u}catch(l){}}},css:function(n,r,f,e){var o,c,s,h=i.camelCase(r);return r=i.cssProps[h]||(i.cssProps[h]=li(n.style,h)),s=i.cssHooks[r]||i.cssHooks[h],s&&"get"in s&&(o=s.get(n,!0,e)),o===t&&(o=u(n,r)),o==="normal"&&r in uu&&(o=uu[r]),f||e!==t?(c=parseFloat(o),f||i.isNumeric(c)?c||0:o):o},swap:function(n,t,i){var u,r,f={};for(r in t)f[r]=n.style[r],n.style[r]=t[r];u=i.call(n);for(r in t)n.style[r]=f[r];return u}}),n.getComputedStyle?u=function(t,r){var f,o,s,h,e=n.getComputedStyle(t,null),u=t.style;return e&&(f=e[r],f===""&&!i.contains(t.ownerDocument,t)&&(f=i.style(t,r)),et.test(f)&&ru.test(r)&&(o=u.width,s=u.minWidth,h=u.maxWidth,u.minWidth=u.maxWidth=u.width=f,f=e.width,u.width=o,u.minWidth=s,u.maxWidth=h)),f}:r.documentElement.currentStyle&&(u=function(n,t){var f,u,i=n.currentStyle&&n.currentStyle[t],r=n.style;return i==null&&r&&r[t]&&(i=r[t]),et.test(i)&&!pe.test(t)&&(f=r.left,u=n.runtimeStyle&&n.runtimeStyle.left,u&&(n.runtimeStyle.left=n.currentStyle.left),r.left=t==="fontSize"?"1em":i,i=r.pixelLeft+"px",r.left=f,u&&(n.runtimeStyle.left=u)),i===""?"auto":i}),i.each(["height","width"],function(n,t){i.cssHooks[t]={get:function(n,r,f){if(r)return n.offsetWidth===0&&we.test(u(n,"display"))?i.swap(n,de,function(){return pi(n,t,f)}):pi(n,t,f)},set:function(n,r,u){return vi(n,r,u?yi(n,t,u,i.support.boxSizing&&i.css(n,"boxSizing")==="border-box"):0)}}}),i.support.opacity||(i.cssHooks.opacity={get:function(n,t){return ye.test((t&&n.currentStyle?n.currentStyle.filter:n.style.filter)||"")?.01*parseFloat(RegExp.$1)+"":t?"1":""},set:function(n,t){var r=n.style,u=n.currentStyle,e=i.isNumeric(t)?"alpha(opacity="+t*100+")":"",f=u&&u.filter||r.filter||"";(r.zoom=1,t>=1&&i.trim(f.replace(ni,""))===""&&r.removeAttribute&&(r.removeAttribute("filter"),u&&!u.filter))||(r.filter=ni.test(f)?f.replace(ni,e):f+" "+e)}}),i(function(){i.support.reliableMarginRight||(i.cssHooks.marginRight={get:function(n,t){return i.swap(n,{display:"inline-block"},function(){if(t)return u(n,"marginRight")})}}),!i.support.pixelPosition&&i.fn.position&&i.each(["top","left"],function(n,t){i.cssHooks[t]={get:function(n,r){if(r){var f=u(n,t);return et.test(f)?i(n).position()[t]+"px":f}}}})}),i.expr&&i.expr.filters&&(i.expr.filters.hidden=function(n){return n.offsetWidth===0&&n.offsetHeight===0||!i.support.reliableHiddenOffsets&&(n.style&&n.style.display||u(n,"display"))==="none"},i.expr.filters.visible=function(n){return!i.expr.filters.hidden(n)}),i.each({margin:"",padding:"",border:"Width"},function(n,t){i.cssHooks[n+t]={expand:function(i){for(var u=typeof i=="string"?i.split(" "):[i],f={},r=0;r<4;r++)f[n+c[r]+t]=u[r]||u[r-2]||u[0];return f}},ru.test(n)||(i.cssHooks[n+t].set=vi)});var no=/%20/g,to=/\[\]$/,eu=/\r?\n/g,io=/^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,ro=/^(?:select|textarea)/i;i.fn.extend({serialize:function(){return i.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?i.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||ro.test(this.nodeName)||io.test(this.type))}).map(function(n,t){var r=i(this).val();return r==null?null:i.isArray(r)?i.map(r,function(n){return{name:t.name,value:n.replace(eu,"\r\n")}}):{name:t.name,value:r.replace(eu,"\r\n")}}).get()}}),i.param=function(n,r){var u,f=[],e=function(n,t){t=i.isFunction(t)?t():t==null?"":t,f[f.length]=encodeURIComponent(n)+"="+encodeURIComponent(t)};if(r===t&&(r=i.ajaxSettings&&i.ajaxSettings.traditional),i.isArray(n)||n.jquery&&!i.isPlainObject(n))i.each(n,function(){e(this.name,this.value)});else for(u in n)vt(u,n[u],r,e);return f.join("&").replace(no,"+")};var p,l,uo=/#.*$/,fo=/^(.*?):[ \t]*([^\r\n]*)\r?$/mg,eo=/^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,oo=/^(?:GET|HEAD)$/,so=/^\/\//,ou=/\?/,ho=/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,co=/([?&])_=[^&]*/,su=/^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,hu=i.fn.load,ii={},cu={},lu=["*/"]+["*"];try{l=tf.href}catch(wo){l=r.createElement("a"),l.href="",l=l.href}p=su.exec(l.toLowerCase())||[],i.fn.load=function(n,r,u){if(typeof n!="string"&&hu)return hu.apply(this,arguments);if(!this.length)return this;var f,o,s,h=this,e=n.indexOf(" ");return e>=0&&(f=n.slice(e,n.length),n=n.slice(0,e)),i.isFunction(r)?(u=r,r=t):r&&typeof r=="object"&&(o="POST"),i.ajax({url:n,type:o,dataType:"html",data:r,complete:function(n,t){u&&h.each(u,s||[n.responseText,t,n])}}).done(function(n){s=arguments,h.html(f?i("<div>").append(n.replace(ho,"")).find(f):n)}),this},i.each("ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split(" "),function(n,t){i.fn[t]=function(n){return this.on(t,n)}}),i.each(["get","post"],function(n,r){i[r]=function(n,u,f,e){return i.isFunction(u)&&(e=e||f,f=u,u=t),i.ajax({type:r,url:n,data:u,success:f,dataType:e})}}),i.extend({getScript:function(n,r){return i.get(n,t,r,"script")},getJSON:function(n,t,r){return i.get(n,t,r,"json")},ajaxSetup:function(n,t){return t?ki(n,i.ajaxSettings):(t=n,n=i.ajaxSettings),ki(n,t),n},ajaxSettings:{url:l,isLocal:eo.test(p[1]),global:!0,type:"GET",contentType:"application/x-www-form-urlencoded; charset=UTF-8",processData:!0,async:!0,accepts:{xml:"application/xml, text/xml",html:"text/html",text:"text/plain",json:"application/json, text/javascript","*":lu},contents:{xml:/xml/,html:/html/,json:/json/},responseFields:{xml:"responseXML",text:"responseText"},converters:{"* text":n.String,"text html":!0,"text json":i.parseJSON,"text xml":i.parseXML},flatOptions:{context:!0,url:!0}},ajaxPrefilter:bi(ii),ajaxTransport:bi(cu),ajax:function(n,r){function y(n,r,h,l){var a,tt,w,it,p,y=r;e!==2&&(e=2,d&&clearTimeout(d),c=t,k=l||"",f.readyState=n>0?4:0,h&&(it=wu(u,f,h)),n>=200&&n<300||n===304?(u.ifModified&&(p=f.getResponseHeader("Last-Modified"),p&&(i.lastModified[o]=p),p=f.getResponseHeader("Etag"),p&&(i.etag[o]=p)),n===304?(y="notmodified",a=!0):(a=bu(u,it),y=a.state,tt=a.data,w=a.error,a=!w)):(w=y,(!y||n)&&(y="error",n<0&&(n=0))),f.status=n,f.statusText=(r||y)+"",a?nt.resolveWith(s,[tt,y,f]):nt.rejectWith(s,[f,y,w]),f.statusCode(b),b=t,v&&g.trigger("ajax"+(a?"Success":"Error"),[f,u,a?tt:w]),ut.fireWith(s,[f,y]),v&&(g.trigger("ajaxComplete",[f,u]),--i.active||i.event.trigger("ajaxStop")))}var it,rt;typeof n=="object"&&(r=n,n=t),r=r||{};var o,k,w,c,d,a,v,l,u=i.ajaxSetup({},r),s=u.context||u,g=s!==u&&(s.nodeType||s instanceof i)?i(s):i.event,nt=i.Deferred(),ut=i.Callbacks("once memory"),b=u.statusCode||{},ft={},et={},e=0,ot="canceled",f={readyState:0,setRequestHeader:function(n,t){if(!e){var i=n.toLowerCase();n=et[i]=et[i]||n,ft[n]=t}return this},getAllResponseHeaders:function(){return e===2?k:null},getResponseHeader:function(n){var i;if(e===2){if(!w)for(w={};i=fo.exec(k);)w[i[1].toLowerCase()]=i[2];i=w[n.toLowerCase()]}return i===t?null:i},overrideMimeType:function(n){return e||(u.mimeType=n),this},abort:function(n){return n=n||ot,c&&c.abort(n),y(0,n),this}};if(nt.promise(f),f.success=f.done,f.error=f.fail,f.complete=ut.add,f.statusCode=function(n){if(n){var t;if(e<2)for(t in n)b[t]=[b[t],n[t]];else t=n[f.status],f.always(t)}return this},u.url=((n||u.url)+"").replace(uo,"").replace(so,p[1]+"//"),u.dataTypes=i.trim(u.dataType||"*").toLowerCase().split(h),u.crossDomain==null&&(a=su.exec(u.url.toLowerCase())||!1,u.crossDomain=a&&a.join(":")+(a[3]?"":a[1]==="http:"?80:443)!==p.join(":")+(p[3]?"":p[1]==="http:"?80:443)),u.data&&u.processData&&typeof u.data!="string"&&(u.data=i.param(u.data,u.traditional)),tt(ii,u,r,f),e===2)return f;v=u.global,u.type=u.type.toUpperCase(),u.hasContent=!oo.test(u.type),v&&i.active++==0&&i.event.trigger("ajaxStart"),u.hasContent||(u.data&&(u.url+=(ou.test(u.url)?"&":"?")+u.data,delete u.data),o=u.url,u.cache===!1&&(it=i.now(),rt=u.url.replace(co,"$1_="+it),u.url=rt+(rt===u.url?(ou.test(u.url)?"&":"?")+"_="+it:""))),(u.data&&u.hasContent&&u.contentType!==!1||r.contentType)&&f.setRequestHeader("Content-Type",u.contentType),u.ifModified&&(o=o||u.url,i.lastModified[o]&&f.setRequestHeader("If-Modified-Since",i.lastModified[o]),i.etag[o]&&f.setRequestHeader("If-None-Match",i.etag[o])),f.setRequestHeader("Accept",u.dataTypes[0]&&u.accepts[u.dataTypes[0]]?u.accepts[u.dataTypes[0]]+(u.dataTypes[0]!=="*"?", "+lu+"; q=0.01":""):u.accepts["*"]);for(l in u.headers)f.setRequestHeader(l,u.headers[l]);if(!u.beforeSend||u.beforeSend.call(s,f,u)!==!1&&e!==2){ot="abort";for(l in{success:1,error:1,complete:1})f[l](u[l]);if(c=tt(cu,u,r,f),c){f.readyState=1,v&&g.trigger("ajaxSend",[f,u]),u.async&&u.timeout>0&&(d=setTimeout(function(){f.abort("timeout")},u.timeout));try{e=1,c.send(ft,y)}catch(st){if(e<2)y(-1,st);else throw st;}}else y(-1,"No Transport");return f}return f.abort()},active:0,lastModified:{},etag:{}});var au=[],lo=/\?/,ot=/(=)\?(?=&|$)|\?\?/,ao=i.now();i.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var n=au.pop()||i.expando+"_"+ao++;return this[n]=!0,n}}),i.ajaxPrefilter("json jsonp",function(r,u,f){var e,s,o,h=r.data,c=r.url,l=r.jsonp!==!1,a=l&&ot.test(c),v=l&&!a&&typeof h=="string"&&!(r.contentType||"").indexOf("application/x-www-form-urlencoded")&&ot.test(h);if(r.dataTypes[0]==="jsonp"||a||v)return e=r.jsonpCallback=i.isFunction(r.jsonpCallback)?r.jsonpCallback():r.jsonpCallback,s=n[e],a?r.url=c.replace(ot,"$1"+e):v?r.data=h.replace(ot,"$1"+e):l&&(r.url+=(lo.test(c)?"&":"?")+r.jsonp+"="+e),r.converters["script json"]=function(){return o||i.error(e+" was not called"),o[0]},r.dataTypes[0]="json",n[e]=function(){o=arguments},f.always(function(){n[e]=s,r[e]&&(r.jsonpCallback=u.jsonpCallback,au.push(e)),o&&i.isFunction(s)&&s(o[0]),o=s=t}),"script"}),i.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/javascript|ecmascript/},converters:{"text script":function(n){return i.globalEval(n),n}}}),i.ajaxPrefilter("script",function(n){n.cache===t&&(n.cache=!1),n.crossDomain&&(n.type="GET",n.global=!1)}),i.ajaxTransport("script",function(n){if(n.crossDomain){var i,u=r.head||r.getElementsByTagName("head")[0]||r.documentElement;return{send:function(f,e){i=r.createElement("script"),i.async="async",n.scriptCharset&&(i.charset=n.scriptCharset),i.src=n.url,i.onload=i.onreadystatechange=function(n,r){(r||!i.readyState||/loaded|complete/.test(i.readyState))&&(i.onload=i.onreadystatechange=null,u&&i.parentNode&&u.removeChild(i),i=t,r||e(200,"success"))},u.insertBefore(i,u.firstChild)},abort:function(){i&&i.onload(0,1)}}}}),st=n.ActiveXObject?function(){for(var n in w)w[n](0,1)}:!1,vu=0,i.ajaxSettings.xhr=n.ActiveXObject?function(){return!this.isLocal&&di()||ku()}:di,function(n){i.extend(i.support,{ajax:!!n,cors:!!n&&"withCredentials"in n})}(i.ajaxSettings.xhr()),i.support.ajax&&i.ajaxTransport(function(r){if(!r.crossDomain||i.support.cors){var u;return{send:function(f,e){var h,s,o=r.xhr();if(r.username?o.open(r.type,r.url,r.async,r.username,r.password):o.open(r.type,r.url,r.async),r.xhrFields)for(s in r.xhrFields)o[s]=r.xhrFields[s];r.mimeType&&o.overrideMimeType&&o.overrideMimeType(r.mimeType),r.crossDomain||f["X-Requested-With"]||(f["X-Requested-With"]="XMLHttpRequest");try{for(s in f)o.setRequestHeader(s,f[s])}catch(c){}o.send(r.hasContent&&r.data||null),u=function(n,f){var s,a,v,c,l;try{if(u&&(f||o.readyState===4))if(u=t,h&&(o.onreadystatechange=i.noop,st&&delete w[h]),f)o.readyState!==4&&o.abort();else{s=o.status,v=o.getAllResponseHeaders(),c={},l=o.responseXML,l&&l.documentElement&&(c.xml=l);try{c.text=o.responseText}catch(n){}try{a=o.statusText}catch(y){a=""}!s&&r.isLocal&&!r.crossDomain?s=c.text?200:404:s===1223&&(s=204)}}catch(p){f||e(-1,p)}c&&e(s,a,c,v)},r.async?o.readyState===4?setTimeout(u,0):(h=++vu,st&&(w||(w={},i(n).unload(st)),w[h]=u),o.onreadystatechange=u):u()},abort:function(){u&&u(0,1)}}}});var ht,ct,vo=/^(?:toggle|show|hide)$/,yo=new RegExp("^(?:([-+])=|)("+ut+")([a-z%]*)$","i"),po=/queueHooks$/,lt=[nf],k={"*":[function(n,t){var o,s,r=this.createTween(n,t),e=yo.exec(t),h=r.cur(),u=+h||0,f=1,c=20;if(e){if(o=+e[2],s=e[3]||(i.cssNumber[n]?"":"px"),s!=="px"&&u){u=i.css(r.elem,n,!0)||o||1;do f=f||".5",u=u/f,i.style(r.elem,n,u+s);while(f!==(f=r.cur()/h)&&f!==1&&--c)}r.unit=s,r.start=u,r.end=e[1]?u+(e[1]+1)*o:o}return r}]};i.Animation=i.extend(nr,{tweener:function(n,t){i.isFunction(n)?(t=n,n=["*"]):n=n.split(" ");for(var r,u=0,f=n.length;u<f;u++)r=n[u],k[r]=k[r]||[],k[r].unshift(t)},prefilter:function(n,t){t?lt.unshift(n):lt.push(n)}}),i.Tween=f,f.prototype={constructor:f,init:function(n,t,r,u,f,e){this.elem=n,this.prop=r,this.easing=f||"swing",this.options=t,this.start=this.now=this.cur(),this.end=u,this.unit=e||(i.cssNumber[r]?"":"px")},cur:function(){var n=f.propHooks[this.prop];return n&&n.get?n.get(this):f.propHooks._default.get(this)},run:function(n){var t,r=f.propHooks[this.prop];return this.pos=this.options.duration?t=i.easing[this.easing](n,this.options.duration*n,0,1,this.options.duration):t=n,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),r&&r.set?r.set(this):f.propHooks._default.set(this),this}},f.prototype.init.prototype=f.prototype,f.propHooks={_default:{get:function(n){var t;return n.elem[n.prop]==null||!!n.elem.style&&n.elem.style[n.prop]!=null?(t=i.css(n.elem,n.prop,!1,""),!t||t==="auto"?0:t):n.elem[n.prop]},set:function(n){i.fx.step[n.prop]?i.fx.step[n.prop](n):n.elem.style&&(n.elem.style[i.cssProps[n.prop]]!=null||i.cssHooks[n.prop])?i.style(n.elem,n.prop,n.now+n.unit):n.elem[n.prop]=n.now}}},f.propHooks.scrollTop=f.propHooks.scrollLeft={set:function(n){n.elem.nodeType&&n.elem.parentNode&&(n.elem[n.prop]=n.now)}},i.each(["toggle","show","hide"],function(n,t){var r=i.fn[t];i.fn[t]=function(u,f,e){return u==null||typeof u=="boolean"||!n&&i.isFunction(u)&&i.isFunction(f)?r.apply(this,arguments):this.animate(it(t,!0),u,f,e)}}),i.fn.extend({fadeTo:function(n,t,i,r){return this.filter(nt).css("opacity",0).show().end().animate({opacity:t},n,i,r)},animate:function(n,t,r,u){var e=i.isEmptyObject(n),f=i.speed(t,r,u),o=function(){var t=nr(this,i.extend({},n),f);e&&t.stop(!0)};return e||f.queue===!1?this.each(o):this.queue(f.queue,o)},stop:function(n,r,u){var f=function(n){var t=n.stop;delete n.stop,t(u)};return typeof n!="string"&&(u=r,r=n,n=t),r&&n!==!1&&this.queue(n||"fx",[]),this.each(function(){var o=!0,t=n!=null&&n+"queueHooks",e=i.timers,r=i._data(this);if(t)r[t]&&r[t].stop&&f(r[t]);else for(t in r)r[t]&&r[t].stop&&po.test(t)&&f(r[t]);for(t=e.length;t--;)e[t].elem===this&&(n==null||e[t].queue===n)&&(e[t].anim.stop(u),o=!1,e.splice(t,1));(o||!u)&&i.dequeue(this,n)})}}),i.each({slideDown:it("show"),slideUp:it("hide"),slideToggle:it("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(n,t){i.fn[n]=function(n,i,r){return this.animate(t,n,i,r)}}),i.speed=function(n,t,r){var u=n&&typeof n=="object"?i.extend({},n):{complete:r||!r&&t||i.isFunction(n)&&n,duration:n,easing:r&&t||t&&!i.isFunction(t)&&t};return u.duration=i.fx.off?0:typeof u.duration=="number"?u.duration:u.duration in i.fx.speeds?i.fx.speeds[u.duration]:i.fx.speeds._default,(u.queue==null||u.queue===!0)&&(u.queue="fx"),u.old=u.complete,u.complete=function(){i.isFunction(u.old)&&u.old.call(this),u.queue&&i.dequeue(this,u.queue)},u},i.easing={linear:function(n){return n},swing:function(n){return.5-Math.cos(n*Math.PI)/2}},i.timers=[],i.fx=f.prototype.init,i.fx.tick=function(){for(var r,n=i.timers,t=0;t<n.length;t++)r=n[t],r()||n[t]!==r||n.splice(t--,1);n.length||i.fx.stop()},i.fx.timer=function(n){n()&&i.timers.push(n)&&!ct&&(ct=setInterval(i.fx.tick,i.fx.interval))},i.fx.interval=13,i.fx.stop=function(){clearInterval(ct),ct=null},i.fx.speeds={slow:600,fast:200,_default:400},i.fx.step={},i.expr&&i.expr.filters&&(i.expr.filters.animated=function(n){return i.grep(i.timers,function(t){return n===t.elem}).length}),ri=/^(?:body|html)$/i,i.fn.offset=function(n){if(arguments.length)return n===t?this:this.each(function(t){i.offset.setOffset(this,n,t)});var u,o,s,h,c,l,a,f={top:0,left:0},r=this[0],e=r&&r.ownerDocument;if(e)return(o=e.body)===r?i.offset.bodyOffset(r):(u=e.documentElement,i.contains(u,r)?(typeof r.getBoundingClientRect!="undefined"&&(f=r.getBoundingClientRect()),s=tr(e),h=u.clientTop||o.clientTop||0,c=u.clientLeft||o.clientLeft||0,l=s.pageYOffset||u.scrollTop,a=s.pageXOffset||u.scrollLeft,{top:f.top+l-h,left:f.left+a-c}):f)},i.offset={bodyOffset:function(n){var t=n.offsetTop,r=n.offsetLeft;return i.support.doesNotIncludeMarginInBodyOffset&&(t+=parseFloat(i.css(n,"marginTop"))||0,r+=parseFloat(i.css(n,"marginLeft"))||0),{top:t,left:r}},setOffset:function(n,t,r){var f=i.css(n,"position");f==="static"&&(n.style.position="relative");var e=i(n),o=e.offset(),l=i.css(n,"top"),a=i.css(n,"left"),v=(f==="absolute"||f==="fixed")&&i.inArray("auto",[l,a])>-1,u={},s={},h,c;v?(s=e.position(),h=s.top,c=s.left):(h=parseFloat(l)||0,c=parseFloat(a)||0),i.isFunction(t)&&(t=t.call(n,r,o)),t.top!=null&&(u.top=t.top-o.top+h),t.left!=null&&(u.left=t.left-o.left+c),"using"in t?t.using.call(n,u):e.css(u)}},i.fn.extend({position:function(){if(this[0]){var u=this[0],n=this.offsetParent(),t=this.offset(),r=ri.test(n[0].nodeName)?{top:0,left:0}:n.offset();return t.top-=parseFloat(i.css(u,"marginTop"))||0,t.left-=parseFloat(i.css(u,"marginLeft"))||0,r.top+=parseFloat(i.css(n[0],"borderTopWidth"))||0,r.left+=parseFloat(i.css(n[0],"borderLeftWidth"))||0,{top:t.top-r.top,left:t.left-r.left}}},offsetParent:function(){return this.map(function(){for(var n=this.offsetParent||r.body;n&&!ri.test(n.nodeName)&&i.css(n,"position")==="static";)n=n.offsetParent;return n||r.body})}}),i.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(n,r){var u=/Y/.test(r);i.fn[n]=function(f){return i.access(this,function(n,f,e){var o=tr(n);if(e===t)return o?r in o?o[r]:o.document.documentElement[f]:n[f];o?o.scrollTo(u?i(o).scrollLeft():e,u?e:i(o).scrollTop()):n[f]=e},n,f,arguments.length,null)}}),i.each({Height:"height",Width:"width"},function(n,r){i.each({padding:"inner"+n,content:r,"":"outer"+n},function(u,f){i.fn[f]=function(f,e){var o=arguments.length&&(u||typeof f!="boolean"),s=u||(f===!0||e===!0?"margin":"border");return i.access(this,function(r,u,f){var e;return i.isWindow(r)?r.document.documentElement["client"+n]:r.nodeType===9?(e=r.documentElement,Math.max(r.body["scroll"+n],e["scroll"+n],r.body["offset"+n],e["offset"+n],e["client"+n])):f===t?i.css(r,u,f,s):i.style(r,u,f,s)},r,o?f:t,o,null)}})}),n.jQuery=n.$=i,typeof define=="function"&&define.amd&&define.amd.jQuery&&define("jquery",[],function(){return i})})(window)
+    </head>
+    <body>
+        <header>
+            <div class="content-wrapper">
+                <div class="float-left">
+                    <p class="site-title"><a href="index.php">MyCryptoChat</a></p>
+                </div>
+                <div class="float-right">
+                    <section id="login">
+                    </section>
+                    <nav>
+                        <ul id="menu">
+                            <li><a href="index.php">Home</a></li>
+                            <li><a href="stats.php">Stats</a></li>
+                            <li><a href="about.php">About</a></li>
+                        </ul>
+                    </nav>
+                </div>
+            </div>
+        </header>
+        <div id="body">
+            
+            <section class="content-wrapper main-content clear-fix">
+ <h2>About</h2>
+
+<p>
+    MyCryptoChat is a simple PHP encrypted chat rooms manager. Everything is encrypted on the client side, so noone can spy on what you say.<br />
+    <br />
+    
+    <a href="https://mycryptochatphp.codeplex.com/">More informations here</a>
+    <br /><br />
+    Author: Tommy of <a href="http://blog.howtommy.net">HowTommy.net</a>
+    <br />
+    <a href="http://blog.howtommy.net/?d=2010/01/01/01/01/01-me-contacter">Contact</a>
+</p>
+            </section>
+        </div>
+        <footer>
+            <div class="content-wrapper">
+                <div class="float-left">
+                    <p>&copy; 2013 - MyCryptoChat <?php require 'inc/constants.php'; echo MYCRYPTOCHAT_VERSION; ?> by HowTommy.net</p>
+                </div>
+            </div>
+        </footer>
+
+        <script src="scripts/jquery.js"></script>
+
+    (function(global){var b64chars="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var b64charcodes=function(){var a=[];var codeA="A".charCodeAt(0);var codea="a".charCodeAt(0);var code0="0".charCodeAt(0);for(var i=0;i<26;i++){a.push(codeA+i);}for(var i=0;i<26;i++){a.push(codea+i);}for(var i=0;i<10;i++){a.push(code0+i);}a.push("+".charCodeAt(0));a.push("/".charCodeAt(0));return a;}();var b64tab=function(bin){var t={};for(var i=0,l=bin.length;i<l;i++){t[bin.charAt(i)]=i;}return t;}(b64chars);var stringToArray=function(s){var a=[];for(var i=0,l=s.length;i<l;i++){a[i]=s.charCodeAt(i);}return a;};var convertUTF8ArrayToBase64=function(bin){var padlen=0;while(bin.length%3){bin.push(0);padlen++;}var b64=[];for(var i=0,l=bin.length;i<l;i+=3){var c0=bin[i],c1=bin[i+1],c2=bin[i+2];if(c0>=256||c1>=256||c2>=256){throw"unsupported character found";}var n=(c0<<16)|(c1<<8)|c2;b64.push(b64charcodes[n>>>18],b64charcodes[(n>>>12)&63],b64charcodes[(n>>>6)&63],b64charcodes[n&63]);}while(padlen--){b64[b64.length-padlen-1]="=".charCodeAt(0);}return chunkStringFromCharCodeApply(b64);};var convertBase64ToUTF8Array=function(b64){b64=b64.replace(/[^A-Za-z0-9+\/]+/g,"");var bin=[];var padlen=b64.length%4;for(var i=0,l=b64.length;i<l;i+=4){var n=((b64tab[b64.charAt(i)]||0)<<18)|((b64tab[b64.charAt(i+1)]||0)<<12)|((b64tab[b64.charAt(i+2)]||0)<<6)|((b64tab[b64.charAt(i+3)]||0));bin.push((n>>16),((n>>8)&255),(n&255));}bin.length-=[0,0,2,1][padlen];return bin;};var convertUTF16ArrayToUTF8Array=function(uni){var bin=[];for(var i=0,l=uni.length;i<l;i++){var n=uni[i];if(n<128){bin.push(n);}else{if(n<2048){bin.push(192|(n>>>6),128|(n&63));}else{bin.push(224|((n>>>12)&15),128|((n>>>6)&63),128|(n&63));}}}return bin;};var convertUTF8ArrayToUTF16Array=function(bin){var uni=[];for(var i=0,l=bin.length;i<l;i++){var c0=bin[i];if(c0<128){uni.push(c0);}else{var c1=bin[++i];if(c0<224){uni.push(((c0&31)<<6)|(c1&63));}else{var c2=bin[++i];uni.push(((c0&15)<<12)|((c1&63)<<6)|(c2&63));}}}return uni;};var convertUTF8StringToBase64=function(bin){return convertUTF8ArrayToBase64(stringToArray(bin));};var convertBase64ToUTF8String=function(b64){return chunkStringFromCharCodeApply(convertBase64ToUTF8Array(b64));};var convertUTF8StringToUTF16Array=function(bin){return convertUTF8ArrayToUTF16Array(stringToArray(bin));};var convertUTF8ArrayToUTF16String=function(bin){return chunkStringFromCharCodeApply(convertUTF8ArrayToUTF16Array(bin));};var convertUTF8StringToUTF16String=function(bin){return chunkStringFromCharCodeApply(convertUTF8ArrayToUTF16Array(stringToArray(bin)));};var convertUTF16StringToUTF8Array=function(uni){return convertUTF16ArrayToUTF8Array(stringToArray(uni));};var convertUTF16ArrayToUTF8String=function(uni){return chunkStringFromCharCodeApply(convertUTF16ArrayToUTF8Array(uni));};var convertUTF16StringToUTF8String=function(uni){return chunkStringFromCharCodeApply(convertUTF16ArrayToUTF8Array(stringToArray(uni)));};var chunkStringFromCharCodeApply=function(arr){var strs=[],i;for(i=0;i<arr.length;i+=65536){strs.push(String.fromCharCode.apply(String,arr.slice(i,i+65536)));}return strs.join("");};if(global.btoa){var btoa=global.btoa;var convertUTF16StringToBase64=function(uni){return btoa(convertUTF16StringToUTF8String(uni));};}else{var btoa=convertUTF8StringToBase64;var convertUTF16StringToBase64=function(uni){return convertUTF8ArrayToBase64(convertUTF16StringToUTF8Array(uni));};}if(global.atob){var atob=global.atob;var convertBase64ToUTF16String=function(b64){return convertUTF8StringToUTF16String(atob(b64));};}else{var atob=convertBase64ToUTF8String;var convertBase64ToUTF16String=function(b64){return convertUTF8ArrayToUTF16String(convertBase64ToUTF8Array(b64));};}global.Base64={convertUTF8ArrayToBase64:convertUTF8ArrayToBase64,convertByteArrayToBase64:convertUTF8ArrayToBase64,convertBase64ToUTF8Array:convertBase64ToUTF8Array,convertBase64ToByteArray:convertBase64ToUTF8Array,convertUTF16ArrayToUTF8Array:convertUTF16ArrayToUTF8Array,convertUTF16ArrayToByteArray:convertUTF16ArrayToUTF8Array,convertUTF8ArrayToUTF16Array:convertUTF8ArrayToUTF16Array,convertByteArrayToUTF16Array:convertUTF8ArrayToUTF16Array,convertUTF8StringToBase64:convertUTF8StringToBase64,convertBase64ToUTF8String:convertBase64ToUTF8String,convertUTF8StringToUTF16Array:convertUTF8StringToUTF16Array,convertUTF8ArrayToUTF16String:convertUTF8ArrayToUTF16String,convertByteArrayToUTF16String:convertUTF8ArrayToUTF16String,convertUTF8StringToUTF16String:convertUTF8StringToUTF16String,convertUTF16StringToUTF8Array:convertUTF16StringToUTF8Array,convertUTF16StringToByteArray:convertUTF16StringToUTF8Array,convertUTF16ArrayToUTF8String:convertUTF16ArrayToUTF8String,convertUTF16StringToUTF8String:convertUTF16StringToUTF8String,convertUTF16StringToBase64:convertUTF16StringToBase64,convertBase64ToUTF16String:convertBase64ToUTF16String,fromBase64:convertBase64ToUTF8String,toBase64:convertUTF8StringToBase64,atob:atob,btoa:btoa,utob:convertUTF16StringToUTF8String,btou:convertUTF8StringToUTF16String,encode:convertUTF16StringToBase64,encodeURI:function(u){return convertUTF16StringToBase64(u).replace(/[+\/]/g,function(m0){return m0=="+"?"-":"_";}).replace(/=+$/,"");},decode:function(a){return convertBase64ToUTF16String(a.replace(/[-_]/g,function(m0){return m0=="-"?"+":"/";}));}};})(this);(function(){var zip_WSIZE=32768;var zip_STORED_BLOCK=0;var zip_STATIC_TREES=1;var zip_DYN_TREES=2;var zip_DEFAULT_LEVEL=6;var zip_FULL_SEARCH=true;var zip_INBUFSIZ=32768;var zip_INBUF_EXTRA=64;var zip_OUTBUFSIZ=1024*8;var zip_window_size=2*zip_WSIZE;var zip_MIN_MATCH=3;var zip_MAX_MATCH=258;var zip_BITS=16;var zip_LIT_BUFSIZE=8192;var zip_HASH_BITS=13;if(zip_LIT_BUFSIZE>zip_INBUFSIZ){alert("error: zip_INBUFSIZ is too small");}if((zip_WSIZE<<1)>(1<<zip_BITS)){alert("error: zip_WSIZE is too large");}if(zip_HASH_BITS>zip_BITS-1){alert("error: zip_HASH_BITS is too large");}if(zip_HASH_BITS<8||zip_MAX_MATCH!=258){alert("error: Code too clever");}var zip_DIST_BUFSIZE=zip_LIT_BUFSIZE;var zip_HASH_SIZE=1<<zip_HASH_BITS;var zip_HASH_MASK=zip_HASH_SIZE-1;var zip_WMASK=zip_WSIZE-1;var zip_NIL=0;var zip_TOO_FAR=4096;var zip_MIN_LOOKAHEAD=zip_MAX_MATCH+zip_MIN_MATCH+1;var zip_MAX_DIST=zip_WSIZE-zip_MIN_LOOKAHEAD;var zip_SMALLEST=1;var zip_MAX_BITS=15;var zip_MAX_BL_BITS=7;var zip_LENGTH_CODES=29;var zip_LITERALS=256;var zip_END_BLOCK=256;var zip_L_CODES=zip_LITERALS+1+zip_LENGTH_CODES;var zip_D_CODES=30;var zip_BL_CODES=19;var zip_REP_3_6=16;var zip_REPZ_3_10=17;var zip_REPZ_11_138=18;var zip_HEAP_SIZE=2*zip_L_CODES+1;var zip_H_SHIFT=parseInt((zip_HASH_BITS+zip_MIN_MATCH-1)/zip_MIN_MATCH);var zip_free_queue;var zip_qhead,zip_qtail;var zip_initflag;var zip_outbuf=null;var zip_outcnt,zip_outoff;var zip_complete;var zip_window;var zip_d_buf;var zip_l_buf;var zip_prev;var zip_bi_buf;var zip_bi_valid;var zip_block_start;var zip_ins_h;var zip_hash_head;var zip_prev_match;var zip_match_available;var zip_match_length;var zip_prev_length;var zip_strstart;var zip_match_start;var zip_eofile;var zip_lookahead;var zip_max_chain_length;var zip_max_lazy_match;var zip_compr_level;var zip_good_match;var zip_nice_match;var zip_dyn_ltree;var zip_dyn_dtree;var zip_static_ltree;var zip_static_dtree;var zip_bl_tree;var zip_l_desc;var zip_d_desc;var zip_bl_desc;var zip_bl_count;var zip_heap;var zip_heap_len;var zip_heap_max;var zip_depth;var zip_length_code;var zip_dist_code;var zip_base_length;var zip_base_dist;var zip_flag_buf;var zip_last_lit;var zip_last_dist;var zip_last_flags;var zip_flags;var zip_flag_bit;var zip_opt_len;var zip_static_len;var zip_deflate_data;var zip_deflate_pos;var zip_DeflateCT=function(){this.fc=0;this.dl=0;};var zip_DeflateTreeDesc=function(){this.dyn_tree=null;this.static_tree=null;this.extra_bits=null;this.extra_base=0;this.elems=0;this.max_length=0;this.max_code=0;};var zip_DeflateConfiguration=function(a,b,c,d){this.good_length=a;this.max_lazy=b;this.nice_length=c;this.max_chain=d;};var zip_DeflateBuffer=function(){this.next=null;this.len=0;this.ptr=new Array(zip_OUTBUFSIZ);this.off=0;};var zip_extra_lbits=new Array(0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0);var zip_extra_dbits=new Array(0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13);var zip_extra_blbits=new Array(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7);var zip_bl_order=new Array(16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15);var zip_configuration_table=new Array(new zip_DeflateConfiguration(0,0,0,0),new zip_DeflateConfiguration(4,4,8,4),new zip_DeflateConfiguration(4,5,16,8),new zip_DeflateConfiguration(4,6,32,32),new zip_DeflateConfiguration(4,4,16,16),new zip_DeflateConfiguration(8,16,32,32),new zip_DeflateConfiguration(8,16,128,128),new zip_DeflateConfiguration(8,32,128,256),new zip_DeflateConfiguration(32,128,258,1024),new zip_DeflateConfiguration(32,258,258,4096));var zip_deflate_start=function(level){var i;if(!level){level=zip_DEFAULT_LEVEL;}else{if(level<1){level=1;}else{if(level>9){level=9;}}}zip_compr_level=level;zip_initflag=false;zip_eofile=false;if(zip_outbuf!=null){return;}zip_free_queue=zip_qhead=zip_qtail=null;zip_outbuf=new Array(zip_OUTBUFSIZ);zip_window=new Array(zip_window_size);zip_d_buf=new Array(zip_DIST_BUFSIZE);zip_l_buf=new Array(zip_INBUFSIZ+zip_INBUF_EXTRA);zip_prev=new Array(1<<zip_BITS);zip_dyn_ltree=new Array(zip_HEAP_SIZE);for(i=0;i<zip_HEAP_SIZE;i++){zip_dyn_ltree[i]=new zip_DeflateCT();}zip_dyn_dtree=new Array(2*zip_D_CODES+1);for(i=0;i<2*zip_D_CODES+1;i++){zip_dyn_dtree[i]=new zip_DeflateCT();}zip_static_ltree=new Array(zip_L_CODES+2);for(i=0;i<zip_L_CODES+2;i++){zip_static_ltree[i]=new zip_DeflateCT();}zip_static_dtree=new Array(zip_D_CODES);for(i=0;i<zip_D_CODES;i++){zip_static_dtree[i]=new zip_DeflateCT();}zip_bl_tree=new Array(2*zip_BL_CODES+1);for(i=0;i<2*zip_BL_CODES+1;i++){zip_bl_tree[i]=new zip_DeflateCT();}zip_l_desc=new zip_DeflateTreeDesc();zip_d_desc=new zip_DeflateTreeDesc();zip_bl_desc=new zip_DeflateTreeDesc();zip_bl_count=new Array(zip_MAX_BITS+1);zip_heap=new Array(2*zip_L_CODES+1);zip_depth=new Array(2*zip_L_CODES+1);zip_length_code=new Array(zip_MAX_MATCH-zip_MIN_MATCH+1);zip_dist_code=new Array(512);zip_base_length=new Array(zip_LENGTH_CODES);zip_base_dist=new Array(zip_D_CODES);zip_flag_buf=new Array(parseInt(zip_LIT_BUFSIZE/8));};var zip_deflate_end=function(){zip_free_queue=zip_qhead=zip_qtail=null;zip_outbuf=null;zip_window=null;zip_d_buf=null;zip_l_buf=null;zip_prev=null;zip_dyn_ltree=null;zip_dyn_dtree=null;zip_static_ltree=null;zip_static_dtree=null;zip_bl_tree=null;zip_l_desc=null;zip_d_desc=null;zip_bl_desc=null;zip_bl_count=null;zip_heap=null;zip_depth=null;zip_length_code=null;zip_dist_code=null;zip_base_length=null;zip_base_dist=null;zip_flag_buf=null;};var zip_reuse_queue=function(p){p.next=zip_free_queue;zip_free_queue=p;};var zip_new_queue=function(){var p;if(zip_free_queue!=null){p=zip_free_queue;zip_free_queue=zip_free_queue.next;}else{p=new zip_DeflateBuffer();}p.next=null;p.len=p.off=0;return p;};var zip_head1=function(i){return zip_prev[zip_WSIZE+i];};var zip_head2=function(i,val){return zip_prev[zip_WSIZE+i]=val;};var zip_put_byte=function(c){zip_outbuf[zip_outoff+zip_outcnt++]=c;if(zip_outoff+zip_outcnt==zip_OUTBUFSIZ){zip_qoutbuf();}};var zip_put_short=function(w){w&=65535;if(zip_outoff+zip_outcnt<zip_OUTBUFSIZ-2){zip_outbuf[zip_outoff+zip_outcnt++]=(w&255);zip_outbuf[zip_outoff+zip_outcnt++]=(w>>>8);}else{zip_put_byte(w&255);zip_put_byte(w>>>8);}};var zip_INSERT_STRING=function(){zip_ins_h=((zip_ins_h<<zip_H_SHIFT)^(zip_window[zip_strstart+zip_MIN_MATCH-1]&255))&zip_HASH_MASK;zip_hash_head=zip_head1(zip_ins_h);zip_prev[zip_strstart&zip_WMASK]=zip_hash_head;zip_head2(zip_ins_h,zip_strstart);};var zip_SEND_CODE=function(c,tree){zip_send_bits(tree[c].fc,tree[c].dl);};var zip_D_CODE=function(dist){return(dist<256?zip_dist_code[dist]:zip_dist_code[256+(dist>>7)])&255;};var zip_SMALLER=function(tree,n,m){return tree[n].fc<tree[m].fc||(tree[n].fc==tree[m].fc&&zip_depth[n]<=zip_depth[m]);};var zip_read_buff=function(buff,offset,n){var i;for(i=0;i<n&&zip_deflate_pos<zip_deflate_data.length;i++){buff[offset+i]=zip_deflate_data.charCodeAt(zip_deflate_pos++)&255;}return i;};var zip_lm_init=function(){var j;for(j=0;j<zip_HASH_SIZE;j++){zip_prev[zip_WSIZE+j]=0;}zip_max_lazy_match=zip_configuration_table[zip_compr_level].max_lazy;zip_good_match=zip_configuration_table[zip_compr_level].good_length;if(!zip_FULL_SEARCH){zip_nice_match=zip_configuration_table[zip_compr_level].nice_length;}zip_max_chain_length=zip_configuration_table[zip_compr_level].max_chain;zip_strstart=0;zip_block_start=0;zip_lookahead=zip_read_buff(zip_window,0,2*zip_WSIZE);if(zip_lookahead<=0){zip_eofile=true;zip_lookahead=0;return;}zip_eofile=false;while(zip_lookahead<zip_MIN_LOOKAHEAD&&!zip_eofile){zip_fill_window();}zip_ins_h=0;for(j=0;j<zip_MIN_MATCH-1;j++){zip_ins_h=((zip_ins_h<<zip_H_SHIFT)^(zip_window[j]&255))&zip_HASH_MASK;}};var zip_longest_match=function(cur_match){var chain_length=zip_max_chain_length;var scanp=zip_strstart;var matchp;var len;var best_len=zip_prev_length;var limit=(zip_strstart>zip_MAX_DIST?zip_strstart-zip_MAX_DIST:zip_NIL);var strendp=zip_strstart+zip_MAX_MATCH;var scan_end1=zip_window[scanp+best_len-1];var scan_end=zip_window[scanp+best_len];if(zip_prev_length>=zip_good_match){chain_length>>=2;}do{matchp=cur_match;if(zip_window[matchp+best_len]!=scan_end||zip_window[matchp+best_len-1]!=scan_end1||zip_window[matchp]!=zip_window[scanp]||zip_window[++matchp]!=zip_window[scanp+1]){continue;}scanp+=2;matchp++;do{}while(zip_window[++scanp]==zip_window[++matchp]&&zip_window[++scanp]==zip_window[++matchp]&&zip_window[++scanp]==zip_window[++matchp]&&zip_window[++scanp]==zip_window[++matchp]&&zip_window[++scanp]==zip_window[++matchp]&&zip_window[++scanp]==zip_window[++matchp]&&zip_window[++scanp]==zip_window[++matchp]&&zip_window[++scanp]==zip_window[++matchp]&&scanp<strendp);len=zip_MAX_MATCH-(strendp-scanp);scanp=strendp-zip_MAX_MATCH;if(len>best_len){zip_match_start=cur_match;best_len=len;if(zip_FULL_SEARCH){if(len>=zip_MAX_MATCH){break;}}else{if(len>=zip_nice_match){break;}}scan_end1=zip_window[scanp+best_len-1];scan_end=zip_window[scanp+best_len];}}while((cur_match=zip_prev[cur_match&zip_WMASK])>limit&&--chain_length!=0);return best_len;};var zip_fill_window=function(){var n,m;var more=zip_window_size-zip_lookahead-zip_strstart;if(more==-1){more--;}else{if(zip_strstart>=zip_WSIZE+zip_MAX_DIST){for(n=0;n<zip_WSIZE;n++){zip_window[n]=zip_window[n+zip_WSIZE];}zip_match_start-=zip_WSIZE;zip_strstart-=zip_WSIZE;zip_block_start-=zip_WSIZE;for(n=0;n<zip_HASH_SIZE;n++){m=zip_head1(n);zip_head2(n,m>=zip_WSIZE?m-zip_WSIZE:zip_NIL);}for(n=0;n<zip_WSIZE;n++){m=zip_prev[n];zip_prev[n]=(m>=zip_WSIZE?m-zip_WSIZE:zip_NIL);}more+=zip_WSIZE;}}if(!zip_eofile){n=zip_read_buff(zip_window,zip_strstart+zip_lookahead,more);if(n<=0){zip_eofile=true;}else{zip_lookahead+=n;}}};var zip_deflate_fast=function(){while(zip_lookahead!=0&&zip_qhead==null){var flush;zip_INSERT_STRING();if(zip_hash_head!=zip_NIL&&zip_strstart-zip_hash_head<=zip_MAX_DIST){zip_match_length=zip_longest_match(zip_hash_head);if(zip_match_length>zip_lookahead){zip_match_length=zip_lookahead;}}if(zip_match_length>=zip_MIN_MATCH){flush=zip_ct_tally(zip_strstart-zip_match_start,zip_match_length-zip_MIN_MATCH);zip_lookahead-=zip_match_length;if(zip_match_length<=zip_max_lazy_match){zip_match_length--;do{zip_strstart++;zip_INSERT_STRING();}while(--zip_match_length!=0);zip_strstart++;}else{zip_strstart+=zip_match_length;zip_match_length=0;zip_ins_h=zip_window[zip_strstart]&255;zip_ins_h=((zip_ins_h<<zip_H_SHIFT)^(zip_window[zip_strstart+1]&255))&zip_HASH_MASK;}}else{flush=zip_ct_tally(0,zip_window[zip_strstart]&255);zip_lookahead--;zip_strstart++;}if(flush){zip_flush_block(0);zip_block_start=zip_strstart;}while(zip_lookahead<zip_MIN_LOOKAHEAD&&!zip_eofile){zip_fill_window();}}};var zip_deflate_better=function(){while(zip_lookahead!=0&&zip_qhead==null){zip_INSERT_STRING();zip_prev_length=zip_match_length;zip_prev_match=zip_match_start;zip_match_length=zip_MIN_MATCH-1;if(zip_hash_head!=zip_NIL&&zip_prev_length<zip_max_lazy_match&&zip_strstart-zip_hash_head<=zip_MAX_DIST){zip_match_length=zip_longest_match(zip_hash_head);if(zip_match_length>zip_lookahead){zip_match_length=zip_lookahead;}if(zip_match_length==zip_MIN_MATCH&&zip_strstart-zip_match_start>zip_TOO_FAR){zip_match_length--;}}if(zip_prev_length>=zip_MIN_MATCH&&zip_match_length<=zip_prev_length){var flush;flush=zip_ct_tally(zip_strstart-1-zip_prev_match,zip_prev_length-zip_MIN_MATCH);zip_lookahead-=zip_prev_length-1;zip_prev_length-=2;do{zip_strstart++;zip_INSERT_STRING();}while(--zip_prev_length!=0);zip_match_available=0;zip_match_length=zip_MIN_MATCH-1;zip_strstart++;if(flush){zip_flush_block(0);zip_block_start=zip_strstart;}}else{if(zip_match_available!=0){if(zip_ct_tally(0,zip_window[zip_strstart-1]&255)){zip_flush_block(0);zip_block_start=zip_strstart;}zip_strstart++;zip_lookahead--;}else{zip_match_available=1;zip_strstart++;zip_lookahead--;}}while(zip_lookahead<zip_MIN_LOOKAHEAD&&!zip_eofile){zip_fill_window();}}};var zip_init_deflate=function(){if(zip_eofile){return;}zip_bi_buf=0;zip_bi_valid=0;zip_ct_init();zip_lm_init();zip_qhead=null;zip_outcnt=0;zip_outoff=0;if(zip_compr_level<=3){zip_prev_length=zip_MIN_MATCH-1;zip_match_length=0;}else{zip_match_length=zip_MIN_MATCH-1;zip_match_available=0;}zip_complete=false;};var zip_deflate_internal=function(buff,off,buff_size){var n;if(!zip_initflag){zip_init_deflate();zip_initflag=true;if(zip_lookahead==0){zip_complete=true;return 0;}}if((n=zip_qcopy(buff,off,buff_size))==buff_size){return buff_size;}if(zip_complete){return n;}if(zip_compr_level<=3){zip_deflate_fast();}else{zip_deflate_better();}if(zip_lookahead==0){if(zip_match_available!=0){zip_ct_tally(0,zip_window[zip_strstart-1]&255);}zip_flush_block(1);zip_complete=true;}return n+zip_qcopy(buff,n+off,buff_size-n);};var zip_qcopy=function(buff,off,buff_size){var n,i,j;n=0;while(zip_qhead!=null&&n<buff_size){i=buff_size-n;if(i>zip_qhead.len){i=zip_qhead.len;}for(j=0;j<i;j++){buff[off+n+j]=zip_qhead.ptr[zip_qhead.off+j];}zip_qhead.off+=i;zip_qhead.len-=i;n+=i;if(zip_qhead.len==0){var p;p=zip_qhead;zip_qhead=zip_qhead.next;zip_reuse_queue(p);}}if(n==buff_size){return n;}if(zip_outoff<zip_outcnt){i=buff_size-n;if(i>zip_outcnt-zip_outoff){i=zip_outcnt-zip_outoff;}for(j=0;j<i;j++){buff[off+n+j]=zip_outbuf[zip_outoff+j];}zip_outoff+=i;n+=i;if(zip_outcnt==zip_outoff){zip_outcnt=zip_outoff=0;}}return n;};var zip_ct_init=function(){var n;var bits;var length;var code;var dist;if(zip_static_dtree[0].dl!=0){return;}zip_l_desc.dyn_tree=zip_dyn_ltree;zip_l_desc.static_tree=zip_static_ltree;zip_l_desc.extra_bits=zip_extra_lbits;zip_l_desc.extra_base=zip_LITERALS+1;zip_l_desc.elems=zip_L_CODES;zip_l_desc.max_length=zip_MAX_BITS;zip_l_desc.max_code=0;zip_d_desc.dyn_tree=zip_dyn_dtree;zip_d_desc.static_tree=zip_static_dtree;zip_d_desc.extra_bits=zip_extra_dbits;zip_d_desc.extra_base=0;zip_d_desc.elems=zip_D_CODES;zip_d_desc.max_length=zip_MAX_BITS;zip_d_desc.max_code=0;zip_bl_desc.dyn_tree=zip_bl_tree;zip_bl_desc.static_tree=null;zip_bl_desc.extra_bits=zip_extra_blbits;zip_bl_desc.extra_base=0;zip_bl_desc.elems=zip_BL_CODES;zip_bl_desc.max_length=zip_MAX_BL_BITS;zip_bl_desc.max_code=0;length=0;for(code=0;code<zip_LENGTH_CODES-1;code++){zip_base_length[code]=length;for(n=0;n<(1<<zip_extra_lbits[code]);n++){zip_length_code[length++]=code;}}zip_length_code[length-1]=code;dist=0;for(code=0;code<16;code++){zip_base_dist[code]=dist;for(n=0;n<(1<<zip_extra_dbits[code]);n++){zip_dist_code[dist++]=code;}}dist>>=7;for(;code<zip_D_CODES;code++){zip_base_dist[code]=dist<<7;for(n=0;n<(1<<(zip_extra_dbits[code]-7));n++){zip_dist_code[256+dist++]=code;}}for(bits=0;bits<=zip_MAX_BITS;bits++){zip_bl_count[bits]=0;}n=0;while(n<=143){zip_static_ltree[n++].dl=8;zip_bl_count[8]++;}while(n<=255){zip_static_ltree[n++].dl=9;zip_bl_count[9]++;}while(n<=279){zip_static_ltree[n++].dl=7;zip_bl_count[7]++;}while(n<=287){zip_static_ltree[n++].dl=8;zip_bl_count[8]++;}zip_gen_codes(zip_static_ltree,zip_L_CODES+1);for(n=0;n<zip_D_CODES;n++){zip_static_dtree[n].dl=5;zip_static_dtree[n].fc=zip_bi_reverse(n,5);}zip_init_block();};var zip_init_block=function(){var n;for(n=0;n<zip_L_CODES;n++){zip_dyn_ltree[n].fc=0;}for(n=0;n<zip_D_CODES;n++){zip_dyn_dtree[n].fc=0;}for(n=0;n<zip_BL_CODES;n++){zip_bl_tree[n].fc=0;}zip_dyn_ltree[zip_END_BLOCK].fc=1;zip_opt_len=zip_static_len=0;zip_last_lit=zip_last_dist=zip_last_flags=0;zip_flags=0;zip_flag_bit=1;};var zip_pqdownheap=function(tree,k){var v=zip_heap[k];var j=k<<1;while(j<=zip_heap_len){if(j<zip_heap_len&&zip_SMALLER(tree,zip_heap[j+1],zip_heap[j])){j++;}if(zip_SMALLER(tree,v,zip_heap[j])){break;}zip_heap[k]=zip_heap[j];k=j;j<<=1;}zip_heap[k]=v;};var zip_gen_bitlen=function(desc){var tree=desc.dyn_tree;var extra=desc.extra_bits;var base=desc.extra_base;var max_code=desc.max_code;var max_length=desc.max_length;var stree=desc.static_tree;var h;var n,m;var bits;var xbits;var f;var overflow=0;for(bits=0;bits<=zip_MAX_BITS;bits++){zip_bl_count[bits]=0;}tree[zip_heap[zip_heap_max]].dl=0;for(h=zip_heap_max+1;h<zip_HEAP_SIZE;h++){n=zip_heap[h];bits=tree[tree[n].dl].dl+1;if(bits>max_length){bits=max_length;overflow++;}tree[n].dl=bits;if(n>max_code){continue;}zip_bl_count[bits]++;xbits=0;if(n>=base){xbits=extra[n-base];}f=tree[n].fc;zip_opt_len+=f*(bits+xbits);if(stree!=null){zip_static_len+=f*(stree[n].dl+xbits);}}if(overflow==0){return;}do{bits=max_length-1;while(zip_bl_count[bits]==0){bits--;}zip_bl_count[bits]--;zip_bl_count[bits+1]+=2;zip_bl_count[max_length]--;overflow-=2;}while(overflow>0);for(bits=max_length;bits!=0;bits--){n=zip_bl_count[bits];while(n!=0){m=zip_heap[--h];if(m>max_code){continue;}if(tree[m].dl!=bits){zip_opt_len+=(bits-tree[m].dl)*tree[m].fc;tree[m].fc=bits;}n--;}}};var zip_gen_codes=function(tree,max_code){var next_code=new Array(zip_MAX_BITS+1);var code=0;var bits;var n;for(bits=1;bits<=zip_MAX_BITS;bits++){code=((code+zip_bl_count[bits-1])<<1);next_code[bits]=code;}for(n=0;n<=max_code;n++){var len=tree[n].dl;if(len==0){continue;}tree[n].fc=zip_bi_reverse(next_code[len]++,len);}};var zip_build_tree=function(desc){var tree=desc.dyn_tree;var stree=desc.static_tree;var elems=desc.elems;var n,m;var max_code=-1;var node=elems;zip_heap_len=0;zip_heap_max=zip_HEAP_SIZE;for(n=0;n<elems;n++){if(tree[n].fc!=0){zip_heap[++zip_heap_len]=max_code=n;zip_depth[n]=0;}else{tree[n].dl=0;}}while(zip_heap_len<2){var xnew=zip_heap[++zip_heap_len]=(max_code<2?++max_code:0);tree[xnew].fc=1;zip_depth[xnew]=0;zip_opt_len--;if(stree!=null){zip_static_len-=stree[xnew].dl;}}desc.max_code=max_code;for(n=zip_heap_len>>1;n>=1;n--){zip_pqdownheap(tree,n);}do{n=zip_heap[zip_SMALLEST];zip_heap[zip_SMALLEST]=zip_heap[zip_heap_len--];zip_pqdownheap(tree,zip_SMALLEST);m=zip_heap[zip_SMALLEST];zip_heap[--zip_heap_max]=n;zip_heap[--zip_heap_max]=m;tree[node].fc=tree[n].fc+tree[m].fc;if(zip_depth[n]>zip_depth[m]+1){zip_depth[node]=zip_depth[n];}else{zip_depth[node]=zip_depth[m]+1;}tree[n].dl=tree[m].dl=node;zip_heap[zip_SMALLEST]=node++;zip_pqdownheap(tree,zip_SMALLEST);}while(zip_heap_len>=2);zip_heap[--zip_heap_max]=zip_heap[zip_SMALLEST];zip_gen_bitlen(desc);zip_gen_codes(tree,max_code);};var zip_scan_tree=function(tree,max_code){var n;var prevlen=-1;var curlen;var nextlen=tree[0].dl;var count=0;var max_count=7;var min_count=4;if(nextlen==0){max_count=138;min_count=3;}tree[max_code+1].dl=65535;for(n=0;n<=max_code;n++){curlen=nextlen;nextlen=tree[n+1].dl;if(++count<max_count&&curlen==nextlen){continue;}else{if(count<min_count){zip_bl_tree[curlen].fc+=count;}else{if(curlen!=0){if(curlen!=prevlen){zip_bl_tree[curlen].fc++;}zip_bl_tree[zip_REP_3_6].fc++;}else{if(count<=10){zip_bl_tree[zip_REPZ_3_10].fc++;}else{zip_bl_tree[zip_REPZ_11_138].fc++;}}}}count=0;prevlen=curlen;if(nextlen==0){max_count=138;min_count=3;}else{if(curlen==nextlen){max_count=6;min_count=3;}else{max_count=7;min_count=4;}}}};var zip_send_tree=function(tree,max_code){var n;var prevlen=-1;var curlen;var nextlen=tree[0].dl;var count=0;var max_count=7;var min_count=4;if(nextlen==0){max_count=138;min_count=3;}for(n=0;n<=max_code;n++){curlen=nextlen;nextlen=tree[n+1].dl;if(++count<max_count&&curlen==nextlen){continue;}else{if(count<min_count){do{zip_SEND_CODE(curlen,zip_bl_tree);}while(--count!=0);}else{if(curlen!=0){if(curlen!=prevlen){zip_SEND_CODE(curlen,zip_bl_tree);count--;}zip_SEND_CODE(zip_REP_3_6,zip_bl_tree);zip_send_bits(count-3,2);}else{if(count<=10){zip_SEND_CODE(zip_REPZ_3_10,zip_bl_tree);zip_send_bits(count-3,3);}else{zip_SEND_CODE(zip_REPZ_11_138,zip_bl_tree);zip_send_bits(count-11,7);}}}}count=0;prevlen=curlen;if(nextlen==0){max_count=138;min_count=3;}else{if(curlen==nextlen){max_count=6;min_count=3;}else{max_count=7;min_count=4;}}}};var zip_build_bl_tree=function(){var max_blindex;zip_scan_tree(zip_dyn_ltree,zip_l_desc.max_code);zip_scan_tree(zip_dyn_dtree,zip_d_desc.max_code);zip_build_tree(zip_bl_desc);for(max_blindex=zip_BL_CODES-1;max_blindex>=3;max_blindex--){if(zip_bl_tree[zip_bl_order[max_blindex]].dl!=0){break;}}zip_opt_len+=3*(max_blindex+1)+5+5+4;return max_blindex;};var zip_send_all_trees=function(lcodes,dcodes,blcodes){var rank;zip_send_bits(lcodes-257,5);zip_send_bits(dcodes-1,5);zip_send_bits(blcodes-4,4);for(rank=0;rank<blcodes;rank++){zip_send_bits(zip_bl_tree[zip_bl_order[rank]].dl,3);}zip_send_tree(zip_dyn_ltree,lcodes-1);zip_send_tree(zip_dyn_dtree,dcodes-1);};var zip_flush_block=function(eof){var opt_lenb,static_lenb;var max_blindex;var stored_len;stored_len=zip_strstart-zip_block_start;zip_flag_buf[zip_last_flags]=zip_flags;zip_build_tree(zip_l_desc);zip_build_tree(zip_d_desc);max_blindex=zip_build_bl_tree();opt_lenb=(zip_opt_len+3+7)>>3;static_lenb=(zip_static_len+3+7)>>3;if(static_lenb<=opt_lenb){opt_lenb=static_lenb;}if(stored_len+4<=opt_lenb&&zip_block_start>=0){var i;zip_send_bits((zip_STORED_BLOCK<<1)+eof,3);zip_bi_windup();zip_put_short(stored_len);zip_put_short(~stored_len);for(i=0;i<stored_len;i++){zip_put_byte(zip_window[zip_block_start+i]);}}else{if(static_lenb==opt_lenb){zip_send_bits((zip_STATIC_TREES<<1)+eof,3);zip_compress_block(zip_static_ltree,zip_static_dtree);}else{zip_send_bits((zip_DYN_TREES<<1)+eof,3);zip_send_all_trees(zip_l_desc.max_code+1,zip_d_desc.max_code+1,max_blindex+1);zip_compress_block(zip_dyn_ltree,zip_dyn_dtree);}}zip_init_block();if(eof!=0){zip_bi_windup();}};var zip_ct_tally=function(dist,lc){zip_l_buf[zip_last_lit++]=lc;if(dist==0){zip_dyn_ltree[lc].fc++;}else{dist--;zip_dyn_ltree[zip_length_code[lc]+zip_LITERALS+1].fc++;zip_dyn_dtree[zip_D_CODE(dist)].fc++;zip_d_buf[zip_last_dist++]=dist;zip_flags|=zip_flag_bit;}zip_flag_bit<<=1;if((zip_last_lit&7)==0){zip_flag_buf[zip_last_flags++]=zip_flags;zip_flags=0;zip_flag_bit=1;}if(zip_compr_level>2&&(zip_last_lit&4095)==0){var out_length=zip_last_lit*8;var in_length=zip_strstart-zip_block_start;var dcode;for(dcode=0;dcode<zip_D_CODES;dcode++){out_length+=zip_dyn_dtree[dcode].fc*(5+zip_extra_dbits[dcode]);}out_length>>=3;if(zip_last_dist<parseInt(zip_last_lit/2)&&out_length<parseInt(in_length/2)){return true;}}return(zip_last_lit==zip_LIT_BUFSIZE-1||zip_last_dist==zip_DIST_BUFSIZE);};var zip_compress_block=function(ltree,dtree){var dist;var lc;var lx=0;var dx=0;var fx=0;var flag=0;var code;var extra;if(zip_last_lit!=0){do{if((lx&7)==0){flag=zip_flag_buf[fx++];}lc=zip_l_buf[lx++]&255;if((flag&1)==0){zip_SEND_CODE(lc,ltree);}else{code=zip_length_code[lc];zip_SEND_CODE(code+zip_LITERALS+1,ltree);extra=zip_extra_lbits[code];if(extra!=0){lc-=zip_base_length[code];zip_send_bits(lc,extra);}dist=zip_d_buf[dx++];code=zip_D_CODE(dist);zip_SEND_CODE(code,dtree);extra=zip_extra_dbits[code];if(extra!=0){dist-=zip_base_dist[code];zip_send_bits(dist,extra);}}flag>>=1;}while(lx<zip_last_lit);}zip_SEND_CODE(zip_END_BLOCK,ltree);};var zip_Buf_size=16;var zip_send_bits=function(value,length){if(zip_bi_valid>zip_Buf_size-length){zip_bi_buf|=(value<<zip_bi_valid);zip_put_short(zip_bi_buf);zip_bi_buf=(value>>(zip_Buf_size-zip_bi_valid));zip_bi_valid+=length-zip_Buf_size;}else{zip_bi_buf|=value<<zip_bi_valid;zip_bi_valid+=length;}};var zip_bi_reverse=function(code,len){var res=0;do{res|=code&1;code>>=1;res<<=1;}while(--len>0);return res>>1;};var zip_bi_windup=function(){if(zip_bi_valid>8){zip_put_short(zip_bi_buf);}else{if(zip_bi_valid>0){zip_put_byte(zip_bi_buf);}}zip_bi_buf=0;zip_bi_valid=0;};var zip_qoutbuf=function(){if(zip_outcnt!=0){var q,i;q=zip_new_queue();if(zip_qhead==null){zip_qhead=zip_qtail=q;}else{zip_qtail=zip_qtail.next=q;}q.len=zip_outcnt-zip_outoff;for(i=0;i<q.len;i++){q.ptr[i]=zip_outbuf[zip_outoff+i];}zip_outcnt=zip_outoff=0;}};var zip_deflate=function(str,level){var i,j;zip_deflate_data=str;zip_deflate_pos=0;if(typeof level=="undefined"){level=zip_DEFAULT_LEVEL;}zip_deflate_start(level);var buff=new Array(1024);var aout=[];while((i=zip_deflate_internal(buff,0,buff.length))>0){var cbuf=new Array(i);for(j=0;j<i;j++){cbuf[j]=String.fromCharCode(buff[j]);}aout[aout.length]=cbuf.join("");}zip_deflate_data=null;return aout.join("");};if(!window.RawDeflate){RawDeflate={};}RawDeflate.deflate=zip_deflate;})();(function(){var zip_WSIZE=32768;var zip_STORED_BLOCK=0;var zip_STATIC_TREES=1;var zip_DYN_TREES=2;var zip_lbits=9;var zip_dbits=6;var zip_INBUFSIZ=32768;var zip_INBUF_EXTRA=64;var zip_slide;var zip_wp;var zip_fixed_tl=null;var zip_fixed_td;var zip_fixed_bl,fixed_bd;var zip_bit_buf;var zip_bit_len;var zip_method;var zip_eof;var zip_copy_leng;var zip_copy_dist;var zip_tl,zip_td;var zip_bl,zip_bd;var zip_inflate_data;var zip_inflate_pos;var zip_MASK_BITS=new Array(0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535);var zip_cplens=new Array(3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0);var zip_cplext=new Array(0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,99,99);var zip_cpdist=new Array(1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577);var zip_cpdext=new Array(0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13);var zip_border=new Array(16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15);var zip_HuftList=function(){this.next=null;this.list=null;};var zip_HuftNode=function(){this.e=0;this.b=0;this.n=0;this.t=null;};var zip_HuftBuild=function(b,n,s,d,e,mm){this.BMAX=16;this.N_MAX=288;this.status=0;this.root=null;this.m=0;var a;var c=new Array(this.BMAX+1);var el;var f;var g;var h;var i;var j;var k;var lx=new Array(this.BMAX+1);var p;var pidx;var q;var r=new zip_HuftNode();var u=new Array(this.BMAX);var v=new Array(this.N_MAX);var w;var x=new Array(this.BMAX+1);var xp;var y;var z;var o;var tail;tail=this.root=null;for(i=0;i<c.length;i++){c[i]=0;}for(i=0;i<lx.length;i++){lx[i]=0;}for(i=0;i<u.length;i++){u[i]=null;}for(i=0;i<v.length;i++){v[i]=0;}for(i=0;i<x.length;i++){x[i]=0;}el=n>256?b[256]:this.BMAX;p=b;pidx=0;i=n;do{c[p[pidx]]++;pidx++;}while(--i>0);if(c[0]==n){this.root=null;this.m=0;this.status=0;return;}for(j=1;j<=this.BMAX;j++){if(c[j]!=0){break;}}k=j;if(mm<j){mm=j;}for(i=this.BMAX;i!=0;i--){if(c[i]!=0){break;}}g=i;if(mm>i){mm=i;}for(y=1<<j;j<i;j++,y<<=1){if((y-=c[j])<0){this.status=2;this.m=mm;return;}}if((y-=c[i])<0){this.status=2;this.m=mm;return;}c[i]+=y;x[1]=j=0;p=c;pidx=1;xp=2;while(--i>0){x[xp++]=(j+=p[pidx++]);}p=b;pidx=0;i=0;do{if((j=p[pidx++])!=0){v[x[j]++]=i;}}while(++i<n);n=x[g];x[0]=i=0;p=v;pidx=0;h=-1;w=lx[0]=0;q=null;z=0;for(;k<=g;k++){a=c[k];while(a-->0){while(k>w+lx[1+h]){w+=lx[1+h];h++;z=(z=g-w)>mm?mm:z;if((f=1<<(j=k-w))>a+1){f-=a+1;xp=k;while(++j<z){if((f<<=1)<=c[++xp]){break;}f-=c[xp];}}if(w+j>el&&w<el){j=el-w;}z=1<<j;lx[1+h]=j;q=new Array(z);for(o=0;o<z;o++){q[o]=new zip_HuftNode();}if(tail==null){tail=this.root=new zip_HuftList();}else{tail=tail.next=new zip_HuftList();}tail.next=null;tail.list=q;u[h]=q;if(h>0){x[h]=i;r.b=lx[h];r.e=16+j;r.t=q;j=(i&((1<<w)-1))>>(w-lx[h]);u[h-1][j].e=r.e;u[h-1][j].b=r.b;u[h-1][j].n=r.n;u[h-1][j].t=r.t;}}r.b=k-w;if(pidx>=n){r.e=99;}else{if(p[pidx]<s){r.e=(p[pidx]<256?16:15);r.n=p[pidx++];}else{r.e=e[p[pidx]-s];r.n=d[p[pidx++]-s];}}f=1<<(k-w);for(j=i>>w;j<z;j+=f){q[j].e=r.e;q[j].b=r.b;q[j].n=r.n;q[j].t=r.t;}for(j=1<<(k-1);(i&j)!=0;j>>=1){i^=j;}i^=j;while((i&((1<<w)-1))!=x[h]){w-=lx[h];h--;}}}this.m=lx[1];this.status=((y!=0&&g!=1)?1:0);};var zip_GET_BYTE=function(){if(zip_inflate_data.length==zip_inflate_pos){return -1;}return zip_inflate_data.charCodeAt(zip_inflate_pos++)&255;};var zip_NEEDBITS=function(n){while(zip_bit_len<n){zip_bit_buf|=zip_GET_BYTE()<<zip_bit_len;zip_bit_len+=8;}};var zip_GETBITS=function(n){return zip_bit_buf&zip_MASK_BITS[n];};var zip_DUMPBITS=function(n){zip_bit_buf>>=n;zip_bit_len-=n;};var zip_inflate_codes=function(buff,off,size){var e;var t;var n;if(size==0){return 0;}n=0;for(;;){zip_NEEDBITS(zip_bl);t=zip_tl.list[zip_GETBITS(zip_bl)];e=t.e;while(e>16){if(e==99){return -1;}zip_DUMPBITS(t.b);e-=16;zip_NEEDBITS(e);t=t.t[zip_GETBITS(e)];e=t.e;}zip_DUMPBITS(t.b);if(e==16){zip_wp&=zip_WSIZE-1;buff[off+n++]=zip_slide[zip_wp++]=t.n;if(n==size){return size;}continue;}if(e==15){break;}zip_NEEDBITS(e);zip_copy_leng=t.n+zip_GETBITS(e);zip_DUMPBITS(e);zip_NEEDBITS(zip_bd);t=zip_td.list[zip_GETBITS(zip_bd)];e=t.e;while(e>16){if(e==99){return -1;}zip_DUMPBITS(t.b);e-=16;zip_NEEDBITS(e);t=t.t[zip_GETBITS(e)];e=t.e;}zip_DUMPBITS(t.b);zip_NEEDBITS(e);zip_copy_dist=zip_wp-t.n-zip_GETBITS(e);zip_DUMPBITS(e);while(zip_copy_leng>0&&n<size){zip_copy_leng--;zip_copy_dist&=zip_WSIZE-1;zip_wp&=zip_WSIZE-1;buff[off+n++]=zip_slide[zip_wp++]=zip_slide[zip_copy_dist++];}if(n==size){return size;}}zip_method=-1;return n;};var zip_inflate_stored=function(buff,off,size){var n;n=zip_bit_len&7;zip_DUMPBITS(n);zip_NEEDBITS(16);n=zip_GETBITS(16);zip_DUMPBITS(16);zip_NEEDBITS(16);if(n!=((~zip_bit_buf)&65535)){return -1;}zip_DUMPBITS(16);zip_copy_leng=n;n=0;while(zip_copy_leng>0&&n<size){zip_copy_leng--;zip_wp&=zip_WSIZE-1;zip_NEEDBITS(8);buff[off+n++]=zip_slide[zip_wp++]=zip_GETBITS(8);zip_DUMPBITS(8);}if(zip_copy_leng==0){zip_method=-1;}return n;};var zip_inflate_fixed=function(buff,off,size){if(zip_fixed_tl==null){var i;var l=new Array(288);var h;for(i=0;i<144;i++){l[i]=8;}for(;i<256;i++){l[i]=9;}for(;i<280;i++){l[i]=7;}for(;i<288;i++){l[i]=8;}zip_fixed_bl=7;h=new zip_HuftBuild(l,288,257,zip_cplens,zip_cplext,zip_fixed_bl);if(h.status!=0){alert("HufBuild error: "+h.status);return -1;}zip_fixed_tl=h.root;zip_fixed_bl=h.m;for(i=0;i<30;i++){l[i]=5;}zip_fixed_bd=5;h=new zip_HuftBuild(l,30,0,zip_cpdist,zip_cpdext,zip_fixed_bd);if(h.status>1){zip_fixed_tl=null;alert("HufBuild error: "+h.status);return -1;}zip_fixed_td=h.root;zip_fixed_bd=h.m;}zip_tl=zip_fixed_tl;zip_td=zip_fixed_td;zip_bl=zip_fixed_bl;zip_bd=zip_fixed_bd;return zip_inflate_codes(buff,off,size);};var zip_inflate_dynamic=function(buff,off,size){var i;var j;var l;var n;var t;var nb;var nl;var nd;var ll=new Array(286+30);var h;for(i=0;i<ll.length;i++){ll[i]=0;}zip_NEEDBITS(5);nl=257+zip_GETBITS(5);zip_DUMPBITS(5);zip_NEEDBITS(5);nd=1+zip_GETBITS(5);zip_DUMPBITS(5);zip_NEEDBITS(4);nb=4+zip_GETBITS(4);zip_DUMPBITS(4);if(nl>286||nd>30){return -1;}for(j=0;j<nb;j++){zip_NEEDBITS(3);ll[zip_border[j]]=zip_GETBITS(3);zip_DUMPBITS(3);}for(;j<19;j++){ll[zip_border[j]]=0;}zip_bl=7;h=new zip_HuftBuild(ll,19,19,null,null,zip_bl);if(h.status!=0){return -1;}zip_tl=h.root;zip_bl=h.m;n=nl+nd;i=l=0;while(i<n){zip_NEEDBITS(zip_bl);t=zip_tl.list[zip_GETBITS(zip_bl)];j=t.b;zip_DUMPBITS(j);j=t.n;if(j<16){ll[i++]=l=j;}else{if(j==16){zip_NEEDBITS(2);j=3+zip_GETBITS(2);zip_DUMPBITS(2);if(i+j>n){return -1;}while(j-->0){ll[i++]=l;}}else{if(j==17){zip_NEEDBITS(3);j=3+zip_GETBITS(3);zip_DUMPBITS(3);if(i+j>n){return -1;}while(j-->0){ll[i++]=0;}l=0;}else{zip_NEEDBITS(7);j=11+zip_GETBITS(7);zip_DUMPBITS(7);if(i+j>n){return -1;}while(j-->0){ll[i++]=0;}l=0;}}}}zip_bl=zip_lbits;h=new zip_HuftBuild(ll,nl,257,zip_cplens,zip_cplext,zip_bl);if(zip_bl==0){h.status=1;}if(h.status!=0){if(h.status==1){}return -1;}zip_tl=h.root;zip_bl=h.m;for(i=0;i<nd;i++){ll[i]=ll[i+nl];}zip_bd=zip_dbits;h=new zip_HuftBuild(ll,nd,0,zip_cpdist,zip_cpdext,zip_bd);zip_td=h.root;zip_bd=h.m;if(zip_bd==0&&nl>257){return -1;}if(h.status==1){}if(h.status!=0){return -1;}return zip_inflate_codes(buff,off,size);};var zip_inflate_start=function(){var i;if(zip_slide==null){zip_slide=new Array(2*zip_WSIZE);}zip_wp=0;zip_bit_buf=0;zip_bit_len=0;zip_method=-1;zip_eof=false;zip_copy_leng=zip_copy_dist=0;zip_tl=null;};var zip_inflate_internal=function(buff,off,size){var n,i;n=0;while(n<size){if(zip_eof&&zip_method==-1){return n;}if(zip_copy_leng>0){if(zip_method!=zip_STORED_BLOCK){while(zip_copy_leng>0&&n<size){zip_copy_leng--;zip_copy_dist&=zip_WSIZE-1;zip_wp&=zip_WSIZE-1;buff[off+n++]=zip_slide[zip_wp++]=zip_slide[zip_copy_dist++];}}else{while(zip_copy_leng>0&&n<size){zip_copy_leng--;zip_wp&=zip_WSIZE-1;zip_NEEDBITS(8);buff[off+n++]=zip_slide[zip_wp++]=zip_GETBITS(8);zip_DUMPBITS(8);}if(zip_copy_leng==0){zip_method=-1;}}if(n==size){return n;}}if(zip_method==-1){if(zip_eof){break;}zip_NEEDBITS(1);if(zip_GETBITS(1)!=0){zip_eof=true;}zip_DUMPBITS(1);zip_NEEDBITS(2);zip_method=zip_GETBITS(2);zip_DUMPBITS(2);zip_tl=null;zip_copy_leng=0;}switch(zip_method){case 0:i=zip_inflate_stored(buff,off+n,size-n);break;case 1:if(zip_tl!=null){i=zip_inflate_codes(buff,off+n,size-n);}else{i=zip_inflate_fixed(buff,off+n,size-n);}break;case 2:if(zip_tl!=null){i=zip_inflate_codes(buff,off+n,size-n);}else{i=zip_inflate_dynamic(buff,off+n,size-n);}break;default:i=-1;break;}if(i==-1){if(zip_eof){return 0;}return -1;}n+=i;}return n;};var zip_inflate=function(str){var i,j;zip_inflate_start();zip_inflate_data=str;zip_inflate_pos=0;var buff=new Array(1024);var aout=[];while((i=zip_inflate_internal(buff,0,buff.length))>0){var cbuf=new Array(i);for(j=0;j<i;j++){cbuf[j]=String.fromCharCode(buff[j]);}aout[aout.length]=cbuf.join("");}zip_inflate_data=null;return aout.join("");};if(!window.RawDeflate){RawDeflate={};}RawDeflate.inflate=zip_inflate;})();"use strict";var sjcl={cipher:{},hash:{},keyexchange:{},mode:{},misc:{},codec:{},exception:{corrupt:function(a){this.toString=function(){return"CORRUPT: "+this.message;};this.message=a;},invalid:function(a){this.toString=function(){return"INVALID: "+this.message;};this.message=a;},bug:function(a){this.toString=function(){return"BUG: "+this.message;};this.message=a;},notReady:function(a){this.toString=function(){return"NOT READY: "+this.message;};this.message=a;}}};if(typeof module!="undefined"&&module.exports){module.exports=sjcl;}sjcl.cipher.aes=function(a){this.i[0][0][0]||this.B();var b,c,d,e,f=this.i[0][4],g=this.i[1];b=a.length;var h=1;if(b!==4&&b!==6&&b!==8){throw new sjcl.exception.invalid("invalid aes key size");}this.a=[d=a.slice(0),e=[]];for(a=b;a<4*b+28;a++){c=d[a-1];if(a%b===0||b===8&&a%b===4){c=f[c>>>24]<<24^f[c>>16&255]<<16^f[c>>8&255]<<8^f[c&255];if(a%b===0){c=c<<8^c>>>24^h<<24;h=h<<1^(h>>7)*283;}}d[a]=d[a-b]^c;}for(b=0;a;b++,a--){c=d[b&3?a:a-4];e[b]=a<=4||b<4?c:g[0][f[c>>>24]]^g[1][f[c>>16&255]]^g[2][f[c>>8&255]]^g[3][f[c&255]];}};sjcl.cipher.aes.prototype={encrypt:function(a){return this.K(a,0);},decrypt:function(a){return this.K(a,1);},i:[[[],[],[],[],[]],[[],[],[],[],[]]],B:function(){var a=this.i[0],b=this.i[1],c=a[4],d=b[4],e,f,g,h=[],i=[],j,k,l,m;for(e=0;e<256;e++){i[(h[e]=e<<1^(e>>7)*283)^e]=e;}for(f=g=0;!c[f];f^=j||1,g=i[g]||1){l=g^g<<1^g<<2^g<<3^g<<4;l=l>>8^l&255^99;c[f]=l;d[l]=f;k=h[e=h[j=h[f]]];m=k*16843009^e*65537^j*257^f*16843008;k=h[l]*257^l*16843008;for(e=0;e<4;e++){a[e][f]=k=k<<24^k>>>8;b[e][l]=m=m<<24^m>>>8;}}for(e=0;e<5;e++){a[e]=a[e].slice(0);b[e]=b[e].slice(0);}},K:function(a,b){if(a.length!==4){throw new sjcl.exception.invalid("invalid aes block size");}var c=this.a[b],d=a[0]^c[0],e=a[b?3:1]^c[1],f=a[2]^c[2];a=a[b?1:3]^c[3];var g,h,i,j=c.length/4-2,k,l=4,m=[0,0,0,0];g=this.i[b];var n=g[0],o=g[1],p=g[2],q=g[3],r=g[4];for(k=0;k<j;k++){g=n[d>>>24]^o[e>>16&255]^p[f>>8&255]^q[a&255]^c[l];h=n[e>>>24]^o[f>>16&255]^p[a>>8&255]^q[d&255]^c[l+1];i=n[f>>>24]^o[a>>16&255]^p[d>>8&255]^q[e&255]^c[l+2];a=n[a>>>24]^o[d>>16&255]^p[e>>8&255]^q[f&255]^c[l+3];l+=4;d=g;e=h;f=i;}for(k=0;k<4;k++){m[b?3&-k:k]=r[d>>>24]<<24^r[e>>16&255]<<16^r[f>>8&255]<<8^r[a&255]^c[l++];g=d;d=e;e=f;f=a;a=g;}return m;}};sjcl.bitArray={bitSlice:function(a,b,c){a=sjcl.bitArray.Q(a.slice(b/32),32-(b&31)).slice(1);return c===undefined?a:sjcl.bitArray.clamp(a,c-b);},extract:function(a,b,c){var d=Math.floor(-b-c&31);return((b+c-1^b)&-32?a[b/32|0]<<32-d^a[b/32+1|0]>>>d:a[b/32|0]>>>d)&(1<<c)-1;},concat:function(a,b){if(a.length===0||b.length===0){return a.concat(b);}var c=a[a.length-1],d=sjcl.bitArray.getPartial(c);return d===32?a.concat(b):sjcl.bitArray.Q(b,d,c|0,a.slice(0,a.length-1));},bitLength:function(a){var b=a.length;if(b===0){return 0;}return(b-1)*32+sjcl.bitArray.getPartial(a[b-1]);},clamp:function(a,b){if(a.length*32<b){return a;}a=a.slice(0,Math.ceil(b/32));var c=a.length;b&=31;if(c>0&&b){a[c-1]=sjcl.bitArray.partial(b,a[c-1]&2147483648>>b-1,1);}return a;},partial:function(a,b,c){if(a===32){return b;}return(c?b|0:b<<32-a)+a*1099511627776;},getPartial:function(a){return Math.round(a/1099511627776)||32;},equal:function(a,b){if(sjcl.bitArray.bitLength(a)!==sjcl.bitArray.bitLength(b)){return false;}var c=0,d;for(d=0;d<a.length;d++){c|=a[d]^b[d];}return c===0;},Q:function(a,b,c,d){var e;e=0;if(d===undefined){d=[];}for(;b>=32;b-=32){d.push(c);c=0;}if(b===0){return d.concat(a);}for(e=0;e<a.length;e++){d.push(c|a[e]>>>b);c=a[e]<<32-b;}e=a.length?a[a.length-1]:0;a=sjcl.bitArray.getPartial(e);d.push(sjcl.bitArray.partial(b+a&31,b+a>32?c:d.pop(),1));return d;},j:function(a,b){return[a[0]^b[0],a[1]^b[1],a[2]^b[2],a[3]^b[3]];}};sjcl.codec.utf8String={fromBits:function(a){var b="",c=sjcl.bitArray.bitLength(a),d,e;for(d=0;d<c/8;d++){if((d&3)===0){e=a[d/4];}b+=String.fromCharCode(e>>>24);e<<=8;}return decodeURIComponent(escape(b));},toBits:function(a){a=unescape(encodeURIComponent(a));var b=[],c,d=0;for(c=0;c<a.length;c++){d=d<<8|a.charCodeAt(c);if((c&3)===3){b.push(d);d=0;}}c&3&&b.push(sjcl.bitArray.partial(8*(c&3),d));return b;}};sjcl.codec.hex={fromBits:function(a){var b="",c;for(c=0;c<a.length;c++){b+=((a[c]|0)+263882790666240).toString(16).substr(4);}return b.substr(0,sjcl.bitArray.bitLength(a)/4);},toBits:function(a){var b,c=[],d;a=a.replace(/\s|0x/g,"");d=a.length;a+="00000000";for(b=0;b<a.length;b+=8){c.push(parseInt(a.substr(b,8),16)^0);}return sjcl.bitArray.clamp(c,d*4);}};sjcl.codec.base64={H:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",fromBits:function(a,b,c){var d="",e=0,f=sjcl.codec.base64.H,g=0,h=sjcl.bitArray.bitLength(a);if(c){f=f.substr(0,62)+"-_";}for(c=0;d.length*6<h;){d+=f.charAt((g^a[c]>>>e)>>>26);if(e<6){g=a[c]<<6-e;e+=26;c++;}else{g<<=6;e-=6;}}for(;d.length&3&&!b;){d+="=";}return d;},toBits:function(a,b){a=a.replace(/\s|=/g,"");var c=[],d=0,e=sjcl.codec.base64.H,f=0,g;if(b){e=e.substr(0,62)+"-_";}for(b=0;b<a.length;b++){g=e.indexOf(a.charAt(b));if(g<0){throw new sjcl.exception.invalid("this isn't base64!");}if(d>26){d-=26;c.push(f^g>>>d);f=g<<32-d;}else{d+=6;f^=g<<32-d;}}d&56&&c.push(sjcl.bitArray.partial(d&56,f,1));return c;}};sjcl.codec.base64url={fromBits:function(a){return sjcl.codec.base64.fromBits(a,1,1);},toBits:function(a){return sjcl.codec.base64.toBits(a,1);}};sjcl.hash.sha256=function(a){this.a[0]||this.B();if(a){this.p=a.p.slice(0);this.k=a.k.slice(0);this.f=a.f;}else{this.reset();}};sjcl.hash.sha256.hash=function(a){return(new sjcl.hash.sha256).update(a).finalize();};sjcl.hash.sha256.prototype={blockSize:512,reset:function(){this.p=this.O.slice(0);this.k=[];this.f=0;return this;},update:function(a){if(typeof a==="string"){a=sjcl.codec.utf8String.toBits(a);}var b,c=this.k=sjcl.bitArray.concat(this.k,a);b=this.f;a=this.f=b+sjcl.bitArray.bitLength(a);for(b=512+b&-512;b<=a;b+=512){this.G(c.splice(0,16));}return this;},finalize:function(){var a,b=this.k,c=this.p;b=sjcl.bitArray.concat(b,[sjcl.bitArray.partial(1,1)]);for(a=b.length+2;a&15;a++){b.push(0);}b.push(Math.floor(this.f/4294967296));for(b.push(this.f|0);b.length;){this.G(b.splice(0,16));}this.reset();return c;},O:[],a:[],B:function(){function a(e){return(e-Math.floor(e))*4294967296|0;}var b=0,c=2,d;a:for(;b<64;c++){for(d=2;d*d<=c;d++){if(c%d===0){continue a;}}if(b<8){this.O[b]=a(Math.pow(c,0.5));}this.a[b]=a(Math.pow(c,1/3));b++;}},G:function(a){var b,c,d=a.slice(0),e=this.p,f=this.a,g=e[0],h=e[1],i=e[2],j=e[3],k=e[4],l=e[5],m=e[6],n=e[7];for(a=0;a<64;a++){if(a<16){b=d[a];}else{b=d[a+1&15];c=d[a+14&15];b=d[a&15]=(b>>>7^b>>>18^b>>>3^b<<25^b<<14)+(c>>>17^c>>>19^c>>>10^c<<15^c<<13)+d[a&15]+d[a+9&15]|0;}b=b+n+(k>>>6^k>>>11^k>>>25^k<<26^k<<21^k<<7)+(m^k&(l^m))+f[a];n=m;m=l;l=k;k=j+b|0;j=i;i=h;h=g;g=b+(h&i^j&(h^i))+(h>>>2^h>>>13^h>>>22^h<<30^h<<19^h<<10)|0;}e[0]=e[0]+g|0;e[1]=e[1]+h|0;e[2]=e[2]+i|0;e[3]=e[3]+j|0;e[4]=e[4]+k|0;e[5]=e[5]+l|0;e[6]=e[6]+m|0;e[7]=e[7]+n|0;}};sjcl.mode.ccm={name:"ccm",encrypt:function(a,b,c,d,e){var f,g=b.slice(0),h=sjcl.bitArray,i=h.bitLength(c)/8,j=h.bitLength(g)/8;e=e||64;d=d||[];if(i<7){throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes");}for(f=2;f<4&&j>>>8*f;f++){}if(f<15-i){f=15-i;}c=h.clamp(c,8*(15-f));b=sjcl.mode.ccm.J(a,b,c,d,e,f);g=sjcl.mode.ccm.l(a,g,c,b,e,f);return h.concat(g.data,g.tag);},decrypt:function(a,b,c,d,e){e=e||64;d=d||[];var f=sjcl.bitArray,g=f.bitLength(c)/8,h=f.bitLength(b),i=f.clamp(b,h-e),j=f.bitSlice(b,h-e);h=(h-e)/8;if(g<7){throw new sjcl.exception.invalid("ccm: iv must be at least 7 bytes");}for(b=2;b<4&&h>>>8*b;b++){}if(b<15-g){b=15-g;}c=f.clamp(c,8*(15-b));i=sjcl.mode.ccm.l(a,i,c,j,e,b);a=sjcl.mode.ccm.J(a,i.data,c,d,e,b);if(!f.equal(i.tag,a)){throw new sjcl.exception.corrupt("ccm: tag doesn't match");}return i.data;},J:function(a,b,c,d,e,f){var g=[],h=sjcl.bitArray,i=h.j;e/=8;if(e%2||e<4||e>16){throw new sjcl.exception.invalid("ccm: invalid tag length");}if(d.length>4294967295||b.length>4294967295){throw new sjcl.exception.bug("ccm: can't deal with 4GiB or more data");}f=[h.partial(8,(d.length?64:0)|e-2<<2|f-1)];f=h.concat(f,c);f[3]|=h.bitLength(b)/8;f=a.encrypt(f);if(d.length){c=h.bitLength(d)/8;if(c<=65279){g=[h.partial(16,c)];}else{if(c<=4294967295){g=h.concat([h.partial(16,65534)],[c]);}}g=h.concat(g,d);for(d=0;d<g.length;d+=4){f=a.encrypt(i(f,g.slice(d,d+4).concat([0,0,0])));}}for(d=0;d<b.length;d+=4){f=a.encrypt(i(f,b.slice(d,d+4).concat([0,0,0])));}return h.clamp(f,e*8);},l:function(a,b,c,d,e,f){var g,h=sjcl.bitArray;g=h.j;var i=b.length,j=h.bitLength(b);c=h.concat([h.partial(8,f-1)],c).concat([0,0,0]).slice(0,4);d=h.bitSlice(g(d,a.encrypt(c)),0,e);if(!i){return{tag:d,data:[]};}for(g=0;g<i;g+=4){c[3]++;e=a.encrypt(c);b[g]^=e[0];b[g+1]^=e[1];b[g+2]^=e[2];b[g+3]^=e[3];}return{tag:d,data:h.clamp(b,j)};}};sjcl.mode.ocb2={name:"ocb2",encrypt:function(a,b,c,d,e,f){if(sjcl.bitArray.bitLength(c)!==128){throw new sjcl.exception.invalid("ocb iv must be 128 bits");}var g,h=sjcl.mode.ocb2.D,i=sjcl.bitArray,j=i.j,k=[0,0,0,0];c=h(a.encrypt(c));var l,m=[];d=d||[];e=e||64;for(g=0;g+4<b.length;g+=4){l=b.slice(g,g+4);k=j(k,l);m=m.concat(j(c,a.encrypt(j(c,l))));c=h(c);}l=b.slice(g);b=i.bitLength(l);g=a.encrypt(j(c,[0,0,0,b]));l=i.clamp(j(l.concat([0,0,0]),g),b);k=j(k,j(l.concat([0,0,0]),g));k=a.encrypt(j(k,j(c,h(c))));if(d.length){k=j(k,f?d:sjcl.mode.ocb2.pmac(a,d));}return m.concat(i.concat(l,i.clamp(k,e)));},decrypt:function(a,b,c,d,e,f){if(sjcl.bitArray.bitLength(c)!==128){throw new sjcl.exception.invalid("ocb iv must be 128 bits");}e=e||64;var g=sjcl.mode.ocb2.D,h=sjcl.bitArray,i=h.j,j=[0,0,0,0],k=g(a.encrypt(c)),l,m,n=sjcl.bitArray.bitLength(b)-e,o=[];d=d||[];for(c=0;c+4<n/32;c+=4){l=i(k,a.decrypt(i(k,b.slice(c,c+4))));j=i(j,l);o=o.concat(l);k=g(k);}m=n-c*32;l=a.encrypt(i(k,[0,0,0,m]));l=i(l,h.clamp(b.slice(c),m).concat([0,0,0]));j=i(j,l);j=a.encrypt(i(j,i(k,g(k))));if(d.length){j=i(j,f?d:sjcl.mode.ocb2.pmac(a,d));}if(!h.equal(h.clamp(j,e),h.bitSlice(b,n))){throw new sjcl.exception.corrupt("ocb: tag doesn't match");}return o.concat(h.clamp(l,m));},pmac:function(a,b){var c,d=sjcl.mode.ocb2.D,e=sjcl.bitArray,f=e.j,g=[0,0,0,0],h=a.encrypt([0,0,0,0]);h=f(h,d(d(h)));for(c=0;c+4<b.length;c+=4){h=d(h);g=f(g,a.encrypt(f(h,b.slice(c,c+4))));}b=b.slice(c);if(e.bitLength(b)<128){h=f(h,d(h));b=e.concat(b,[2147483648|0,0,0,0]);}g=f(g,b);return a.encrypt(f(d(f(h,d(h))),g));},D:function(a){return[a[0]<<1^a[1]>>>31,a[1]<<1^a[2]>>>31,a[2]<<1^a[3]>>>31,a[3]<<1^(a[0]>>>31)*135];}};sjcl.mode.gcm={name:"gcm",encrypt:function(a,b,c,d,e){var f=b.slice(0);b=sjcl.bitArray;e=e||128;d=d||[];a=sjcl.mode.gcm.l(true,a,f,d,c,e);return b.concat(a.data,a.tag);},decrypt:function(a,b,c,d,e){var f=b.slice(0),g=sjcl.bitArray,h=g.bitLength(f);e=e||128;d=d||[];if(e<=h){b=g.bitSlice(f,h-e);f=g.bitSlice(f,0,h-e);}else{b=f;f=[];}a=sjcl.mode.gcm.l(false,a,f,d,c,e);if(!g.equal(a.tag,b)){throw new sjcl.exception.corrupt("gcm: tag doesn't match");}return a.data;},T:function(a,b){var c,d,e,f,g=sjcl.bitArray.j;d=[0,0,0,0];e=b.slice(0);for(b=0;b<128;b++){if(c=(a[Math.floor(b/32)]&1<<31-b%32)!==0){d=g(d,e);}f=(e[3]&1)!==0;for(c=3;c>0;c--){e[c]=e[c]>>>1|(e[c-1]&1)<<31;}e[0]>>>=1;if(f){e[0]^=-520093696;}}return d;},e:function(a,b,c){var d,e=c.length;b=b.slice(0);for(d=0;d<e;d+=4){b[0]^=4294967295&c[d];b[1]^=4294967295&c[d+1];b[2]^=4294967295&c[d+2];b[3]^=4294967295&c[d+3];b=sjcl.mode.gcm.T(b,a);}return b;},l:function(a,b,c,d,e,f){var g,h,i,j,k,l,m,n,o=sjcl.bitArray;l=c.length;m=o.bitLength(c);n=o.bitLength(d);h=o.bitLength(e);g=b.encrypt([0,0,0,0]);if(h===96){e=e.slice(0);e=o.concat(e,[1]);}else{e=sjcl.mode.gcm.e(g,[0,0,0,0],e);e=sjcl.mode.gcm.e(g,e,[0,0,Math.floor(h/4294967296),h&4294967295]);}h=sjcl.mode.gcm.e(g,[0,0,0,0],d);k=e.slice(0);d=h.slice(0);a||(d=sjcl.mode.gcm.e(g,h,c));for(j=0;j<l;j+=4){k[3]++;i=b.encrypt(k);c[j]^=i[0];c[j+1]^=i[1];c[j+2]^=i[2];c[j+3]^=i[3];}c=o.clamp(c,m);if(a){d=sjcl.mode.gcm.e(g,h,c);}a=[Math.floor(n/4294967296),n&4294967295,Math.floor(m/4294967296),m&4294967295];d=sjcl.mode.gcm.e(g,d,a);i=b.encrypt(e);d[0]^=i[0];d[1]^=i[1];d[2]^=i[2];d[3]^=i[3];return{tag:o.bitSlice(d,0,f),data:c};}};sjcl.misc.hmac=function(a,b){this.N=b=b||sjcl.hash.sha256;var c=[[],[]],d=b.prototype.blockSize/32;this.n=[new b,new b];if(a.length>d){a=b.hash(a);}for(b=0;b<d;b++){c[0][b]=a[b]^909522486;c[1][b]=a[b]^1549556828;}this.n[0].update(c[0]);this.n[1].update(c[1]);};sjcl.misc.hmac.prototype.encrypt=sjcl.misc.hmac.prototype.mac=function(a){a=(new this.N(this.n[0])).update(a).finalize();return(new this.N(this.n[1])).update(a).finalize();};sjcl.misc.pbkdf2=function(a,b,c,d,e){c=c||1000;if(d<0||c<0){throw sjcl.exception.invalid("invalid params to pbkdf2");}if(typeof a==="string"){a=sjcl.codec.utf8String.toBits(a);}e=e||sjcl.misc.hmac;a=new e(a);var f,g,h,i,j=[],k=sjcl.bitArray;for(i=1;32*j.length<(d||1);i++){e=f=a.encrypt(k.concat(b,[i]));for(g=1;g<c;g++){f=a.encrypt(f);for(h=0;h<f.length;h++){e[h]^=f[h];}}j=j.concat(e);}if(d){j=k.clamp(j,d);}return j;};sjcl.random={randomWords:function(a,b){var c=[];b=this.isReady(b);var d;if(b===0){throw new sjcl.exception.notReady("generator isn't seeded");}else{b&2&&this.W(!(b&1));}for(b=0;b<a;b+=4){(b+1)%65536===0&&this.M();d=this.A();c.push(d[0],d[1],d[2],d[3]);}this.M();return c.slice(0,a);},setDefaultParanoia:function(a){this.w=a;},addEntropy:function(a,b,c){c=c||"user";var d,e,f=(new Date).valueOf(),g=this.s[c],h=this.isReady(),i=0;d=this.I[c];if(d===undefined){d=this.I[c]=this.S++;}if(g===undefined){g=this.s[c]=0;}this.s[c]=(this.s[c]+1)%this.b.length;switch(typeof a){case"number":if(b===undefined){b=1;}this.b[g].update([d,this.z++,1,b,f,1,a|0]);break;case"object":c=Object.prototype.toString.call(a);if(c==="[object Uint32Array]"){e=[];for(c=0;c<a.length;c++){e.push(a[c]);}a=e;}else{if(c!=="[object Array]"){i=1;}for(c=0;c<a.length&&!i;c++){if(typeof a[c]!="number"){i=1;}}}if(!i){if(b===undefined){for(c=b=0;c<a.length;c++){for(e=a[c];e>0;){b++;e>>>=1;}}}this.b[g].update([d,this.z++,2,b,f,a.length].concat(a));}break;case"string":if(b===undefined){b=a.length;}this.b[g].update([d,this.z++,3,b,f,a.length]);this.b[g].update(a);break;default:i=1;}if(i){throw new sjcl.exception.bug("random: addEntropy only supports number, array of numbers or string");}this.m[g]+=b;this.g+=b;if(h===0){this.isReady()!==0&&this.L("seeded",Math.max(this.h,this.g));this.L("progress",this.getProgress());}},isReady:function(a){a=this.F[a!==undefined?a:this.w];return this.h&&this.h>=a?this.m[0]>80&&(new Date).valueOf()>this.P?3:1:this.g>=a?2:0;},getProgress:function(a){a=this.F[a?a:this.w];return this.h>=a?1:this.g>a?1:this.g/a;},startCollectors:function(){if(!this.o){if(window.addEventListener){window.addEventListener("load",this.q,false);window.addEventListener("mousemove",this.r,false);}else{if(document.attachEvent){document.attachEvent("onload",this.q);document.attachEvent("onmousemove",this.r);}else{throw new sjcl.exception.bug("can't attach event");}}this.o=true;}},stopCollectors:function(){if(this.o){if(window.removeEventListener){window.removeEventListener("load",this.q,false);window.removeEventListener("mousemove",this.r,false);}else{if(window.detachEvent){window.detachEvent("onload",this.q);window.detachEvent("onmousemove",this.r);}}this.o=false;}},addEventListener:function(a,b){this.t[a][this.R++]=b;},removeEventListener:function(a,b){var c;a=this.t[a];var d=[];for(c in a){a.hasOwnProperty(c)&&a[c]===b&&d.push(c);}for(b=0;b<d.length;b++){c=d[b];delete a[c];}},b:[new sjcl.hash.sha256],m:[0],C:0,s:{},z:0,I:{},S:0,h:0,g:0,P:0,a:[0,0,0,0,0,0,0,0],d:[0,0,0,0],u:undefined,w:6,o:false,t:{progress:{},seeded:{}},R:0,F:[0,48,64,96,128,192,256,384,512,768,1024],A:function(){for(var a=0;a<4;a++){this.d[a]=this.d[a]+1|0;if(this.d[a]){break;}}return this.u.encrypt(this.d);},M:function(){this.a=this.A().concat(this.A());this.u=new sjcl.cipher.aes(this.a);},V:function(a){this.a=sjcl.hash.sha256.hash(this.a.concat(a));this.u=new sjcl.cipher.aes(this.a);for(a=0;a<4;a++){this.d[a]=this.d[a]+1|0;if(this.d[a]){break;}}},W:function(a){var b=[],c=0,d;this.P=b[0]=(new Date).valueOf()+30000;for(d=0;d<16;d++){b.push(Math.random()*4294967296|0);}for(d=0;d<this.b.length;d++){b=b.concat(this.b[d].finalize());c+=this.m[d];this.m[d]=0;if(!a&&this.C&1<<d){break;}}if(this.C>=1<<this.b.length){this.b.push(new sjcl.hash.sha256);this.m.push(0);}this.g-=c;if(c>this.h){this.h=c;}this.C++;this.V(b);},r:function(a){sjcl.random.addEntropy([a.x||a.clientX||a.offsetX||0,a.y||a.clientY||a.offsetY||0],2,"mouse");},q:function(){sjcl.random.addEntropy((new Date).valueOf(),2,"loadtime");},L:function(a,b){var c;a=sjcl.random.t[a];var d=[];for(c in a){a.hasOwnProperty(c)&&d.push(a[c]);}for(c=0;c<d.length;c++){d[c](b);}}};try{var s=new Uint32Array(32);crypto.getRandomValues(s);sjcl.random.addEntropy(s,1024,"crypto['getRandomValues']");}catch(t){}sjcl.json={defaults:{v:1,iter:1000,ks:128,ts:64,mode:"ccm",adata:"",cipher:"aes"},encrypt:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json,f=e.c({iv:sjcl.random.randomWords(4,0)},e.defaults),g;e.c(f,c);c=f.adata;if(typeof f.salt==="string"){f.salt=sjcl.codec.base64.toBits(f.salt);}if(typeof f.iv==="string"){f.iv=sjcl.codec.base64.toBits(f.iv);}if(!sjcl.mode[f.mode]||!sjcl.cipher[f.cipher]||typeof a==="string"&&f.iter<=100||f.ts!==64&&f.ts!==96&&f.ts!==128||f.ks!==128&&f.ks!==192&&f.ks!==256||f.iv.length<2||f.iv.length>4){throw new sjcl.exception.invalid("json encrypt: invalid parameters");}if(typeof a==="string"){g=sjcl.misc.cachedPbkdf2(a,f);a=g.key.slice(0,f.ks/32);f.salt=g.salt;}if(typeof b==="string"){b=sjcl.codec.utf8String.toBits(b);}if(typeof c==="string"){c=sjcl.codec.utf8String.toBits(c);}g=new sjcl.cipher[f.cipher](a);e.c(d,f);d.key=a;f.ct=sjcl.mode[f.mode].encrypt(g,b,f.iv,c,f.ts);return e.encode(f);},decrypt:function(a,b,c,d){c=c||{};d=d||{};var e=sjcl.json;b=e.c(e.c(e.c({},e.defaults),e.decode(b)),c,true);var f;c=b.adata;if(typeof b.salt==="string"){b.salt=sjcl.codec.base64.toBits(b.salt);}if(typeof b.iv==="string"){b.iv=sjcl.codec.base64.toBits(b.iv);}if(!sjcl.mode[b.mode]||!sjcl.cipher[b.cipher]||typeof a==="string"&&b.iter<=100||b.ts!==64&&b.ts!==96&&b.ts!==128||b.ks!==128&&b.ks!==192&&b.ks!==256||!b.iv||b.iv.length<2||b.iv.length>4){throw new sjcl.exception.invalid("json decrypt: invalid parameters");}if(typeof a==="string"){f=sjcl.misc.cachedPbkdf2(a,b);a=f.key.slice(0,b.ks/32);b.salt=f.salt;}if(typeof c==="string"){c=sjcl.codec.utf8String.toBits(c);}f=new sjcl.cipher[b.cipher](a);c=sjcl.mode[b.mode].decrypt(f,b.ct,b.iv,c,b.ts);e.c(d,b);d.key=a;return sjcl.codec.utf8String.fromBits(c);},encode:function(a){var b,c="{",d="";for(b in a){if(a.hasOwnProperty(b)){if(!b.match(/^[a-z0-9]+$/i)){throw new sjcl.exception.invalid("json encode: invalid property name");}c+=d+'"'+b+'":';d=",";switch(typeof a[b]){case"number":case"boolean":c+=a[b];break;case"string":c+='"'+escape(a[b])+'"';break;case"object":c+='"'+sjcl.codec.base64.fromBits(a[b],0)+'"';break;default:throw new sjcl.exception.bug("json encode: unsupported type");}}}return c+"}";},decode:function(a){a=a.replace(/\s/g,"");if(!a.match(/^\{.*\}$/)){throw new sjcl.exception.invalid("json decode: this isn't json!");}a=a.replace(/^\{|\}$/g,"").split(/,/);var b={},c,d;for(c=0;c<a.length;c++){if(!(d=a[c].match(/^(?:(["']?)([a-z][a-z0-9]*)\1):(?:(\d+)|"([a-z0-9+\/%*_.@=\-]*)")$/i))){throw new sjcl.exception.invalid("json decode: this isn't json!");}b[d[2]]=d[3]?parseInt(d[3],10):d[2].match(/^(ct|salt|iv)$/)?sjcl.codec.base64.toBits(d[4]):unescape(d[4]);}return b;},c:function(a,b,c){if(a===undefined){a={};}if(b===undefined){return a;}var d;for(d in b){if(b.hasOwnProperty(d)){if(c&&a[d]!==undefined&&a[d]!==b[d]){throw new sjcl.exception.invalid("required parameter overridden");}a[d]=b[d];}}return a;},Y:function(a,b){var c={},d;for(d in a){if(a.hasOwnProperty(d)&&a[d]!==b[d]){c[d]=a[d];}}return c;},X:function(a,b){var c={},d;for(d=0;d<b.length;d++){if(a[b[d]]!==undefined){c[b[d]]=a[b[d]];}}return c;}};sjcl.encrypt=sjcl.json.encrypt;sjcl.decrypt=sjcl.json.decrypt;sjcl.misc.U={};sjcl.misc.cachedPbkdf2=function(a,b){var c=sjcl.misc.U,d;b=b||{};d=b.iter||1000;c=c[a]=c[a]||{};d=c[d]=c[d]||{firstSalt:b.salt&&b.salt.length?b.salt.slice(0):sjcl.random.randomWords(2,0)};c=b.salt===undefined?d.firstSalt:b.salt;d[c]=d[c]||sjcl.misc.pbkdf2(a,c,b.iter);return{key:d[c].slice(0),salt:c.slice(0)};};var hexcase=0;var b64pad="";function hex_md5(a){return rstr2hex(rstr_md5(str2rstr_utf8(a)));}function rstr_md5(a){return binl2rstr(binl_md5(rstr2binl(a),a.length*8));}function rstr2hex(c){try{hexcase;}catch(g){hexcase=0;}var f=hexcase?"0123456789ABCDEF":"0123456789abcdef";var b="";var a;for(var d=0;d<c.length;d++){a=c.charCodeAt(d);b+=f.charAt((a>>>4)&15)+f.charAt(a&15);}return b;}function str2rstr_utf8(c){var b="";var d=-1;var a,e;while(++d<c.length){a=c.charCodeAt(d);e=d+1<c.length?c.charCodeAt(d+1):0;if(55296<=a&&a<=56319&&56320<=e&&e<=57343){a=65536+((a&1023)<<10)+(e&1023);d++;}if(a<=127){b+=String.fromCharCode(a);}else{if(a<=2047){b+=String.fromCharCode(192|((a>>>6)&31),128|(a&63));}else{if(a<=65535){b+=String.fromCharCode(224|((a>>>12)&15),128|((a>>>6)&63),128|(a&63));}else{if(a<=2097151){b+=String.fromCharCode(240|((a>>>18)&7),128|((a>>>12)&63),128|((a>>>6)&63),128|(a&63));}}}}}return b;}function rstr2binl(b){var a=Array(b.length>>2);for(var c=0;c<a.length;c++){a[c]=0;}for(var c=0;c<b.length*8;c+=8){a[c>>5]|=(b.charCodeAt(c/8)&255)<<(c%32);}return a;}function binl2rstr(b){var a="";for(var c=0;c<b.length*32;c+=8){a+=String.fromCharCode((b[c>>5]>>>(c%32))&255);}return a;}function binl_md5(p,k){p[k>>5]|=128<<((k)%32);p[(((k+64)>>>9)<<4)+14]=k;var o=1732584193;var n=-271733879;var m=-1732584194;var l=271733878;for(var g=0;g<p.length;g+=16){var j=o;var h=n;var f=m;var e=l;o=md5_ff(o,n,m,l,p[g+0],7,-680876936);l=md5_ff(l,o,n,m,p[g+1],12,-389564586);m=md5_ff(m,l,o,n,p[g+2],17,606105819);n=md5_ff(n,m,l,o,p[g+3],22,-1044525330);o=md5_ff(o,n,m,l,p[g+4],7,-176418897);l=md5_ff(l,o,n,m,p[g+5],12,1200080426);m=md5_ff(m,l,o,n,p[g+6],17,-1473231341);n=md5_ff(n,m,l,o,p[g+7],22,-45705983);o=md5_ff(o,n,m,l,p[g+8],7,1770035416);l=md5_ff(l,o,n,m,p[g+9],12,-1958414417);m=md5_ff(m,l,o,n,p[g+10],17,-42063);n=md5_ff(n,m,l,o,p[g+11],22,-1990404162);o=md5_ff(o,n,m,l,p[g+12],7,1804603682);l=md5_ff(l,o,n,m,p[g+13],12,-40341101);m=md5_ff(m,l,o,n,p[g+14],17,-1502002290);n=md5_ff(n,m,l,o,p[g+15],22,1236535329);o=md5_gg(o,n,m,l,p[g+1],5,-165796510);l=md5_gg(l,o,n,m,p[g+6],9,-1069501632);m=md5_gg(m,l,o,n,p[g+11],14,643717713);n=md5_gg(n,m,l,o,p[g+0],20,-373897302);o=md5_gg(o,n,m,l,p[g+5],5,-701558691);l=md5_gg(l,o,n,m,p[g+10],9,38016083);m=md5_gg(m,l,o,n,p[g+15],14,-660478335);n=md5_gg(n,m,l,o,p[g+4],20,-405537848);o=md5_gg(o,n,m,l,p[g+9],5,568446438);l=md5_gg(l,o,n,m,p[g+14],9,-1019803690);m=md5_gg(m,l,o,n,p[g+3],14,-187363961);n=md5_gg(n,m,l,o,p[g+8],20,1163531501);o=md5_gg(o,n,m,l,p[g+13],5,-1444681467);l=md5_gg(l,o,n,m,p[g+2],9,-51403784);m=md5_gg(m,l,o,n,p[g+7],14,1735328473);n=md5_gg(n,m,l,o,p[g+12],20,-1926607734);o=md5_hh(o,n,m,l,p[g+5],4,-378558);l=md5_hh(l,o,n,m,p[g+8],11,-2022574463);m=md5_hh(m,l,o,n,p[g+11],16,1839030562);n=md5_hh(n,m,l,o,p[g+14],23,-35309556);o=md5_hh(o,n,m,l,p[g+1],4,-1530992060);l=md5_hh(l,o,n,m,p[g+4],11,1272893353);m=md5_hh(m,l,o,n,p[g+7],16,-155497632);n=md5_hh(n,m,l,o,p[g+10],23,-1094730640);o=md5_hh(o,n,m,l,p[g+13],4,681279174);l=md5_hh(l,o,n,m,p[g+0],11,-358537222);m=md5_hh(m,l,o,n,p[g+3],16,-722521979);n=md5_hh(n,m,l,o,p[g+6],23,76029189);o=md5_hh(o,n,m,l,p[g+9],4,-640364487);l=md5_hh(l,o,n,m,p[g+12],11,-421815835);m=md5_hh(m,l,o,n,p[g+15],16,530742520);n=md5_hh(n,m,l,o,p[g+2],23,-995338651);o=md5_ii(o,n,m,l,p[g+0],6,-198630844);l=md5_ii(l,o,n,m,p[g+7],10,1126891415);m=md5_ii(m,l,o,n,p[g+14],15,-1416354905);n=md5_ii(n,m,l,o,p[g+5],21,-57434055);o=md5_ii(o,n,m,l,p[g+12],6,1700485571);l=md5_ii(l,o,n,m,p[g+3],10,-1894986606);m=md5_ii(m,l,o,n,p[g+10],15,-1051523);n=md5_ii(n,m,l,o,p[g+1],21,-2054922799);o=md5_ii(o,n,m,l,p[g+8],6,1873313359);l=md5_ii(l,o,n,m,p[g+15],10,-30611744);m=md5_ii(m,l,o,n,p[g+6],15,-1560198380);n=md5_ii(n,m,l,o,p[g+13],21,1309151649);o=md5_ii(o,n,m,l,p[g+4],6,-145523070);l=md5_ii(l,o,n,m,p[g+11],10,-1120210379);m=md5_ii(m,l,o,n,p[g+2],15,718787259);n=md5_ii(n,m,l,o,p[g+9],21,-343485551);o=safe_add(o,j);n=safe_add(n,h);m=safe_add(m,f);l=safe_add(l,e);}return Array(o,n,m,l);}function md5_cmn(h,e,d,c,g,f){return safe_add(bit_rol(safe_add(safe_add(e,h),safe_add(c,f)),g),d);}function md5_ff(g,f,k,j,e,i,h){return md5_cmn((f&k)|((~f)&j),g,f,e,i,h);}function md5_gg(g,f,k,j,e,i,h){return md5_cmn((f&j)|(k&(~j)),g,f,e,i,h);}function md5_hh(g,f,k,j,e,i,h){return md5_cmn(f^k^j,g,f,e,i,h);}function md5_ii(g,f,k,j,e,i,h){return md5_cmn(k^(f|(~j)),g,f,e,i,h);}function safe_add(a,d){var c=(a&65535)+(d&65535);var b=(a>>16)+(d>>16)+(c>>16);return(b<<16)|(c&65535);}function bit_rol(a,b){return(a<<b)|(a>>>(32-b));}function hex_sha1(a){return rstr2hex(rstr_sha1(str2rstr_utf8(a)));}function rstr_sha1(a){return binb2rstr(binb_sha1(rstr2binb(a),a.length*8));}function rstr2binb(b){var a=Array(b.length>>2);for(var c=0;c<a.length;c++){a[c]=0;}for(var c=0;c<b.length*8;c+=8){a[c>>5]|=(b.charCodeAt(c/8)&255)<<(24-c%32);}return a;}function binb2rstr(b){var a="";for(var c=0;c<b.length*32;c+=8){a+=String.fromCharCode((b[c>>5]>>>(24-c%32))&255);}return a;}function binb_sha1(v,o){v[o>>5]|=128<<(24-o%32);v[((o+64>>9)<<4)+15]=o;var y=Array(80);var u=1732584193;var s=-271733879;var r=-1732584194;var q=271733878;var p=-1009589776;for(var l=0;l<v.length;l+=16){var n=u;var m=s;var k=r;var h=q;var f=p;for(var g=0;g<80;g++){if(g<16){y[g]=v[l+g];}else{y[g]=bit_rol(y[g-3]^y[g-8]^y[g-14]^y[g-16],1);}var z=safe_add(safe_add(bit_rol(u,5),sha1_ft(g,s,r,q)),safe_add(safe_add(p,y[g]),sha1_kt(g)));p=q;q=r;r=bit_rol(s,30);s=u;u=z;}u=safe_add(u,n);s=safe_add(s,m);r=safe_add(r,k);q=safe_add(q,h);p=safe_add(p,f);}return Array(u,s,r,q,p);}function sha1_ft(e,a,g,f){if(e<20){return(a&g)|((~a)&f);}if(e<40){return a^g^f;}if(e<60){return(a&g)|(a&f)|(g&f);}return a^g^f;}function sha1_kt(a){return(a<20)?1518500249:(a<40)?1859775393:(a<60)?-1894007588:-899497514;}vizhash={textHash:function(d){var a={};function c(f){var e=hex_sha1(f)+hex_md5(f);return e+e.split("").reverse().join("");}function b(){var g=a.value;var e=[];for(var f=0;f<g.length;f+=2){e.push(parseInt(g.substr(f,2),16));}return e;}a.toString=function(){return a.value;};a.value=c(d);a.intArray=function(){var e={values:b(),index:0};e.next=function(){var f=e.values[e.index];e.index+=1;e.index%=e.values.length;return f;};return e;}();return a;},canvasHash:function(o,a,p){if(a>256||p>256){throw"Max image size is 256 x 256";}var g={hash:vizhash.textHash(o)},k=g.hash.intArray,f=vizhash.color(k.next(),k.next(),k.next());a=g.width=a||80;p=g.height=p||80;var c=g.canvas=vizhash.createCanvas(a,p);var b=g.context=c.getContext("2d");function n(){var r=k.next();return a*r/256;}function j(){var r=k.next();return p*r/256;}function m(t,A,w,s,H,z){var F=A-s/2,E=w-H/2,D=0.5522848;var v=(s/2)*D,r=(H/2)*D,G=F+s,C=E+H,B=F+s/2,u=E+H/2;t.beginPath();t.moveTo(F,u);t.bezierCurveTo(F,u-r,B-v,E,B,E);t.bezierCurveTo(B+v,E,G,u-r,G,u);t.bezierCurveTo(G,u+r,B+v,C,B,C);t.bezierCurveTo(B-v,C,F,u+r,F,u);t.fillStyle=z.toString();t.fill();t.closePath();}function q(t,u,r){t.beginPath();for(var s=0;s<u.length;s=s+2){t.lineTo(u[s],u[s+1]);}t.fillStyle=r.toString();t.fill();t.closePath();}function i(u,x,w,v,r,y,s,t){u.beginPath();u.arc(x,w,v/2,y,s,false);u.fillStyle=t.toString();u.fill();u.closePath();}function h(v,t,w,s,u,r){v.beginPath();v.rect(t,w,s-t,u-w);v.fillStyle=r.toString();v.fill();v.closePath();}function d(){if(k.next()%2){var r=b.createLinearGradient(0,0,0,p);}else{var r=b.createLinearGradient(0,0,a,p);}r.addColorStop(0,f.toString());r.addColorStop(1,"rgb(0,0,0)");b.rect(0,0,a,p);b.fillStyle=r;b.fill();}function l(t,s){switch(t%7){case 0:h(b,n(),j(),n(),j(),s);break;case 1:case 2:m(b,n(),j(),n(),j(),s);break;case 3:var u=[n(),j(),n(),j(),n(),j(),n(),j()];q(b,u,s);break;case 4:case 5:case 6:var v=k.next()*2*Math.PI/256;var r=v+k.next()*Math.PI/256;i(b,n(),j(),n(),j(),v,r,s);break;}}function e(){for(var t=0;t<=7;t++){var s=k.next();f.r=Math.round((f.r+k.next()/25)%256);f.g=Math.round((f.g+k.next()/25)%256);f.b=Math.round((f.b+k.next()/25)%256);l(s,f);}var r=vizhash.color(k.next(),k.next(),k.next());l(k.next(),r);}g.toImage=function(){var r=document.createElement("img");r.src=c.toDataURL("image/png");return r;};d();e();return g;},createCanvas:function(c,a){var b=document.createElement("canvas");b.width=c;b.height=a;return b;},supportCanvas:function(){var a=document.createElement("canvas");return !!(a.getContext&&a.getContext("2d"));},color:function(e,d,a){var c={r:e,g:d,b:a};c.toString=function(){return"rgb("+c.r+","+c.g+","+c.b+")";};return c;}};sjcl.random.startCollectors();function secondsToHuman(seconds){if(seconds<60){var v=Math.floor(seconds);return v+" second"+((v>1)?"s":"");}if(seconds<60*60){var v=Math.floor(seconds/60);return v+" minute"+((v>1)?"s":"");}if(seconds<60*60*24){var v=Math.floor(seconds/(60*60));return v+" hour"+((v>1)?"s":"");}if(seconds<60*60*24*60){var v=Math.floor(seconds/(60*60*24));return v+" day"+((v>1)?"s":"");}var v=Math.floor(seconds/(60*60*24*30));return v+" month"+((v>1)?"s":"");}function hashToParameterString(associativeArray){var parameterString="";for(key in associativeArray){if(parameterString===""){parameterString=encodeURIComponent(key);parameterString+="="+encodeURIComponent(associativeArray[key]);}else{parameterString+="&"+encodeURIComponent(key);parameterString+="="+encodeURIComponent(associativeArray[key]);}}parameterString+="&p=p";return parameterString;}function parameterStringToHash(parameterString){var parameterHash={};var parameterArray=parameterString.split("&");for(var i=0;i<parameterArray.length;i++){var pair=parameterArray[i].split("=");var key=decodeURIComponent(pair[0]);var value=decodeURIComponent(pair[1]);parameterHash[key]=value;}return parameterHash;}function getParameterHash(){var hashIndex=window.location.href.indexOf("#");if(hashIndex>=0){return parameterStringToHash(window.location.href.substring(hashIndex+1));}else{return{};}}function compress(message){return Base64.toBase64(RawDeflate.deflate(Base64.utob(message)));}function decompress(data){return Base64.btou(RawDeflate.inflate(Base64.fromBase64(data)));}function zeroCipher(key,message){return sjcl.encrypt(key,compress(message));}function zeroDecipher(key,data){return decompress(sjcl.decrypt(key,data));}function scriptLocation(){var scriptLocation=window.location.href.substring(0,window.location.href.length-window.location.search.length-window.location.hash.length);var hashIndex=scriptLocation.indexOf("#");if(hashIndex!==-1){scriptLocation=scriptLocation.substring(0,hashIndex);}return scriptLocation;}function pasteID(){return window.location.search.substring(1);}function htmlEntities(str){return String(str).replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/"/g,"&quot;");}function setElementText(element,text){if($("div#oldienotice").is(":visible")){var html=htmlEntities(text).replace(/\n/ig,"\r\n<br>");element.html("<pre>"+html+"</pre>");}else{element.text(text);}}function applySyntaxColoring(){if($("div#cleartext").html().substring(0,11)!="<pre><code>"){$("div#cleartext").html("<pre><code>"+$("div#cleartext").html()+"</code></pre>");}hljs.highlightBlock(document.getElementById("cleartext"));$("div#cleartext").css("padding","0");}function displayMessages(key,comments){try{var cleartext=zeroDecipher(key,comments[0].data);}catch(err){$("div#cleartext").hide();$("button#clonebutton").hide();showError("Could not decrypt data (Wrong key ?)");return;}setElementText($("div#cleartext"),cleartext);urls2links($("div#cleartext"));if(comments[0].meta.syntaxcoloring){applySyntaxColoring();}if(comments[0].meta.expire_date){$("div#remainingtime").removeClass("foryoureyesonly").text("This document will expire in "+secondsToHuman(comments[0].meta.remaining_time)+".").show();}if(comments[0].meta.burnafterreading){$("div#remainingtime").addClass("foryoureyesonly").text("FOR YOUR EYES ONLY.  Don't close this window, this message can't be displayed again.").show();$("button#clonebutton").hide();}if(comments[0].meta.opendiscussion){$("div#comments").html("");for(var i=1;i<comments.length;i++){var comment=comments[i];var cleartext="[Could not decrypt comment ; Wrong key ?]";try{cleartext=zeroDecipher(key,comment.data);}catch(err){}var place=$("div#comments");var cname="div#comment_"+comment.meta.parentid;if($(cname).length){place=$(cname);}var divComment=$('<div class="comment" id="comment_'+comment.meta.commentid+'"><div class="commentmeta"><span class="nickname"></span><span class="commentdate"></span></div><div class="commentdata"></div><button onclick="open_reply($(this),\''+comment.meta.commentid+"');return false;\">Reply</button></div>");setElementText(divComment.find("div.commentdata"),cleartext);urls2links(divComment.find("div.commentdata"));divComment.find("span.nickname").html("<i>(Anonymous)</i>");try{divComment.find("span.nickname").text(zeroDecipher(key,comment.meta.nickname));}catch(err){}divComment.find("span.commentdate").text("  ("+(new Date(comment.meta.postdate*1000).toString())+")").attr("title","CommentID: "+comment.meta.commentid);if(comment.meta.vizhash){divComment.find("span.nickname").before('<img src="'+comment.meta.vizhash+'" class="vizhash" title="Anonymous avatar (Vizhash of the IP address)" />');}place.append(divComment);}$("div#comments").append('<div class="comment"><button onclick="open_reply($(this),\''+pasteID()+"');return false;\">Add comment</button></div>");$("div#discussion").show();}}function open_reply(source,commentid){$("div.reply").remove();source.after('<div class="reply"><input type="text" id="nickname" title="Optional nickname..." value="Optional nickname..." /><textarea id="replymessage" class="replymessage" cols="80" rows="7"></textarea><br><button id="replybutton" onclick="send_comment(\''+commentid+'\');return false;">Post comment</button><div id="replystatus">&nbsp;</div></div>');$("input#nickname").focus(function(){$(this).css("color","#000");if($(this).val()==$(this).attr("title")){$(this).val("");}});$("textarea#replymessage").focus();}function send_comment(parentid){if($("textarea#replymessage").val().length==0){return;}showStatus("Sending comment...",spin=true);var cipherdata=zeroCipher(pageKey(),$("textarea#replymessage").val());var ciphernickname="";var nick=$("input#nickname").val();if(nick!=""&&nick!="Optional nickname..."){ciphernickname=zeroCipher(pageKey(),nick);}var data_to_send={data:cipherdata,parentid:parentid,pasteid:pasteID(),nickname:ciphernickname};$.post(scriptLocation(),data_to_send,"json").error(function(){showError("Comment could not be sent (serveur error or not responding).");}).success(function(data){if(data.status==0){showStatus("Comment posted.");location.reload();}else{if(data.status==1){showError("Could not post comment: "+data.message);}else{showError("Could not post comment.");}}});}function send_data(){if($("textarea#message").val().length==0){return;}if(!sjcl.random.isReady()){showStatus("Sending paste (Please move your mouse for more entropy)...",spin=true);sjcl.random.addEventListener("seeded",function(){send_data();});return;}showStatus("Sending paste...",spin=true);var randomkey=sjcl.codec.base64.fromBits(sjcl.random.randomWords(8,0),0);var cipherdata=zeroCipher(randomkey,$("textarea#message").val());var data_to_send={data:cipherdata,expire:$("select#pasteExpiration").val(),burnafterreading:$("input#burnafterreading").is(":checked")?1:0,opendiscussion:$("input#opendiscussion").is(":checked")?1:0,syntaxcoloring:$("input#syntaxcoloring").is(":checked")?1:0};$.post(scriptLocation(),data_to_send,"json").error(function(){showError("Data could not be sent (serveur error or not responding).");}).success(function(data){if(data.status==0){stateExistingPaste();var url=scriptLocation()+"?"+data.id+"#"+randomkey;var deleteUrl=scriptLocation()+"?pasteid="+data.id+"&deletetoken="+data.deletetoken;showStatus("");$("div#pastelink").html('Your paste is <a id="pasteurl" href="'+url+'">'+url+'</a> <span id="copyhint">(Hit CTRL+C to copy)</span>');$("div#deletelink").html('<a href="'+deleteUrl+'">Delete link</a>');$("div#pasteresult").show();selectText("pasteurl");setElementText($("div#cleartext"),$("textarea#message").val());urls2links($("div#cleartext"));if($("input#syntaxcoloring").is(":checked")){applySyntaxColoring();}showStatus("");}else{if(data.status==1){showError("Could not create paste: "+data.message);}else{showError("Could not create paste.");}}});}function selectText(element){var doc=document,text=doc.getElementById(element),range,selection;if(doc.body.createTextRange){range=doc.body.createTextRange();range.moveToElementText(text);range.select();}else{if(window.getSelection){selection=window.getSelection();range=doc.createRange();range.selectNodeContents(text);selection.removeAllRanges();selection.addRange(range);}}}function stateNewPaste(){$("button#sendbutton").show();$("button#clonebutton").hide();$("button#rawtextbutton").hide();$("div#expiration").show();$("div#remainingtime").hide();$("div#burnafterreadingoption").show();$("div#opendisc").show();$("div#syntaxcoloringoption").show();$("button#newbutton").show();$("div#pasteresult").hide();$("textarea#message").text("");$("textarea#message").show();$("div#cleartext").hide();$("div#message").focus();$("div#discussion").hide();}function stateExistingPaste(){$("button#sendbutton").hide();if($("div#oldienotice").is(":visible")){$("button#clonebutton").hide();}else{$("button#clonebutton").show();}$("button#rawtextbutton").show();$("div#expiration").hide();$("div#burnafterreadingoption").hide();$("div#opendisc").hide();$("div#syntaxcoloringoption").hide();$("button#newbutton").show();$("div#pasteresult").hide();$("textarea#message").hide();$("div#cleartext").show();}function rawText(){history.pushState(document.title,document.title,"document.txt");var paste=$("div#cleartext").text();var newDoc=document.open("text/plain","replace");newDoc.write(paste);newDoc.close();}function clonePaste(){stateNewPaste();history.replaceState(document.title,document.title,scriptLocation());showStatus("");$("textarea#message").text($("div#cleartext").text());}function newPaste(){stateNewPaste();showStatus("");$("textarea#message").text("");}function showError(message){$("div#status").addClass("errorMessage").text(message);$("div#replystatus").addClass("errorMessage").text(message);}function showStatus(message,spin){$("div#replystatus").removeClass("errorMessage");$("div#replystatus").text(message);if(!message){$("div#status").html("&nbsp;");return;}if(message==""){$("div#status").html("&nbsp;");return;}$("div#status").removeClass("errorMessage");$("div#status").text(message);if(spin){var img='<img src="img/busy.gif" style="width:16px;height:9px;margin:0px 4px 0px 0px;" />';$("div#status").prepend(img);$("div#replystatus").prepend(img);}}function urls2links(element){var re=/((http|https|ftp):\/\/[\w?=&.\/-;#@~%+-]+(?![\w\s?&.\/;#~%"=-]*>))/ig;element.html(element.html().replace(re,'<a href="$1" rel="nofollow">$1</a>'));var re=/((magnet):[\w?=&.\/-;#@~%+-]+)/ig;element.html(element.html().replace(re,'<a href="$1">$1</a>'));}function pageKey(){var key=window.location.hash.substring(1);i=key.indexOf("=");if(i>-1){key=key.substring(0,i+1);}i=key.indexOf("&");if(i>-1){key=key.substring(0,i);}if(key.charAt(key.length-1)!=="="){key+="=";}return key;}    
+    </body>
+</html>
84 chatroom.php
@@ -0,0 +1,84 @@
+<?php
+	require 'inc/constants.php';
+	require 'inc/init.php';
+	require 'inc/functions.php';
+	require 'inc/classes.php';
+	require 'inc/dbmanager.php';
+	
+	$dbManager = new DbManager();
+
+	$chatRoom = $dbManager->GetChatroom($_GET['id']);
+?>
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8" />
+    <title>Private chat room - MyCryptoChat by HowTommy.net</title>
+    <link href="/favicon.ico" rel="shortcut icon" type="image/x-icon" />
+    <meta name="viewport" content="width=device-width" />
+    <link href="styles/myCryptoChat.css" rel="stylesheet" />
+    <script src="scripts/modernizr.js"></script>
+</head>
+<body>
+    <header>
+        <div class="content-wrapper">
+            <div class="float-left">
+                <p class="site-title"><a href="index.php">MyCryptoChat</a></p>
+            </div>
+            <div class="float-right">
+                <section id="login">
+                </section>
+                <nav>
+                    <ul id="menu">
+                        <li><a href="index.php">Home</a></li>
+                        <li><a href="stats.php">Stats</a></li>
+                        <li><a href="about.php">About</a></li>
+                    </ul>
+                </nav>
+            </div>
+        </div>
+    </header>
+    <div id="body">
+        <section class="content-wrapper main-content clear-fix">
+            <h2>MyCryptoChat</h2>
+            <div class="mb20">Chat with friends without anyone spying on what you say!</div>
+
+            <div id="chatroom"></div>
+            <div id="divUsers"><span id="nbUsers">1</span> user(s) online</div>
+
+            <div>
+                Name:
+
+    <input type="text" id="userName" /><br />
+                <textarea id="textMessage" onkeydown="if (event.keyCode == 13 && !event.shiftKey) { sendMessage(); }"></textarea><br />
+                <input type="button" value="Send" id="sendMessage" onclick="sendMessage();" /><br /><br />
+				<?php 
+					if($chatRoom->isRemovable) {
+				?>
+					<br /><div id="divButtonRemoveChatroom">
+                            <input type="button" value="Remove the chat room" onclick="removeChatroom(<?php if($chatRoom->removePassword != '') { echo 'true'; } else { echo 'false'; } ?>);" />
+                        </div>
+				<?php
+					}
+				?>
+            </div>
+        </section>
+    </div>
+    <footer>
+        <div class="content-wrapper">
+            <div class="float-left">
+                <p>&copy; 2013 - MyCryptoChat <?php echo MYCRYPTOCHAT_VERSION; ?> by HowTommy.net</p>
+            </div>
+        </div>
+    </footer>
+
+    <script src="scripts/jquery.js"></script>
+
+    <script type="text/javascript">
+        var roomId = '<?php echo htmlspecialchars($_GET['id'], ENT_QUOTES, 'UTF-8'); ?>';
+        var dateLastGetMessages = '<?php echo microtime(true) - 24*60*60*365*3; ?>';
+    </script>
+    <script type="text/javascript" src="scripts/zerobin.js"></script>
+    <script type="text/javascript" src="scripts/myCryptoChat.js"></script>
+</body>
+</html>
BIN db/chatrooms.sqlite
Binary file not shown.
1 db/logs.txt
@@ -0,0 +1 @@
+﻿
BIN favicon.ico
Binary file not shown.
68 getMessages.php
@@ -0,0 +1,68 @@
+<?php 
+require 'inc/constants.php';
+require 'inc/init.php';
+require 'inc/functions.php';
+require 'inc/classes.php';
+require 'inc/dbmanager.php';
+
+$dbManager = new DbManager();
+
+$chatRoom = $dbManager->GetChatroom($_POST['roomId']);
+$dateLastNewMessage = $_POST['dateLastGetMessages'];
+$nbIps = $_POST['nbIps'];
+
+if(!is_null($chatRoom)) {        
+    $userHash = getHashForIp();
+    $time = $_SERVER['REQUEST_TIME'];
+    
+    if($chatRoom->dateEnd != 0 && $chatRoom->dateEnd <= $time) {
+        echo 'noRoom';
+        exit;
+    }
+    
+    $currentUser = null;
+    
+    foreach($chatRoom->users as $key => $user) {
+        if(!is_null($user)) {
+            if($user['id'] == $userHash) {
+                $currentUser = $user;
+            }
+            if(!$chatRoom->noMoreThanOneVisitor && $user['dateLastSeen'] + NB_SECONDS_USER_TO_BE_DISCONNECTED < $time) {
+                unset($chatRoom->users[$key]);
+            }
+        }
+    }
+    
+    if(is_null($currentUser)) {
+        $currentUser = array();
+        $currentUser['id'] = $userHash;
+        $currentUser['dateLastSeen'] = $time;
+        array_push($chatRoom->users, $currentUser);
+    } else {
+        $currentUser['dateLastSeen'] = $time;
+    }
+    
+    if($chatRoom->noMoreThanOneVisitor && count($chatRoom->users) > 2) {
+        $dbManager->DeleteChatroom($_POST['roomId']);
+        echo 'destroyed';
+        exit;
+    }
+    
+    if($dateLastNewMessage < $chatRoom->dateLastNewMessage) {
+        $dbManager->UpdateChatRoomUsers($chatRoom);
+        $messages = $dbManager->GetLastMessages($chatRoom->id, NB_MESSAGES_TO_KEEP);
+        header('Content-Type: application/json');
+        echo '{ "dateLastGetMessages": ',$time,', "chatLines": ',json_encode($messages),', "nbIps": ',count($chatRoom->users),' }';
+        exit;
+    } else if ($nbIps != count($chatRoom->users)) {
+        $dbManager->UpdateChatRoomUsers($chatRoom);
+        header('Content-Type: application/json');
+        echo '{ "nbIps": ',count($chatRoom->users),' }';
+        exit;
+    } else {
+        echo 'noNew';
+        exit;
+    }
+}
+echo 'noRoom'; 
+?>
BIN images/accent.png
Sorry, something went wrong. Reload?
20 inc/classes.php
@@ -0,0 +1,20 @@
+<?php
+	class ChatRoom {
+		public $id;
+		public $dateCreation;
+		public $dateLastNewMessage;
+		public $users = array();
+		public $messages = array();
+		public $dateEnd;
+		public $noMoreThanOneVisitor;
+		public $isRemovable;
+		public $removePassword;
+		public $userId;
+	}
+	class ChatMessage {
+		public $message;
+		public $hash;
+		public $userId;
+		public $date;
+	}
+?>
22 inc/constants.php
@@ -0,0 +1,22 @@
+<?php
+// modify it: replace 'f-rjng24!1r5TRHHgnjrt' by some random characters
+define('SEED', 'f-rjng24!1r5TRHHgnjrt0');
+
+define('DEFAULT_NB_MINUTES_TO_LIVE', 30);
+
+// maximum lifetime for a chat room (0 = unlimited)
+define('NB_MINUTES_TO_LIVE_MAX', 0);
+
+// number of messages to keep
+define('NB_MESSAGES_TO_KEEP', 100);
+
+// number of days to delete an idle chat room
+define('DAYS_TO_DELETE_IDLE_CHATROOM', 60);
+
+define('NB_SECONDS_USER_TO_BE_DISCONNECTED', 35);
+
+define('DB_FILE_NAME', 'db/chatrooms.sqlite');
+define('LOGS_FILE_NAME', 'db/logs.txt');
+
+define('MYCRYPTOCHAT_VERSION', 'v1.0.4');
+?>
264 inc/dbmanager.php
@@ -0,0 +1,264 @@
+<?php
+class DbManager {
+    private $db;
+    
+    function DbManager() {
+        try {
+            $this->db = new PDO('sqlite:' . DB_FILE_NAME);
+            $this->db->setAttribute(PDO::ATTR_PERSISTENT, true /*, PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION*/);
+            $this->db->exec('PRAGMA temp_store = MEMORY; PRAGMA synchronous=OFF;');
+        }
+        catch (Exception $e) 
+        {
+            logException($e);
+            die('Error: database error.');
+        }
+    }
+    
+    function CreateChatroom($chatRoom) {
+        if(is_null($chatRoom)) {
+            die('Parameter error.');   
+        }
+        try {
+			$query = 'INSERT INTO ChatRoom ( Id, DateCreation, DateLastNewMessage, ConnectedUsers, DateEnd, NoMoreThanOneVisitor, IsRemovable, RemovePassword, UserHash )';
+			$query .= ' VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)';
+			
+			$req = $this->db->prepare($query);
+
+			$req->execute(array($chatRoom->id, $chatRoom->dateCreation, $chatRoom->dateLastNewMessage, json_encode($chatRoom->users)
+								, $chatRoom->dateEnd, $chatRoom->noMoreThanOneVisitor ? 1 : 0, $chatRoom->isRemovable ? 1 : 0, $chatRoom->removePassword, $chatRoom->userId));
+            if($this->db->errorCode() != '00000') 
+            {
+                die('Error: database error.');
+            }
+        }
+        catch (Exception $e) 
+        {
+            logException($e);
+            die('Error: database error.');
+        }
+    }
+    
+    function CleanChatrooms($time) {
+        try {
+            $query = 'DELETE FROM ChatMessage WHERE IdChatRoom IN (SELECT Id FROM ChatRoom WHERE ( DateEnd <> 0 AND DateEnd < ? ) OR DateLastNewMessage < ?)';
+			
+			$idleTime = $time - (DAYS_TO_DELETE_IDLE_CHATROOM * 24 * 60 * 60);
+            
+            $req = $this->db->prepare($query);
+            
+            $req->execute(array($time, $idleTime));
+            
+            $query = 'DELETE FROM ChatRoom WHERE ( DateEnd <> 0 AND DateEnd < ? ) OR DateLastNewMessage < ?';
+            
+            $req = $this->db->prepare($query);
+            
+            $req->execute(array($time, $idleTime));
+        }
+        catch (Exception $e) 
+        {
+            logException($e);
+            die('Error: database error.');
+        }
+    }
+    
+    function DeleteChatroom($chatRoomId) {
+        try {
+            $query = 'DELETE FROM ChatMessage WHERE IdChatRoom = ?';
+            
+            $req = $this->db->prepare($query);
+            
+            $req->execute(array($chatRoomId));
+            
+            $query = 'DELETE FROM ChatRoom WHERE Id = ?';
+            
+            $req = $this->db->prepare($query);
+            
+            $req->execute(array($chatRoomId));
+        }
+        catch (Exception $e) 
+        {
+            logException($e);
+            die('Error: database error.');
+        }
+    }
+    
+    function GetChatroom($id) {
+        if(is_null($id) || $id == '') {
+            return null;    
+        }
+        
+        try {            
+            $query = 'SELECT Id, DateCreation, DateLastNewMessage, ConnectedUsers, DateEnd, NoMoreThanOneVisitor, IsRemovable, RemovePassword, UserHash FROM ChatRoom WHERE Id = ?';
+            
+            $req = $this->db->prepare($query);
+            
+            $req->execute(array($id));
+            
+            $result = $req->fetchAll();
+            
+            if(is_null($result) || count($result) != 1) {
+                return null;
+            }
+            
+            $resultRow = $result[0];
+            
+            $chatRoom = new ChatRoom;
+            $chatRoom->id = $resultRow['Id'];
+            $chatRoom->dateCreation = $resultRow['DateCreation'];
+            $chatRoom->dateLastNewMessage = $resultRow['DateLastNewMessage'];
+            $chatRoom->users = json_decode($resultRow['ConnectedUsers'], true);
+            $chatRoom->dateEnd = $resultRow['DateEnd'];
+            $chatRoom->noMoreThanOneVisitor = $resultRow['NoMoreThanOneVisitor'] == 1;
+			$chatRoom->isRemovable = $resultRow['IsRemovable'] == 1;
+			$chatRoom->removePassword = $resultRow['RemovePassword'];
+			$chatRoom->userId = $resultRow['UserHash'];
+            
+            return $chatRoom;
+        }
+        catch (Exception $e) 
+        {
+            logException($e);
+            die('Error: database error.');
+        }
+    }
+    
+    function UpdateChatRoomUsers($chatRoom) {
+        try {
+            $query = 'UPDATE ChatRoom SET ConnectedUsers = ? WHERE Id = ?';
+            
+            $req = $this->db->prepare($query);
+            
+            $req->execute(array(json_encode($chatRoom->users), $chatRoom->id));
+            
+            if($this->db->errorCode() != '00000') 
+            {
+                die('Error: database error.');
+            }
+        }
+        catch (Exception $e) 
+        {
+            logException($e);
+            die('Error: database error.');
+        }
+    }
+    
+    function GetLastMessages($chatRoomId, $nbMessages) {
+        try {
+            $query = 'SELECT Message, Hash, User, Date FROM ChatMessage WHERE IdChatRoom = ? ORDER BY Date DESC LIMIT ?';
+            
+            $req = $this->db->prepare($query);
+            
+            $req->execute(array($chatRoomId, $nbMessages));
+            
+            $messages = array();
+            
+            while ($line = $req->fetch()) { 
+                $chatMessage = new ChatMessage;
+                $chatMessage->message = $line['Message'];
+                $chatMessage->hash = $line['Hash'];
+                $chatMessage->userId = $line['User'];
+                $chatMessage->date = $line['Date'];
+                array_unshift($messages, $chatMessage);
+            } 
+            
+            return $messages;
+        }
+        catch (Exception $e) 
+        {
+            logException($e);
+            die('Error: database error.');
+        }
+    }
+    
+    function UpdateChatRoomDateLastMessage($chatRoomId, $time) {
+        try {
+            $query = 'UPDATE ChatRoom SET DateLastNewMessage = ? WHERE Id = ?';
+            
+            $req = $this->db->prepare($query);
+            
+            $req->execute(array($time, $chatRoomId));
+            
+            if($this->db->errorCode() != '00000') 
+            {
+                die('Error: database error.');
+            }
+        }
+        catch (Exception $e) 
+        {
+            logException($e);
+            die('Error: database error.');
+        }
+    }
+    
+    function AddMessage($chatRoomId, $message, $userMessage, $hash, $time) {
+        try {
+            $query = 'INSERT INTO ChatMessage ( IdChatRoom, Message, Hash, User, Date ) VALUES ( ?, ?, ?, ?, ? )';
+            
+            $req = $this->db->prepare($query);
+            
+            $req->execute(array($chatRoomId, $message, $hash, $userMessage, $time));
+            
+            if($this->db->errorCode() != '00000') 
+            {
+                die('Error: database error.');
+            }
+        }
+        catch (Exception $e) 
+        {
+            logException($e);
+            die('Error: database error.');
+        }
+    }
+    
+    function GetNbChatRooms() {
+        try {
+            $query = 'SELECT COUNT(Id) FROM ChatRoom';
+            
+            $req = $this->db->prepare($query);
+            
+            $req->execute();
+            
+            $result = $req->fetchAll();
+            
+            if(is_null($result) || count($result) != 1) {
+                return -1;
+            }
+            
+            $resultRow = $result[0];
+            
+            return $resultRow[0];
+        }
+        catch (Exception $e) 
+        {
+            logException($e);
+            die('Error: database error.');
+        }
+    }
+    
+    function GetNbMessages() {
+        try {
+            $query = 'SELECT COUNT(IdChatRoom) FROM ChatMessage';
+            
+            $req = $this->db->prepare($query);
+            
+            $req->execute();
+            
+            $result = $req->fetchAll();
+            
+            if(is_null($result) || count($result) != 1) {
+                return -1;
+            }
+            
+            $resultRow = $result[0];
+            
+            return $resultRow[0];
+        }
+        catch (Exception $e) 
+        {
+            logException($e);
+            die('Error: database error.');
+        }
+    }
+}
+?>
9 inc/functions.php
@@ -0,0 +1,9 @@
+<?php
+	function getHashForIp() {
+		return substr(md5($_SERVER['REMOTE_ADDR'] . SEED), 0, 16);
+	}
+    
+    function logException($e) {
+        file_put_contents(LOGS_FILE_NAME, date('Y-m-d H:i:s', $_SERVER['REQUEST_TIME']) . ' -> ' . $e->getMessage() . PHP_EOL . $e->getTraceAsString() . PHP_EOL . PHP_EOL . PHP_EOL, FILE_APPEND);
+    }
+?>
3 inc/init.php
@@ -0,0 +1,3 @@
+<?php
+	date_default_timezone_set('UTC');
+?>
165 index.php
@@ -0,0 +1,165 @@
+<!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8" />
+    <title>Home - MyCryptoChat by HowTommy.net</title>
+    <link href="/favicon.ico" rel="shortcut icon" type="image/x-icon" />
+    <meta name="viewport" content="width=device-width" />
+    <link href="styles/myCryptoChat.css" rel="stylesheet" />
+    <script src="scripts/modernizr.js"></script>
+</head>
+<body>
+    <?php
+    require 'inc/constants.php';
+    $showContent = true;
+    if(!is_writable(DB_FILE_NAME)) {
+        $showContent = false;
+    ?>
+    <h2>Error: database access</h2>
+    <p>
+        MyCryptoChat can't edit the database file.<br />
+        Please give all rights to the apache (or current) user on the 'chatrooms.sqlite' file.
+    </p>
+    <?php
+    }
+    if (!extension_loaded('PDO')) {
+        $showContent = false;
+    ?>
+    <h2>Error: PDO missing</h2>
+    <p>
+        The PDO module is missing.<br />
+        Please add it and load it to make this website work.
+    </p>
+    <?php
+    }
+    if (!extension_loaded('PDO_SQLITE')) {
+        $showContent = false;
+    ?>
+    <h2>Error: PDO SQLite missing</h2>
+    <p>
+        The PDO SQLite module is missing.<br />
+        Please add it and load it to make this website work.
+    </p>
+    <?php
+    }
+    if(!is_writable(LOGS_FILE_NAME)) {
+        $showContent = false;
+    ?>
+    <h2>Error: logs file access</h2>
+    <p>
+        MyCryptoChat can't edit the logs file.<br />
+        Please give all rights to the apache (or current) user on the 'logs.txt' file.
+    </p>
+    <?php
+    }
+    if (version_compare(phpversion(), '5.4.0', '<')) {
+        $showContent = false;
+    ?>
+    <h2>Error: php version</h2>
+    <p>
+        The version of php is too low.<br />
+        You need at least PHP 5.4 to run this website.
+    </p>
+    <?php
+    }
+    if(SEED == 'f-rjng24!1r5TRHHgnjrt') {
+        $showContent = false;
+    ?>
+    <h2>Error: the seed was not modified</h2>
+    <p>
+        The seed that is used to do a better hashing for users is still 'f-rjng24!1r5TRHHgnjrt'<br />
+        Please modify its value in 'inc/constants.php'.
+    </p>
+    <?php
+    }
+    if($showContent) {
+    ?>
+    <noscript>
+        This website needs JavaScript activated to work. 
+              <style>
+                  div {
+                      display: none;
+                  }
+              </style>
+    </noscript>
+    <header>
+        <div class="content-wrapper">
+            <div class="float-left">
+                <p class="site-title"><a href="index.php">MyCryptoChat</a></p>
+            </div>
+            <div class="float-right">
+                <section id="login">
+                </section>
+                <nav>
+                    <ul id="menu">
+                        <li><a href="index.php">Home</a></li>
+                        <li><a href="stats.php">Stats</a></li>
+                        <li><a href="about.php">About</a></li>
+                    </ul>
+                </nav>
+            </div>
+        </div>
+    </header>
+    <div id="body">
+        <section class="content-wrapper main-content clear-fix">
+
+            <h2>MyCryptoChat</h2>
+
+            <div class="mb20">Chat with friends without anyone spying on what you say!</div>
+
+            <form method="POST" action="newroom.php">
+                <label for="nbMinutesToLive">Lifetime of the chat room:</label>
+                <select id="nbMinutesToLive" name="nbMinutesToLive">
+					<?php if(NB_MINUTES_TO_LIVE_MAX == 0) { ?>
+						<option value="0">Unlimited</option>
+					<?php }
+                          if (NB_MINUTES_TO_LIVE_MAX == 0 || NB_MINUTES_TO_LIVE_MAX >= 5) { ?>
+						<option value="5">5 minutes</option>
+					<?php }
+                          if (NB_MINUTES_TO_LIVE_MAX == 0 || NB_MINUTES_TO_LIVE_MAX >= 60) { ?>
+						<option value="60">1 hour</option>
+					<?php }
+                          if (NB_MINUTES_TO_LIVE_MAX == 0 || NB_MINUTES_TO_LIVE_MAX >= 1440) { ?>
+						<option value="1440">1 day</option>
+					<?php }
+                          if (NB_MINUTES_TO_LIVE_MAX == 0 || NB_MINUTES_TO_LIVE_MAX >= 10080) { ?>
+						<option value="10080">7 days</option>
+					<?php }
+                          if (NB_MINUTES_TO_LIVE_MAX == 0 || NB_MINUTES_TO_LIVE_MAX >= 40320) { ?>
+						<option value="40320">30 days</option>
+					<?php }
+                          if (NB_MINUTES_TO_LIVE_MAX == 0 || NB_MINUTES_TO_LIVE_MAX >= 525960) { ?>
+						<option value="525960">1 year</option>
+					<?php } ?>
+                </select><br />
+                <br />
+				
+				<input type="checkbox" name="isRemovable" id="isRemovable" value="true" onchange="if(this.checked) { $('#divRemovePassword').show(); } else { $('#divRemovePassword').hide(); }" />
+                <label for="isRemovable" class="labelIndex">Is removable</label>
+				<br />
+				<div id="divRemovePassword">
+					<br /><label for="removePassword">Password to remove:</label>
+					<input type="text" name="removePassword" value="" />
+				</div>
+				<br />
+				
+				<input type="checkbox" name="selfDestroys" id="selfDestroys" value="true" />
+                <label for="selfDestroys" class="labelIndex">Self-destroys if more than one visitor</label>
+				<br />
+				
+				<br />
+                <input type="submit" value="Create a new chat room" />
+            </form>
+        </section>
+    </div>
+    <footer>
+        <div class="content-wrapper">
+            <div class="float-left">
+                <p>&copy; 2013 - MyCryptoChat <?php echo MYCRYPTOCHAT_VERSION; ?> by HowTommy.net</p>
+            </div>
+        </div>
+    </footer>
+    <script src="scripts/jquery.js"></script>
+    <?php } ?>
+</body>
+</html>
58 newroom.php
@@ -0,0 +1,58 @@
+<?php
+require 'inc/constants.php';
+require 'inc/init.php';
+require 'inc/functions.php';
+require 'inc/classes.php';
+require 'inc/dbmanager.php';
+
+if($_POST['nbMinutesToLive'] < 0) {
+    $nbMinutesToLive = DEFAULT_NB_MINUTES_TO_LIVE;
+} else if (NB_MINUTES_TO_LIVE_MAX > 0 && $_POST['nbMinutesToLive'] > NB_MINUTES_TO_LIVE_MAX) {
+    $nbMinutesToLive = NB_MINUTES_TO_LIVE_MAX;
+} else {
+    $nbMinutesToLive = $_POST['nbMinutesToLive'];
+}
+
+$time = $_SERVER['REQUEST_TIME'];
+
+$selfDestroys = isset($_POST['selfDestroys']) && $_POST['selfDestroys'] == 'true';
+
+$isRemovable = isset($_POST['isRemovable']) && $_POST['isRemovable'] == 'true';
+$removePassword = $_POST['removePassword'];
+
+$userHash = getHashForIp();
+
+// we generate a random key
+$characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
+$key = '';
+for ($i = 0; $i < 20; $i++) {
+    $key .= $characters[rand(0, strlen($characters) - 1)];
+}
+// we add the seed, hash the whole key and only take the 20 first characters
+$key = substr(md5($key . SEED), 0, 20);
+
+// we create the chat room object
+$chatRoom = new ChatRoom;
+$chatRoom->id = $key;
+$chatRoom->dateCreation = $time;
+$chatRoom->dateLastNewMessage = $time;
+$chatRoom->dateEnd = $nbMinutesToLive != 0 ? $time + ($nbMinutesToLive * 60) : 0;
+$chatRoom->noMoreThanOneVisitor = $selfDestroys;
+$chatRoom->isRemovable = $isRemovable;
+$chatRoom->removePassword = $removePassword;
+$chatRoom->userId = $userHash;
+
+$chatUser = array();
+$chatUser['id'] = $userHash;
+$chatUser['dateLastSeen'] = $time;
+
+array_push($chatRoom->users, $chatUser);
+
+$dbManager = new DbManager();
+// we delete old chatrooms
+$dbManager->CleanChatrooms($time);
+// we save the chat room in sqlite
+$dbManager->CreateChatroom($chatRoom);
+
+header('Location: chatroom.php?id=' . $key);
+?>
23 removeChatroom.php
@@ -0,0 +1,23 @@
+<?php
+require 'inc/constants.php';
+require 'inc/init.php';
+require 'inc/functions.php';
+require 'inc/classes.php';
+require 'inc/dbmanager.php';
+
+$dbManager = new DbManager();
+
+$chatRoom = $dbManager->GetChatroom($_POST['roomId']);
+
+if(!$chatRoom->isRemovable) {
+	echo 'error';
+	exit;
+} else if ($chatRoom->removePassword != $_POST['removePassword']) {
+	echo 'wrongPassword';
+	exit;
+} else {
+	$dbManager->DeleteChatroom($_POST['roomId']);
+	echo 'removed';
+	exit;
+}
+?>
1 scripts/jquery.js
9,440 scripts/jquery/jquery-1.8.2.js
9,440 additions, 0 deletions not shown because the diff is too large. Please use a local Git client to view these changes.
1 scripts/modernizr.js
1,393 scripts/modernizr/modernizr-2.6.2.js
@@ -0,0 +1,1393 @@
+/*!
+ * Modernizr v2.6.2
+ * www.modernizr.com
+ *
+ * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton
+ * Available under the BSD and MIT licenses: www.modernizr.com/license/
+ */
+
+/*
+ * Modernizr tests which native CSS3 and HTML5 features are available in
+ * the current UA and makes the results available to you in two ways:
+ * as properties on a global Modernizr object, and as classes on the
+ * <html> element. This information allows you to progressively enhance
+ * your pages with a granular level of control over the experience.
+ *
+ * Modernizr has an optional (not included) conditional resource loader
+ * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).
+ * To get a build that includes Modernizr.load(), as well as choosing
+ * which tests to include, go to www.modernizr.com/download/
+ *
+ * Authors        Faruk Ates, Paul Irish, Alex Sexton
+ * Contributors   Ryan Seddon, Ben Alman
+ */
+
+window.Modernizr = (function( window, document, undefined ) {
+
+    var version = '2.6.2',
+
+    Modernizr = {},
+
+    /*>>cssclasses*/
+    // option for enabling the HTML classes to be added
+    enableClasses = true,
+    /*>>cssclasses*/
+
+    docElement = document.documentElement,
+
+    /**
+     * Create our "modernizr" element that we do most feature tests on.
+     */
+    mod = 'modernizr',
+    modElem = document.createElement(mod),
+    mStyle = modElem.style,
+
+    /**
+     * Create the input element for various Web Forms feature tests.
+     */
+    inputElem /*>>inputelem*/ = document.createElement('input') /*>>inputelem*/ ,
+
+    /*>>smile*/
+    smile = ':)',
+    /*>>smile*/
+
+    toString = {}.toString,
+
+    // TODO :: make the prefixes more granular
+    /*>>prefixes*/
+    // List of property values to set for css tests. See ticket #21
+    prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),
+    /*>>prefixes*/
+
+    /*>>domprefixes*/
+    // Following spec is to expose vendor-specific style properties as:
+    //   elem.style.WebkitBorderRadius
+    // and the following would be incorrect:
+    //   elem.style.webkitBorderRadius
+
+    // Webkit ghosts their properties in lowercase but Opera & Moz do not.
+    // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+
+    //   erik.eae.net/archives/2008/03/10/21.48.10/
+
+    // More here: github.com/Modernizr/Modernizr/issues/issue/21
+    omPrefixes = 'Webkit Moz O ms',
+
+    cssomPrefixes = omPrefixes.split(' '),
+
+    domPrefixes = omPrefixes.toLowerCase().split(' '),
+    /*>>domprefixes*/
+
+    /*>>ns*/
+    ns = {'svg': 'http://www.w3.org/2000/svg'},
+    /*>>ns*/
+
+    tests = {},
+    inputs = {},
+    attrs = {},
+
+    classes = [],
+
+    slice = classes.slice,
+
+    featureName, // used in testing loop
+
+
+    /*>>teststyles*/
+    // Inject element with style element and some CSS rules
+    injectElementWithStyles = function( rule, callback, nodes, testnames ) {
+
+      var style, ret, node, docOverflow,
+          div = document.createElement('div'),
+          // After page load injecting a fake body doesn't work so check if body exists
+          body = document.body,
+          // IE6 and 7 won't return offsetWidth or offsetHeight unless it's in the body element, so we fake it.
+          fakeBody = body || document.createElement('body');
+
+      if ( parseInt(nodes, 10) ) {
+          // In order not to give false positives we create a node for each test
+          // This also allows the method to scale for unspecified uses
+          while ( nodes-- ) {
+              node = document.createElement('div');
+              node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
+              div.appendChild(node);
+          }
+      }
+
+      // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed
+      // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element
+      // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.
+      // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx
+      // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277
+      style = ['&#173;','<style id="s', mod, '">', rule, '</style>'].join('');
+      div.id = mod;
+      // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.
+      // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270
+      (body ? div : fakeBody).innerHTML += style;
+      fakeBody.appendChild(div);
+      if ( !body ) {
+          //avoid crashing IE8, if background image is used
+          fakeBody.style.background = '';
+          //Safari 5.13/5.1.4 OSX stops loading if ::-webkit-scrollbar is used and scrollbars are visible
+          fakeBody.style.overflow = 'hidden';
+          docOverflow = docElement.style.overflow;
+          docElement.style.overflow = 'hidden';
+          docElement.appendChild(fakeBody);
+      }
+
+      ret = callback(div, rule);
+      // If this is done after page load we don't want to remove the body so check if body exists
+      if ( !body ) {
+          fakeBody.parentNode.removeChild(fakeBody);
+          docElement.style.overflow = docOverflow;
+      } else {
+          div.parentNode.removeChild(div);
+      }
+
+      return !!ret;
+
+    },
+    /*>>teststyles*/
+
+    /*>>mq*/
+    // adapted from matchMedia polyfill
+    // by Scott Jehl and Paul Irish
+    // gist.github.com/786768
+    testMediaQuery = function( mq ) {
+
+      var matchMedia = window.matchMedia || window.msMatchMedia;
+      if ( matchMedia ) {
+        return matchMedia(mq).matches;
+      }
+
+      var bool;
+
+      injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function( node ) {
+        bool = (window.getComputedStyle ?
+                  getComputedStyle(node, null) :
+                  node.currentStyle)['position'] == 'absolute';
+      });
+
+      return bool;
+
+     },
+     /*>>mq*/
+
+
+    /*>>hasevent*/
+    //
+    // isEventSupported determines if a given element supports the given event
+    // kangax.github.com/iseventsupported/
+    //
+    // The following results are known incorrects:
+    //   Modernizr.hasEvent("webkitTransitionEnd", elem) // false negative
+    //   Modernizr.hasEvent("textInput") // in Webkit. github.com/Modernizr/Modernizr/issues/333
+    //   ...
+    isEventSupported = (function() {
+
+      var TAGNAMES = {
+        'select': 'input', 'change': 'input',
+        'submit': 'form', 'reset': 'form',
+        'error': 'img', 'load': 'img', 'abort': 'img'
+      };
+
+      function isEventSupported( eventName, element ) {
+
+        element = element || document.createElement(TAGNAMES[eventName] || 'div');
+        eventName = 'on' + eventName;
+
+        // When using `setAttribute`, IE skips "unload", WebKit skips "unload" and "resize", whereas `in` "catches" those
+        var isSupported = eventName in element;
+
+        if ( !isSupported ) {
+          // If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element
+          if ( !element.setAttribute ) {
+            element = document.createElement('div');
+          }
+          if ( element.setAttribute && element.removeAttribute ) {
+            element.setAttribute(eventName, '');
+            isSupported = is(element[eventName], 'function');
+
+            // If property was created, "remove it" (by setting value to `undefined`)
+            if ( !is(element[eventName], 'undefined') ) {
+              element[eventName] = undefined;
+            }
+            element.removeAttribute(eventName);
+          }
+        }
+
+        element = null;
+        return isSupported;
+      }
+      return isEventSupported;
+    })(),
+    /*>>hasevent*/
+
+    // TODO :: Add flag for hasownprop ? didn't last time
+
+    // hasOwnProperty shim by kangax needed for Safari 2.0 support
+    _hasOwnProperty = ({}).hasOwnProperty, hasOwnProp;
+
+    if ( !is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined') ) {
+      hasOwnProp = function (object, property) {
+        return _hasOwnProperty.call(object, property);
+      };
+    }
+    else {
+      hasOwnProp = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */
+        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));
+      };
+    }
+
+    // Adapted from ES5-shim https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js
+    // es5.github.com/#x15.3.4.5
+
+    if (!Function.prototype.bind) {
+      Function.prototype.bind = function bind(that) {
+
+        var target = this;
+
+        if (typeof target != "function") {
+            throw new TypeError();
+        }
+
+        var args = slice.call(arguments, 1),
+            bound = function () {
+
+            if (this instanceof bound) {
+
+              var F = function(){};
+              F.prototype = target.prototype;
+              var self = new F();
+
+              var result = target.apply(
+                  self,
+                  args.concat(slice.call(arguments))
+              );
+              if (Object(result) === result) {
+                  return result;
+              }
+              return self;
+
+            } else {
+
+              return target.apply(
+                  that,
+                  args.concat(slice.call(arguments))
+              );
+
+            }
+
+        };
+
+        return bound;
+      };
+    }
+
+    /**
+     * setCss applies given styles to the Modernizr DOM node.
+     */
+    function setCss( str ) {
+        mStyle.cssText = str;
+    }
+
+    /**
+     * setCssAll extrapolates all vendor-specific css strings.
+     */
+    function setCssAll( str1, str2 ) {
+        return setCss(prefixes.join(str1 + ';') + ( str2 || '' ));
+    }
+
+    /**
+     * is returns a boolean for if typeof obj is exactly type.
+     */
+    function is( obj, type ) {
+        return typeof obj === type;
+    }
+
+    /**
+     * contains returns a boolean for if substr is found within str.
+     */
+    function contains( str, substr ) {
+        return !!~('' + str).indexOf(substr);
+    }
+
+    /*>>testprop*/
+
+    // testProps is a generic CSS / DOM property test.
+
+    // In testing support for a given CSS property, it's legit to test:
+    //    `elem.style[styleName] !== undefined`
+    // If the property is supported it will return an empty string,
+    // if unsupported it will return undefined.
+
+    // We'll take advantage of this quick test and skip setting a style
+    // on our modernizr element, but instead just testing undefined vs
+    // empty string.
+
+    // Because the testing of the CSS property names (with "-", as
+    // opposed to the camelCase DOM properties) is non-portable and
+    // non-standard but works in WebKit and IE (but not Gecko or Opera),
+    // we explicitly reject properties with dashes so that authors
+    // developing in WebKit or IE first don't end up with
+    // browser-specific content by accident.
+
+    function testProps( props, prefixed ) {
+        for ( var i in props ) {
+            var prop = props[i];
+            if ( !contains(prop, "-") && mStyle[prop] !== undefined ) {
+                return prefixed == 'pfx' ? prop : true;
+            }
+        }
+        return false;
+    }
+    /*>>testprop*/
+
+    // TODO :: add testDOMProps
+    /**
+     * testDOMProps is a generic DOM property test; if a browser supports
+     *   a certain property, it won't return undefined for it.
+     */
+    function testDOMProps( props, obj, elem ) {
+        for ( var i in props ) {
+            var item = obj[props[i]];
+            if ( item !== undefined) {
+
+                // return the property name as a string
+                if (elem === false) return props[i];
+
+                // let's bind a function
+                if (is(item, 'function')){
+                  // default to autobind unless override
+                  return item.bind(elem || obj);
+                }
+
+                // return the unbound function or obj or value
+                return item;
+            }
+        }
+        return false;
+    }
+
+    /*>>testallprops*/
+    /**
+     * testPropsAll tests a list of DOM properties we want to check against.
+     *   We specify literally ALL possible (known and/or likely) properties on
+     *   the element including the non-vendor prefixed one, for forward-
+     *   compatibility.
+     */
+    function testPropsAll( prop, prefixed, elem ) {
+
+        var ucProp  = prop.charAt(0).toUpperCase() + prop.slice(1),
+            props   = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');
+
+        // did they call .prefixed('boxSizing') or are we just testing a prop?
+        if(is(prefixed, "string") || is(prefixed, "undefined")) {
+          return testProps(props, prefixed);
+
+        // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])
+        } else {
+          props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');
+          return testDOMProps(props, prefixed, elem);
+        }
+    }
+    /*>>testallprops*/
+
+
+    /**
+     * Tests
+     * -----
+     */
+
+    // The *new* flexbox
+    // dev.w3.org/csswg/css3-flexbox
+
+    tests['flexbox'] = function() {
+      return testPropsAll('flexWrap');
+    };
+
+    // The *old* flexbox
+    // www.w3.org/TR/2009/WD-css3-flexbox-20090723/
+
+    tests['flexboxlegacy'] = function() {
+        return testPropsAll('boxDirection');
+    };
+
+    // On the S60 and BB Storm, getContext exists, but always returns undefined
+    // so we actually have to call getContext() to verify
+    // github.com/Modernizr/Modernizr/issues/issue/97/
+
+    tests['canvas'] = function() {
+        var elem = document.createElement('canvas');
+        return !!(elem.getContext && elem.getContext('2d'));
+    };
+
+    tests['canvastext'] = function() {
+        return !!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText, 'function'));
+    };
+
+    // webk.it/70117 is tracking a legit WebGL feature detect proposal
+
+    // We do a soft detect which may false positive in order to avoid
+    // an expensive context creation: bugzil.la/732441
+
+    tests['webgl'] = function() {
+        return !!window.WebGLRenderingContext;
+    };
+
+    /*
+     * The Modernizr.touch test only indicates if the browser supports
+     *    touch events, which does not necessarily reflect a touchscreen
+     *    device, as evidenced by tablets running Windows 7 or, alas,
+     *    the Palm Pre / WebOS (touch) phones.
+     *
+     * Additionally, Chrome (desktop) used to lie about its support on this,
+     *    but that has since been rectified: crbug.com/36415
+     *
+     * We also test for Firefox 4 Multitouch Support.
+     *
+     * For more info, see: modernizr.github.com/Modernizr/touch.html
+     */
+
+    tests['touch'] = function() {
+        var bool;
+
+        if(('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch) {
+          bool = true;
+        } else {
+          injectElementWithStyles(['@media (',prefixes.join('touch-enabled),('),mod,')','{#modernizr{top:9px;position:absolute}}'].join(''), function( node ) {
+            bool = node.offsetTop === 9;
+          });
+        }
+
+        return bool;
+    };
+
+
+    // geolocation is often considered a trivial feature detect...
+    // Turns out, it's quite tricky to get right:
+    //
+    // Using !!navigator.geolocation does two things we don't want. It:
+    //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513
+    //   2. Disables page caching in WebKit: webk.it/43956
+    //
+    // Meanwhile, in Firefox < 8, an about:config setting could expose
+    // a false positive that would throw an exception: bugzil.la/688158
+
+    tests['geolocation'] = function() {
+        return 'geolocation' in navigator;
+    };
+
+
+    tests['postmessage'] = function() {
+      return !!window.postMessage;
+    };
+
+
+    // Chrome incognito mode used to throw an exception when using openDatabase
+    // It doesn't anymore.
+    tests['websqldatabase'] = function() {
+      return !!window.openDatabase;
+    };
+
+    // Vendors had inconsistent prefixing with the experimental Indexed DB:
+    // - Webkit's implementation is accessible through webkitIndexedDB
+    // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB
+    // For speed, we don't test the legacy (and beta-only) indexedDB
+    tests['indexedDB'] = function() {
+      return !!testPropsAll("indexedDB", window);
+    };
+
+    // documentMode logic from YUI to filter out IE8 Compat Mode
+    //   which false positives.
+    tests['hashchange'] = function() {
+      return isEventSupported('hashchange', window) && (document.documentMode === undefined || document.documentMode > 7);
+    };
+
+    // Per 1.6:
+    // This used to be Modernizr.historymanagement but the longer
+    // name has been deprecated in favor of a shorter and property-matching one.
+    // The old API is still available in 1.6, but as of 2.0 will throw a warning,
+    // and in the first release thereafter disappear entirely.
+    tests['history'] = function() {
+      return !!(window.history && history.pushState);
+    };
+
+    tests['draganddrop'] = function() {
+        var div = document.createElement('div');
+        return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);
+    };
+
+    // FF3.6 was EOL'ed on 4/24/12, but the ESR version of FF10
+    // will be supported until FF19 (2/12/13), at which time, ESR becomes FF17.
+    // FF10 still uses prefixes, so check for it until then.
+    // for more ESR info, see: mozilla.org/en-US/firefox/organizations/faq/
+    tests['websockets'] = function() {
+        return 'WebSocket' in window || 'MozWebSocket' in window;
+    };
+
+
+    // css-tricks.com/rgba-browser-support/
+    tests['rgba'] = function() {
+        // Set an rgba() color and check the returned value
+
+        setCss('background-color:rgba(150,255,150,.5)');
+
+        return contains(mStyle.backgroundColor, 'rgba');
+    };
+
+    tests['hsla'] = function() {
+        // Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,
+        //   except IE9 who retains it as hsla
+
+        setCss('background-color:hsla(120,40%,100%,.5)');
+
+        return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');
+    };
+
+    tests['multiplebgs'] = function() {
+        // Setting multiple images AND a color on the background shorthand property
+        //  and then querying the style.background property value for the number of
+        //  occurrences of "url(" is a reliable method for detecting ACTUAL support for this!
+
+        setCss('background:url(https://),url(https://),red url(https://)');
+
+        // If the UA supports multiple backgrounds, there should be three occurrences
+        //   of the string "url(" in the return value for elemStyle.background
+
+        return (/(url\s*\(.*?){3}/).test(mStyle.background);
+    };
+
+
+
+    // this will false positive in Opera Mini
+    //   github.com/Modernizr/Modernizr/issues/396
+
+    tests['backgroundsize'] = function() {
+        return testPropsAll('backgroundSize');
+    };
+
+    tests['borderimage'] = function() {
+        return testPropsAll('borderImage');
+    };
+
+
+    // Super comprehensive table about all the unique implementations of
+    // border-radius: muddledramblings.com/table-of-css3-border-radius-compliance
+
+    tests['borderradius'] = function() {
+        return testPropsAll('borderRadius');
+    };
+
+    // WebOS unfortunately false positives on this test.
+    tests['boxshadow'] = function() {
+        return testPropsAll('boxShadow');
+    };
+
+    // FF3.0 will false positive on this test
+    tests['textshadow'] = function() {
+        return document.createElement('div').style.textShadow === '';
+    };
+
+
+    tests['opacity'] = function() {
+        // Browsers that actually have CSS Opacity implemented have done so
+        //  according to spec, which means their return values are within the
+        //  range of [0.0,1.0] - including the leading zero.
+
+        setCssAll('opacity:.55');
+
+        // The non-literal . in this regex is intentional:
+        //   German Chrome returns this value as 0,55
+        // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632
+        return (/^0.55$/).test(mStyle.opacity);
+    };
+
+
+    // Note, Android < 4 will pass this test, but can only animate
+    //   a single property at a time
+    //   daneden.me/2011/12/putting-up-with-androids-bullshit/
+    tests['cssanimations'] = function() {
+        return testPropsAll('animationName');
+    };
+
+
+    tests['csscolumns'] = function() {
+        return testPropsAll('columnCount');
+    };
+
+
+    tests['cssgradients'] = function() {
+        /**
+         * For CSS Gradients syntax, please see:
+         * webkit.org/blog/175/introducing-css-gradients/
+         * developer.mozilla.org/en/CSS/-moz-linear-gradient
+         * developer.mozilla.org/en/CSS/-moz-radial-gradient
+         * dev.w3.org/csswg/css3-images/#gradients-
+         */
+
+        var str1 = 'background-image:',
+            str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',
+            str3 = 'linear-gradient(left top,#9f9, white);';
+
+        setCss(
+             // legacy webkit syntax (FIXME: remove when syntax not in use anymore)
+              (str1 + '-webkit- '.split(' ').join(str2 + str1) +
+             // standard syntax             // trailing 'background-image:'
+              prefixes.join(str3 + str1)).slice(0, -str1.length)
+        );
+
+        return contains(mStyle.backgroundImage, 'gradient');
+    };
+
+
+    tests['cssreflections'] = function() {
+        return testPropsAll('boxReflect');
+    };
+
+
+    tests['csstransforms'] = function() {
+        return !!testPropsAll('transform');
+    };
+
+
+    tests['csstransforms3d'] = function() {
+
+        var ret = !!testPropsAll('perspective');
+
+        // Webkit's 3D transforms are passed off to the browser's own graphics renderer.
+        //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in
+        //   some conditions. As a result, Webkit typically recognizes the syntax but
+        //   will sometimes throw a false positive, thus we must do a more thorough check:
+        if ( ret && 'webkitPerspective' in docElement.style ) {
+
+          // Webkit allows this media query to succeed only if the feature is enabled.
+          // `@media (transform-3d),(-webkit-transform-3d){ ... }`
+          injectElementWithStyles('@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}', function( node, rule ) {
+            ret = node.offsetLeft === 9 && node.offsetHeight === 3;
+          });
+        }
+        return ret;
+    };
+
+
+    tests['csstransitions'] = function() {
+        return testPropsAll('transition');
+    };
+
+
+    /*>>fontface*/
+    // @font-face detection routine by Diego Perini
+    // javascript.nwbox.com/CSSSupport/
+
+    // false positives:
+    //   WebOS github.com/Modernizr/Modernizr/issues/342
+    //   WP7   github.com/Modernizr/Modernizr/issues/538
+    tests['fontface'] = function() {
+        var bool;
+
+        injectElementWithStyles('@font-face {font-family:"font";src:url("https://")}', function( node, rule ) {
+          var style = document.getElementById('smodernizr'),
+              sheet = style.sheet || style.styleSheet,
+              cssText = sheet ? (sheet.cssRules && sheet.cssRules[0] ? sheet.cssRules[0].cssText : sheet.cssText || '') : '';
+
+          bool = /src/i.test(cssText) && cssText.indexOf(rule.split(' ')[0]) === 0;
+        });
+
+        return bool;
+    };
+    /*>>fontface*/
+
+    // CSS generated content detection
+    tests['generatedcontent'] = function() {
+        var bool;
+
+        injectElementWithStyles(['#',mod,'{font:0/0 a}#',mod,':after{content:"',smile,'";visibility:hidden;font:3px/1 a}'].join(''), function( node ) {
+          bool = node.offsetHeight >= 3;
+        });
+
+        return bool;
+    };
+
+
+
+    // These tests evaluate support of the video/audio elements, as well as
+    // testing what types of content they support.
+    //
+    // We're using the Boolean constructor here, so that we can extend the value
+    // e.g.  Modernizr.video     // true
+    //       Modernizr.video.ogg // 'probably'
+    //
+    // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845
+    //                     thx to NielsLeenheer and zcorpan
+
+    // Note: in some older browsers, "no" was a return value instead of empty string.
+    //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2
+    //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5
+
+    tests['video'] = function() {
+        var elem = document.createElement('video'),
+            bool = false;
+
+        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224
+        try {
+            if ( bool = !!elem.canPlayType ) {
+                bool      = new Boolean(bool);
+                bool.ogg  = elem.canPlayType('video/ogg; codecs="theora"')      .replace(/^no$/,'');
+
+                // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546
+                bool.h264 = elem.canPlayType('video/mp4; codecs="avc1.42E01E"') .replace(/^no$/,'');
+
+                bool.webm = elem.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,'');
+            }
+
+        } catch(e) { }
+
+        return bool;
+    };
+
+    tests['audio'] = function() {
+        var elem = document.createElement('audio'),
+            bool = false;
+
+        try {
+            if ( bool = !!elem.canPlayType ) {
+                bool      = new Boolean(bool);
+                bool.ogg  = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,'');
+                bool.mp3  = elem.canPlayType('audio/mpeg;')               .replace(/^no$/,'');
+
+                // Mimetypes accepted:
+                //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements
+                //   bit.ly/iphoneoscodecs
+                bool.wav  = elem.canPlayType('audio/wav; codecs="1"')     .replace(/^no$/,'');
+                bool.m4a  = ( elem.canPlayType('audio/x-m4a;')            ||
+                              elem.canPlayType('audio/aac;'))             .replace(/^no$/,'');
+            }
+        } catch(e) { }
+
+        return bool;
+    };
+
+
+    // In FF4, if disabled, window.localStorage should === null.
+
+    // Normally, we could not test that directly and need to do a
+    //   `('localStorage' in window) && ` test first because otherwise Firefox will
+    //   throw bugzil.la/365772 if cookies are disabled
+
+    // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem
+    // will throw the exception:
+    //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.
+    // Peculiarly, getItem and removeItem calls do not throw.
+
+    // Because we are forced to try/catch this, we'll go aggressive.
+
+    // Just FWIW: IE8 Compat mode supports these features completely:
+    //   www.quirksmode.org/dom/html5.html
+    // But IE8 doesn't support either with local files
+
+    tests['localstorage'] = function() {
+        try {
+            localStorage.setItem(mod, mod);
+            localStorage.removeItem(mod);
+            return true;
+        } catch(e) {
+            return false;
+        }
+    };
+
+    tests['sessionstorage'] = function() {
+        try {
+            sessionStorage.setItem(mod, mod);
+            sessionStorage.removeItem(mod);
+            return true;
+        } catch(e) {
+            return false;
+        }
+    };
+
+
+    tests['webworkers'] = function() {
+        return !!window.Worker;
+    };
+
+
+    tests['applicationcache'] = function() {
+        return !!window.applicationCache;
+    };
+
+
+    // Thanks to Erik Dahlstrom
+    tests['svg'] = function() {
+        return !!document.createElementNS && !!document.createElementNS(ns.svg, 'svg').createSVGRect;
+    };
+
+    // specifically for SVG inline in HTML, not within XHTML
+    // test page: paulirish.com/demo/inline-svg
+    tests['inlinesvg'] = function() {
+      var div = document.createElement('div');
+      div.innerHTML = '<svg/>';
+      return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;
+    };
+
+    // SVG SMIL animation
+    tests['smil'] = function() {
+        return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, 'animate')));
+    };
+
+    // This test is only for clip paths in SVG proper, not clip paths on HTML content
+    // demo: srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg
+
+    // However read the comments to dig into applying SVG clippaths to HTML content here:
+    //   github.com/Modernizr/Modernizr/issues/213#issuecomment-1149491
+    tests['svgclippaths'] = function() {
+        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));
+    };
+
+    /*>>webforms*/
+    // input features and input types go directly onto the ret object, bypassing the tests loop.
+    // Hold this guy to execute in a moment.
+    function webforms() {
+        /*>>input*/
+        // Run through HTML5's new input attributes to see if the UA understands any.
+        // We're using f which is the <input> element created early on
+        // Mike Taylr has created a comprehensive resource for testing these attributes
+        //   when applied to all input types:
+        //   miketaylr.com/code/input-type-attr.html
+        // spec: www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
+
+        // Only input placeholder is tested while textarea's placeholder is not.
+        // Currently Safari 4 and Opera 11 have support only for the input placeholder
+        // Both tests are available in feature-detects/forms-placeholder.js
+        Modernizr['input'] = (function( props ) {
+            for ( var i = 0, len = props.length; i < len; i++ ) {
+                attrs[ props[i] ] = !!(props[i] in inputElem);
+            }
+            if (attrs.list){
+              // safari false positive's on datalist: webk.it/74252
+              // see also github.com/Modernizr/Modernizr/issues/146
+              attrs.list = !!(document.createElement('datalist') && window.HTMLDataListElement);
+            }
+            return attrs;
+        })('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));
+        /*>>input*/
+
+        /*>>inputtypes*/
+        // Run through HTML5's new input types to see if the UA understands any.
+        //   This is put behind the tests runloop because it doesn't return a
+        //   true/false like all the other tests; instead, it returns an object
+        //   containing each input type with its corresponding true/false value
+
+        // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/
+        Modernizr['inputtypes'] = (function(props) {
+
+            for ( var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++ ) {
+
+                inputElem.setAttribute('type', inputElemType = props[i]);
+                bool = inputElem.type !== 'text';
+
+                // We first check to see if the type we give it sticks..
+                // If the type does, we feed it a textual value, which shouldn't be valid.
+                // If the value doesn't stick, we know there's input sanitization which infers a custom UI
+                if ( bool ) {
+
+                    inputElem.value         = smile;
+                    inputElem.style.cssText = 'position:absolute;visibility:hidden;';
+
+                    if ( /^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined ) {
+
+                      docElement.appendChild(inputElem);
+                      defaultView = document.defaultView;
+
+                      // Safari 2-4 allows the smiley as a value, despite making a slider
+                      bool =  defaultView.getComputedStyle &&
+                              defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&
+                              // Mobile android web browser has false positive, so must
+                              // check the height to see if the widget is actually there.
+                              (inputElem.offsetHeight !== 0);
+
+                      docElement.removeChild(inputElem);
+
+                    } else if ( /^(search|tel)$/.test(inputElemType) ){
+                      // Spec doesn't define any special parsing or detectable UI
+                      //   behaviors so we pass these through as true
+
+                      // Interestingly, opera fails the earlier test, so it doesn't
+                      //  even make it here.
+
+                    } else if ( /^(url|email)$/.test(inputElemType) ) {
+                      // Real url and email support comes with prebaked validation.
+                      bool = inputElem.checkValidity && inputElem.checkValidity() === false;
+
+                    } else {
+                      // If the upgraded input compontent rejects the :) text, we got a winner
+                      bool = inputElem.value != smile;
+                    }
+                }
+
+                inputs[ props[i] ] = !!bool;
+            }
+            return inputs;
+        })('search tel url email datetime date month week time datetime-local number range color'.split(' '));
+        /*>>inputtypes*/
+    }
+    /*>>webforms*/
+
+
+    // End of test definitions
+    // -----------------------
+
+
+
+    // Run through all tests and detect their support in the current UA.
+    // todo: hypothetically we could be doing an array of tests and use a basic loop here.
+    for ( var feature in tests ) {
+        if ( hasOwnProp(tests, feature) ) {
+            // run the test, throw the return value into the Modernizr,
+            //   then based on that boolean, define an appropriate className
+            //   and push it into an array of classes we'll join later.
+            featureName  = feature.toLowerCase();
+            Modernizr[featureName] = tests[feature]();
+
+            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);
+        }
+    }
+
+    /*>>webforms*/
+    // input tests need to run.
+    Modernizr.input || webforms();
+    /*>>webforms*/
+
+
+    /**
+     * addTest allows the user to define their own feature tests
+     * the result will be added onto the Modernizr object,
+     * as well as an appropriate className set on the html element
+     *
+     * @param feature - String naming the feature
+     * @param test - Function returning true if feature is supported, false if not
+     */
+     Modernizr.addTest = function ( feature, test ) {
+       if ( typeof feature == 'object' ) {
+         for ( var key in feature ) {
+           if ( hasOwnProp( feature, key ) ) {
+             Modernizr.addTest( key, feature[ key ] );
+           }
+         }
+       } else {
+
+         feature = feature.toLowerCase();
+
+         if ( Modernizr[feature] !== undefined ) {
+           // we're going to quit if you're trying to overwrite an existing test
+           // if we were to allow it, we'd do this:
+           //   var re = new RegExp("\\b(no-)?" + feature + "\\b");
+           //   docElement.className = docElement.className.replace( re, '' );
+           // but, no rly, stuff 'em.
+           return Modernizr;
+         }
+
+         test = typeof test == 'function' ? test() : test;
+
+         if (typeof enableClasses !== "undefined" && enableClasses) {
+           docElement.className += ' ' + (test ? '' : 'no-') + feature;
+         }
+         Modernizr[feature] = test;
+
+       }
+
+       return Modernizr; // allow chaining.
+     };
+
+
+    // Reset modElem.cssText to nothing to reduce memory footprint.
+    setCss('');
+    modElem = inputElem = null;
+
+    /*>>shiv*/
+    /*! HTML5 Shiv v3.6.1 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed */
+    ;(function(window, document) {
+    /*jshint evil:true */
+      /** Preset options */
+      var options = window.html5 || {};
+
+      /** Used to skip problem elements */
+      var reSkip = /^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i;
+
+      /** Not all elements can be cloned in IE **/
+      var saveClones = /^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i;
+
+      /** Detect whether the browser supports default html5 styles */
+      var supportsHtml5Styles;
+
+      /** Name of the expando, to work with multiple documents or to re-shiv one document */
+      var expando = '_html5shiv';
+
+      /** The id for the the documents expando */
+      var expanID = 0;
+
+      /** Cached data for each document */
+      var expandoData = {};
+
+      /** Detect whether the browser supports unknown elements */
+      var supportsUnknownElements;
+
+      (function() {
+        try {
+            var a = document.createElement('a');
+            a.innerHTML = '<xyz></xyz>';
+            //if the hidden property is implemented we can assume, that the browser supports basic HTML5 Styles
+            supportsHtml5Styles = ('hidden' in a);
+
+            supportsUnknownElements = a.childNodes.length == 1 || (function() {
+              // assign a false positive if unable to shiv
+              (document.createElement)('a');
+              var frag = document.createDocumentFragment();
+              return (
+                typeof frag.cloneNode == 'undefined' ||
+                typeof frag.createDocumentFragment == 'undefined' ||
+                typeof frag.createElement == 'undefined'
+              );
+            }());
+        } catch(e) {
+          supportsHtml5Styles = true;
+          supportsUnknownElements = true;
+        }
+
+      }());
+
+      /*--------------------------------------------------------------------------*/
+
+      /**
+       * Creates a style sheet with the given CSS text and adds it to the document.
+       * @private
+       * @param {Document} ownerDocument The document.
+       * @param {String} cssText The CSS text.
+       * @returns {StyleSheet} The style element.
+       */
+      function addStyleSheet(ownerDocument, cssText) {
+        var p = ownerDocument.createElement('p'),
+            parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;
+
+        p.innerHTML = 'x<style>' + cssText + '</style>';
+        return parent.insertBefore(p.lastChild, parent.firstChild);
+      }
+
+      /**
+       * Returns the value of `html5.elements` as an array.
+       * @private
+       * @returns {Array} An array of shived element node names.
+       */
+      function getElements() {
+        var elements = html5.elements;
+        return typeof elements == 'string' ? elements.split(' ') : elements;
+      }
+
+        /**
+       * Returns the data associated to the given document
+       * @private
+       * @param {Document} ownerDocument The document.
+       * @returns {Object} An object of data.
+       */
+      function getExpandoData(ownerDocument) {
+        var data = expandoData[ownerDocument[expando]];
+        if (!data) {
+            data = {};
+            expanID++;
+            ownerDocument[expando] = expanID;
+            expandoData[expanID] = data;
+        }
+        return data;
+      }
+
+      /**
+       * returns a shived element for the given nodeName and document
+       * @memberOf html5
+       * @param {String} nodeName name of the element
+       * @param {Document} ownerDocument The context document.
+       * @returns {Object} The shived element.
+       */
+      function createElement(nodeName, ownerDocument, data){
+        if (!ownerDocument) {
+            ownerDocument = document;
+        }
+        if(supportsUnknownElements){
+            return ownerDocument.createElement(nodeName);
+        }
+        if (!data) {
+            data = getExpandoData(ownerDocument);
+        }
+        var node;
+
+        if (data.cache[nodeName]) {
+            node = data.cache[nodeName].cloneNode();
+        } else if (saveClones.test(nodeName)) {
+            node = (data.cache[nodeName] = data.createElem(nodeName)).cloneNode();
+        } else {
+            node = data.createElem(nodeName);
+        }
+
+        // Avoid adding some elements to fragments in IE < 9 because
+        // * Attributes like `name` or `type` cannot be set/changed once an element
+        //   is inserted into a document/fragment
+        // * Link elements with `src` attributes that are inaccessible, as with
+        //   a 403 response, will cause the tab/window to crash
+        // * Script elements appended to fragments will execute when their `src`
+        //   or `text` property is set
+        return node.canHaveChildren && !reSkip.test(nodeName) ? data.frag.appendChild(node) : node;
+      }
+
+      /**
+       * returns a shived DocumentFragment for the given document
+       * @memberOf html5
+       * @param {Document} ownerDocument The context document.
+       * @returns {Object} The shived DocumentFragment.
+       */
+      function createDocumentFragment(ownerDocument, data){
+        if (!ownerDocument) {
+            ownerDocument = document;
+        }
+        if(supportsUnknownElements){
+            return ownerDocument.createDocumentFragment();
+        }
+        data = data || getExpandoData(ownerDocument);
+        var clone = data.frag.cloneNode(),
+            i = 0,
+            elems = getElements(),
+            l = elems.length;
+        for(;i<l;i++){
+            clone.createElement(elems[i]);
+        }
+        return clone;
+      }
+
+      /**
+       * Shivs the `createElement` and `createDocumentFragment` methods of the document.
+       * @private
+       * @param {Document|DocumentFragment} ownerDocument The document.
+       * @param {Object} data of the document.
+       */
+      function shivMethods(ownerDocument, data) {
+        if (!data.cache) {
+            data.cache = {};
+            data.createElem = ownerDocument.createElement;
+            data.createFrag = ownerDocument.createDocumentFragment;
+            data.frag = data.createFrag();
+        }
+
+
+        ownerDocument.createElement = function(nodeName) {
+          //abort shiv
+          if (!html5.shivMethods) {
+              return data.createElem(nodeName);
+          }
+          return createElement(nodeName, ownerDocument, data);
+        };
+
+        ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +
+          'var n=f.cloneNode(),c=n.createElement;' +
+          'h.shivMethods&&(' +
+            // unroll the `createElement` calls
+            getElements().join().replace(/\w+/g, function(nodeName) {
+              data.createElem(nodeName);
+              data.frag.createElement(nodeName);
+              return 'c("' + nodeName + '")';
+            }) +
+          ');return n}'
+        )(html5, data.frag);
+      }
+
+      /*--------------------------------------------------------------------------*/
+
+      /**
+       * Shivs the given document.
+       * @memberOf html5
+       * @param {Document} ownerDocument The document to shiv.
+       * @returns {Document} The shived document.
+       */
+      function shivDocument(ownerDocument) {
+        if (!ownerDocument) {
+            ownerDocument = document;
+        }
+        var data = getExpandoData(ownerDocument);
+
+        if (html5.shivCSS && !supportsHtml5Styles && !data.hasCSS) {
+          data.hasCSS = !!addStyleSheet(ownerDocument,
+            // corrects block display not defined in IE6/7/8/9
+            'article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}' +
+            // adds styling not present in IE6/7/8/9
+            'mark{background:#FF0;color:#000}'
+          );
+        }
+        if (!supportsUnknownElements) {
+          shivMethods(ownerDocument, data);
+        }
+        return ownerDocument;
+      }
+
+      /*--------------------------------------------------------------------------*/
+
+      /**
+       * The `html5` object is exposed so that more elements can be shived and
+       * existing shiving can be detected on iframes.
+       * @type Object
+       * @example
+       *
+       * // options can be changed before the script is included
+       * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };
+       */
+      var html5 = {
+
+        /**
+         * An array or space separated string of node names of the elements to shiv.
+         * @memberOf html5
+         * @type Array|String
+         */
+        'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video',
+
+        /**
+         * A flag to indicate that the HTML5 style sheet should be inserted.
+         * @memberOf html5
+         * @type Boolean
+         */
+        'shivCSS': (options.shivCSS !== false),
+
+        /**
+         * Is equal to true if a browser supports creating unknown/HTML5 elements
+         * @memberOf html5
+         * @type boolean
+         */
+        'supportsUnknownElements': supportsUnknownElements,
+
+        /**
+         * A flag to indicate that the document's `createElement` and `createDocumentFragment`
+         * methods should be overwritten.
+         * @memberOf html5
+         * @type Boolean
+         */
+        'shivMethods': (options.shivMethods !== false),
+
+        /**
+         * A string to describe the type of `html5` object ("default" or "default print").
+         * @memberOf html5
+         * @type String
+         */
+        'type': 'default',
+
+        // shivs the document according to the specified `html5` object options
+        'shivDocument': shivDocument,
+
+        //creates a shived element
+        createElement: createElement,
+
+        //creates a shived documentFragment
+        createDocumentFragment: createDocumentFragment
+      };
+
+      /*--------------------------------------------------------------------------*/
+
+      // expose html5
+      window.html5 = html5;
+
+      // shiv the document
+      shivDocument(document);
+
+    }(this, document));
+    /*>>shiv*/
+
+    // Assign private properties to the return object with prefix
+    Modernizr._version      = version;
+
+    // expose these for the plugin API. Look in the source for how to join() them against your input
+    /*>>prefixes*/
+    Modernizr._prefixes     = prefixes;
+    /*>>prefixes*/
+    /*>>domprefixes*/
+    Modernizr._domPrefixes  = domPrefixes;
+    Modernizr._cssomPrefixes  = cssomPrefixes;
+    /*>>domprefixes*/
+
+    /*>>mq*/
+    // Modernizr.mq tests a given media query, live against the current state of the window
+    // A few important notes:
+    //   * If a browser does not support media queries at all (eg. oldIE) the mq() will always return false
+    //   * A max-width or orientation query will be evaluated against the current state, which may change later.
+    //   * You must specify values. Eg. If you are testing support for the min-width media query use:
+    //       Modernizr.mq('(min-width:0)')
+    // usage:
+    // Modernizr.mq('only screen and (max-width:768)')
+    Modernizr.mq            = testMediaQuery;
+    /*>>mq*/
+
+    /*>>hasevent*/
+    // Modernizr.hasEvent() detects support for a given event, with an optional element to test on
+    // Modernizr.hasEvent('gesturestart', elem)
+    Modernizr.hasEvent      = isEventSupported;
+    /*>>hasevent*/
+
+    /*>>testprop*/
+    // Modernizr.testProp() investigates whether a given style property is recognized
+    // Note that the property names must be provided in the camelCase variant.
+    // Modernizr.testProp('pointerEvents')
+    Modernizr.testProp      = function(prop){
+        return testProps([prop]);
+    };
+    /*>>testprop*/
+
+    /*>>testallprops*/
+    // Modernizr.testAllProps() investigates whether a given style property,
+    //   or any of its vendor-prefixed variants, is recognized
+    // Note that the property names must be provided in the camelCase variant.
+    // Modernizr.testAllProps('boxSizing')
+    Modernizr.testAllProps  = testPropsAll;
+    /*>>testallprops*/
+
+
+    /*>>teststyles*/
+    // Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards
+    // Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })
+    Modernizr.testStyles    = injectElementWithStyles;
+    /*>>teststyles*/
+
+
+    /*>>prefixed*/
+    // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input
+    // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'
+
+    // Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.
+    // Return values will also be the camelCase variant, if you need to translate that to hypenated style use:
+    //
+    //     str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');
+
+    // If you're trying to ascertain which transition end event to bind to, you might do something like...
+    //
+    //     var transEndEventNames = {
+    //       'WebkitTransition' : 'webkitTransitionEnd',
+    //       'MozTransition'    : 'transitionend',
+    //       'OTransition'      : 'oTransitionEnd',
+    //       'msTransition'     : 'MSTransitionEnd',
+    //       'transition'       : 'transitionend'
+    //     },
+    //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];
+
+    Modernizr.prefixed      = function(prop, obj, elem){
+      if(!obj) {
+        return testPropsAll(prop, 'pfx');
+      } else {
+        // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'
+        return testPropsAll(prop, obj, elem);
+      }
+    };
+    /*>>prefixed*/
+
+
+    /*>>cssclasses*/
+    // Remove "no-js" class from <html> element, if it exists:
+    docElement.className = docElement.className.replace(/(^|\s)no-js(\s|$)/, '$1$2') +
+
+                            // Add the new classes to the <html> element.
+                            (enableClasses ? ' js ' + classes.join(' ') : '');
+    /*>>cssclasses*/
+
+    return Modernizr;
+
+})(this, this.document);
1 scripts/myCryptoChat.js
178 scripts/myCryptoChat/myCryptoChat.js
@@ -0,0 +1,178 @@
+function sendMessage() {
+    if ($.trim($("#userName").val()) == "") {
+        alert("Please choose a name!");
+    } else if (pageKey() == "" || pageKey() == "=") {
+        alert("The key is missing (the part of the website url after '#').");
+    } else {
+        if ($.trim($("#textMessage").val()) != "") {
+
+            var key = pageKey();
+
+            $.post("sendMessage.php", { roomId: roomId, user: zeroCipher(key, $.trim($("#userName").val())), message: zeroCipher(key, $.trim($("#textMessage").val())) }, function (data) {
+                if (data != false) {
+                    $("#textMessage").val("");
+                    $("#textMessage").focus();
+                    getMessages(false);
+                } else {
+                    // error : the message was not recorded
+                    alert("An error occured... :(");
+                }
+            });
+        }
+    }
+}
+
+var isRefreshTitle = false;
+var refreshTitleInterval;
+var nbIps = 1;
+
+function getMessages(changeTitle) {
+    var key = pageKey();
+    $.post("getMessages.php", { roomId: roomId, dateLastGetMessages: dateLastGetMessages, nbIps: nbIps }, function (data) {
+        if (data == "noRoom") {
+            // closed conversation
+            $("#chatroom").html("<i>This conversation is over... You should start a new one to keep talking!</i>");
+            stopTimerCheck();
+        } else if (data == "destroyed") {
+            // closed conversation
+            $("#chatroom").html("<i>This conversation self-destroyed. It was only created for one visitor.</i>");
+            stopTimerCheck();
+        } else if (data != "noNew") {
+            if (data.chatLines == undefined) {
+                $("#nbUsers").html(data.nbIps);
+            } else if (data.chatLines == "") {
+                if (key == "" || key == "=") {
+                    document.location.hash = "#" + sjcl.codec.base64.fromBits(sjcl.random.randomWords(8, 0), 0);
+                }
+                $("#chatroom").html("<i>No messages yet...</i>");
+            } else if (key == "" || key == "=") {
+                $("#chatroom").html("<i>The key is missing (the part of the website url after '#').</i>");
+
+                stopTimerCheck();
+            } else {
+                var hasErrors = false;
+                var hasElements = false;
+                var chatRoom = $("#chatroom");
+                chatRoom.html("");
+
+                nbIps = data.nbIps;
+                $("#nbUsers").html(data.nbIps);
+
+                for (i = 0; i < data.chatLines.length; i++) {
+                    try {
+                        var user = zeroDecipher(key, data.chatLines[i].userId);
+                        var decryptedMessage = zeroDecipher(key, data.chatLines[i].message);
+
+                        hasElements = true;
+
+                        if (vizhash.supportCanvas()) {
+                            var vhash = vizhash.canvasHash(data.chatLines[i].hash, 15, 10);
+                            chatRoom.append("<span class='chathour'>(" + getDateFromTimestamp(data.chatLines[i].date) + ")</span> ");
+                            chatRoom.append(vhash.canvas);
+                            chatRoom.append(" <a onclick='addText(\" @" + htmlEncode(user) + ": \"); return false;' class='userNameLink' href='#'><b>" + htmlEncode(user) + "</b></a> : " + replaceUrlTextWithUrl(htmlEncode(decryptedMessage)).replace(/(?:\r\n|\r|\n)/g, '<br />') + "<br />");
+                        } else {
+                            chatRoom.append("<i>" + data.chatLines[i].date + "</i> - <a onclick='addText(\" @" + htmlEncode(user) + ": \"); return false;' class='userNameLink' href='#'><b>" + htmlEncode(user) + "</b></a> : ");
+                            chatRoom.append(" <b>" + htmlEncode(user) + "</b> : " + replaceUrlTextWithUrl(htmlEncode(decryptedMessage)).replace(/(?:\r\n|\r|\n)/g, '<br />') + "<br />");
+                        }
+                    } catch (e) {
+                        hasErrors = true;
+                    }
+                }
+                if (!hasElements && hasErrors) {
+                    // wrong key error
+                    chatRoom.html("The key seems to be corrupted. Are you sure that you copied the full URL (with #xxxxxxxxxxxxxxxx-xxxxxxx-xxxxxxxx) ?");
+
+                    stopTimerCheck();
+                } else {
+                    var objDiv = document.getElementById("chatroom");
+                    objDiv.scrollTop = objDiv.scrollHeight;
+                    dateLastGetMessages = data.dateLastGetMessages;
+
+                    if (changeTitle && !isRefreshTitle) {
+                        refreshTitleInterval = setInterval(
+                            function () {
+                                if (document.title == "Private chat room - MyCryptoChat by HowTommy.net") {
+                                    document.title = "New messages ! - MyCryptoChat by HowTommy.net";
+                                } else {
+                                    document.title = "Private chat room - MyCryptoChat by HowTommy.net";
+                                }
+                            }, 3000);
+                        isRefreshTitle = true;
+                    }
+                }
+            }
+        }
+    });
+}
+
+function replaceUrlTextWithUrl(content) {
+    var re = /((http|https|ftp):\/\/[\w?=&.\/-;#@~%+-]+(?![\w\s?&.\/;#~%"=-]*>))/ig;
+    content = content.replace(re, '<a href="$1" rel="nofollow">$1</a>');
+    re = /((magnet):[\w?=&.\/-;#@~%+-]+)/ig;
+    content = content.replace(re, '<a href="$1">$1</a>');
+    return content;
+}
+
+function stopRefreshTitle() {
+    if (isRefreshTitle) {
+        clearInterval(refreshTitleInterval);
+        document.title = "Private chat room - MyCryptoChat by HowTommy.net";
+        isRefreshTitle = false;
+    }
+}
+
+function htmlEncode(value) {
+    return $('<div/>').text(value).html();
+}
+
+var checkIntervalTimer;
+
+function stopTimerCheck() {
+    clearInterval(checkIntervalTimer);
+}
+
+function getDateFromTimestamp(date) {
+    var date = new Date(date * 1000);
+    var hours = date.getHours();
+    var minutes = date.getMinutes();
+    hours = hours > 9 ? hours : "0" + hours;
+    minutes = minutes > 9 ? minutes : "0" + minutes;
+
+    return hours + ':' + minutes;
+}
+
+function removeChatroom(withPassword) {
+    if (confirm('Are you sure?')) {
+        var removePassword = '';
+        if (withPassword) {
+            var removePassword = prompt("Please enter the password to remove the chat room", "");
+        }
+        $.post("removeChatroom.php", { roomId: roomId, removePassword: removePassword }, function (data) {
+            if (data == "error") {
+                alert('An error occured');
+            } else if (data == "wrongPassword") {
+                alert('Wrong password');
+            } else if (data == "removed") {
+                alert('The chat room has been removed.');
+                window.location = 'index.php';
+            }
+        });
+    }
+}
+
+function addText(text) {
+    var editor = $('#textMessage');
+    var value = editor.val();
+    editor.val("");
+    editor.focus();
+    editor.val(value + text);
+}
+
+$(function () {
+    getMessages(false);
+
+    // try to get new messages every 15 seconds
+    checkIntervalTimer = setInterval("getMessages(true)", 15000);
+
+    $('body').on('mousemove', stopRefreshTitle);
+});
1 scripts/zerobin.js
237 scripts/zerobin/base64.js
@@ -0,0 +1,237 @@
+/*
+ * $Id: base64.js,v 1.7 2012/08/23 10:30:18 dankogai Exp dankogai $
+ *
+ *  Licensed under the MIT license.
+ *  http://www.opensource.org/licenses/mit-license.php
+ *
+ *  References:
+ *    http://en.wikipedia.org/wiki/Base64
+ */
+
+(function(global){
+
+var b64chars
+    = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
+
+var b64charcodes = function(){
+    var a = [];
+    var codeA = 'A'.charCodeAt(0);
+    var codea = 'a'.charCodeAt(0);
+    var code0 = '0'.charCodeAt(0);
+    for (var i = 0; i < 26; i ++) a.push(codeA + i);
+    for (var i = 0; i < 26; i ++) a.push(codea + i);
+    for (var i = 0; i < 10; i ++) a.push(code0 + i);
+    a.push('+'.charCodeAt(0));
+    a.push('/'.charCodeAt(0));
+    return a;
+}();
+
+var b64tab = function(bin){
+    var t = {};
+    for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;
+    return t;
+}(b64chars);
+
+var stringToArray = function(s){
+    var a = [];
+    for (var i = 0, l = s.length; i < l; i ++) a[i] = s.charCodeAt(i);
+    return a;
+};
+
+var convertUTF8ArrayToBase64 = function(bin){
+    var padlen = 0;
+    while (bin.length % 3){
+        bin.push(0);
+        padlen++;
+    };
+    var b64 = [];
+    for (var i = 0, l = bin.length; i < l; i += 3){
+        var c0 = bin[i], c1 = bin[i+1], c2 = bin[i+2];
+        if (c0 >= 256 || c1 >= 256 || c2 >= 256)
+            throw 'unsupported character found';
+        var n = (c0 << 16) | (c1 << 8) | c2;
+        b64.push(
+            b64charcodes[ n >>> 18],
+            b64charcodes[(n >>> 12) & 63],
+            b64charcodes[(n >>>  6) & 63],
+            b64charcodes[ n         & 63]
+        );
+    }
+    while (padlen--) b64[b64.length - padlen - 1] = '='.charCodeAt(0);
+    return chunkStringFromCharCodeApply(b64);
+};
+
+var convertBase64ToUTF8Array = function(b64){
+    b64 = b64.replace(/[^A-Za-z0-9+\/]+/g, '');
+    var bin = [];
+    var padlen = b64.length % 4;
+    for (var i = 0, l = b64.length; i < l; i += 4){
+        var n = ((b64tab[b64.charAt(i  )] || 0) << 18)
+            |   ((b64tab[b64.charAt(i+1)] || 0) << 12)
+            |   ((b64tab[b64.charAt(i+2)] || 0) <<  6)
+            |   ((b64tab[b64.charAt(i+3)] || 0));
+        bin.push(
+            (  n >> 16 ),
+            ( (n >>  8) & 0xff ),
+            (  n        & 0xff )
+        );
+    }
+    bin.length -= [0,0,2,1][padlen];
+    return bin;
+};
+
+var convertUTF16ArrayToUTF8Array = function(uni){
+    var bin = [];
+    for (var i = 0, l = uni.length; i < l; i++){
+        var n = uni[i];
+        if (n < 0x80)
+            bin.push(n);
+        else if (n < 0x800)
+            bin.push(
+                0xc0 | (n >>>  6),
+                0x80 | (n & 0x3f));
+        else
+            bin.push(
+                0xe0 | ((n >>> 12) & 0x0f),
+                0x80 | ((n >>>  6) & 0x3f),
+                0x80 |  (n         & 0x3f));
+    }
+    return bin;
+};
+
+var convertUTF8ArrayToUTF16Array = function(bin){
+    var uni = [];
+    for (var i = 0, l = bin.length; i < l; i++){
+        var c0 = bin[i];
+        if    (c0 < 0x80){
+            uni.push(c0);
+        }else{
+            var c1 = bin[++i];
+            if (c0 < 0xe0){
+                uni.push(((c0 & 0x1f) << 6) | (c1 & 0x3f));
+            }else{
+                var c2 = bin[++i];
+                uni.push(
+                       ((c0 & 0x0f) << 12) | ((c1 & 0x3f) << 6) | (c2 & 0x3f)
+                );
+            }
+        }
+    }
+    return uni;
+};
+
+var convertUTF8StringToBase64 = function(bin){
+    return convertUTF8ArrayToBase64(stringToArray(bin));
+};
+
+var convertBase64ToUTF8String = function(b64){
+    return chunkStringFromCharCodeApply(convertBase64ToUTF8Array(b64));
+};
+
+var convertUTF8StringToUTF16Array = function(bin){
+    return convertUTF8ArrayToUTF16Array(stringToArray(bin));
+};
+
+var convertUTF8ArrayToUTF16String = function(bin){
+    return chunkStringFromCharCodeApply(convertUTF8ArrayToUTF16Array(bin));
+};
+
+var convertUTF8StringToUTF16String = function(bin){
+    return chunkStringFromCharCodeApply(
+        convertUTF8ArrayToUTF16Array(stringToArray(bin))
+    );
+};
+
+var convertUTF16StringToUTF8Array = function(uni){
+    return convertUTF16ArrayToUTF8Array(stringToArray(uni));
+};
+
+var convertUTF16ArrayToUTF8String = function(uni){
+    return chunkStringFromCharCodeApply(convertUTF16ArrayToUTF8Array(uni));
+};
+
+var convertUTF16StringToUTF8String = function(uni){
+    return chunkStringFromCharCodeApply(
+        convertUTF16ArrayToUTF8Array(stringToArray(uni))
+    );
+};
+
+/*
+ * String.fromCharCode.apply will only handle arrays as big as 65536, 
+ * after that it'll return a truncated string with no warning.
+ */
+var chunkStringFromCharCodeApply = function(arr){
+    var strs = [], i;
+    for (i = 0; i < arr.length; i += 65536){
+        strs.push(String.fromCharCode.apply(String, arr.slice(i, i+65536)));
+    }
+    return strs.join('');
+};
+
+if (global.btoa){
+    var btoa = global.btoa;
+    var convertUTF16StringToBase64 = function (uni){
+        return btoa(convertUTF16StringToUTF8String(uni));
+    };
+}
+else {
+    var btoa = convertUTF8StringToBase64;
+    var convertUTF16StringToBase64 = function (uni){
+        return convertUTF8ArrayToBase64(convertUTF16StringToUTF8Array(uni));
+    };
+}
+
+if (global.atob){
+    var atob = global.atob;
+    var convertBase64ToUTF16String = function (b64){
+        return convertUTF8StringToUTF16String(atob(b64));
+    };
+}
+else {
+    var atob = convertBase64ToUTF8String;
+    var convertBase64ToUTF16String = function (b64){
+        return convertUTF8ArrayToUTF16String(convertBase64ToUTF8Array(b64));
+    };
+}
+
+global.Base64 = {
+    convertUTF8ArrayToBase64:convertUTF8ArrayToBase64,
+    convertByteArrayToBase64:convertUTF8ArrayToBase64,
+    convertBase64ToUTF8Array:convertBase64ToUTF8Array,
+    convertBase64ToByteArray:convertBase64ToUTF8Array,
+    convertUTF16ArrayToUTF8Array:convertUTF16ArrayToUTF8Array,
+    convertUTF16ArrayToByteArray:convertUTF16ArrayToUTF8Array,
+    convertUTF8ArrayToUTF16Array:convertUTF8ArrayToUTF16Array,
+    convertByteArrayToUTF16Array:convertUTF8ArrayToUTF16Array,
+    convertUTF8StringToBase64:convertUTF8StringToBase64,
+    convertBase64ToUTF8String:convertBase64ToUTF8String,
+    convertUTF8StringToUTF16Array:convertUTF8StringToUTF16Array,
+    convertUTF8ArrayToUTF16String:convertUTF8ArrayToUTF16String,
+    convertByteArrayToUTF16String:convertUTF8ArrayToUTF16String,
+    convertUTF8StringToUTF16String:convertUTF8StringToUTF16String,
+    convertUTF16StringToUTF8Array:convertUTF16StringToUTF8Array,
+    convertUTF16StringToByteArray:convertUTF16StringToUTF8Array,
+    convertUTF16ArrayToUTF8String:convertUTF16ArrayToUTF8String,
+    convertUTF16StringToUTF8String:convertUTF16StringToUTF8String,
+    convertUTF16StringToBase64:convertUTF16StringToBase64,
+    convertBase64ToUTF16String:convertBase64ToUTF16String,
+    fromBase64:convertBase64ToUTF8String,
+    toBase64:convertUTF8StringToBase64,
+    atob:atob,
+    btoa:btoa,
+    utob:convertUTF16StringToUTF8String,
+    btou:convertUTF8StringToUTF16String,
+    encode:convertUTF16StringToBase64,
+    encodeURI:function(u){
+        return convertUTF16StringToBase64(u).replace(/[+\/]/g, function(m0){
+            return m0 == '+' ? '-' : '_';
+        }).replace(/=+$/, '');
+    },
+    decode:function(a){
+        return convertBase64ToUTF16String(a.replace(/[-_]/g, function(m0){
+            return m0 == '-' ? '+' : '/';
+        }));
+    }
+};
+
+})(this);
1,671 scripts/zerobin/rawdeflate.js
@@ -0,0 +1,1671 @@
+/*
+ * $Id: rawdeflate.js,v 0.3 2009/03/01 19:05:05 dankogai Exp dankogai $
+ *
+ * Original:
+ *   http://www.onicos.com/staff/iz/amuse/javascript/expert/deflate.txt
+ */
+
+(function(){
+
+/* Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
+ * Version: 1.0.1
+ * LastModified: Dec 25 1999
+ */
+
+/* Interface:
+ * data = zip_deflate(src);
+ */
+
+/* constant parameters */
+var zip_WSIZE = 32768;		// Sliding Window size
+var zip_STORED_BLOCK = 0;
+var zip_STATIC_TREES = 1;
+var zip_DYN_TREES    = 2;
+
+/* for deflate */
+var zip_DEFAULT_LEVEL = 6;
+var zip_FULL_SEARCH = true;
+var zip_INBUFSIZ = 32768;	// Input buffer size
+var zip_INBUF_EXTRA = 64;	// Extra buffer
+var zip_OUTBUFSIZ = 1024 * 8;
+var zip_window_size = 2 * zip_WSIZE;
+var zip_MIN_MATCH = 3;
+var zip_MAX_MATCH = 258;
+var zip_BITS = 16;
+// for SMALL_MEM
+var zip_LIT_BUFSIZE = 0x2000;
+var zip_HASH_BITS = 13;
+// for MEDIUM_MEM
+// var zip_LIT_BUFSIZE = 0x4000;
+// var zip_HASH_BITS = 14;
+// for BIG_MEM
+// var zip_LIT_BUFSIZE = 0x8000;
+// var zip_HASH_BITS = 15;
+if(zip_LIT_BUFSIZE > zip_INBUFSIZ)
+    alert("error: zip_INBUFSIZ is too small");
+if((zip_WSIZE<<1) > (1<<zip_BITS))
+    alert("error: zip_WSIZE is too large");
+if(zip_HASH_BITS > zip_BITS-1)
+    alert("error: zip_HASH_BITS is too large");
+if(zip_HASH_BITS < 8 || zip_MAX_MATCH != 258)
+    alert("error: Code too clever");
+var zip_DIST_BUFSIZE = zip_LIT_BUFSIZE;
+var zip_HASH_SIZE = 1 << zip_HASH_BITS;
+var zip_HASH_MASK = zip_HASH_SIZE - 1;
+var zip_WMASK = zip_WSIZE - 1;
+var zip_NIL = 0; // Tail of hash chains
+var zip_TOO_FAR = 4096;
+var zip_MIN_LOOKAHEAD = zip_MAX_MATCH + zip_MIN_MATCH + 1;
+var zip_MAX_DIST = zip_WSIZE - zip_MIN_LOOKAHEAD;
+var zip_SMALLEST = 1;
+var zip_MAX_BITS = 15;
+var zip_MAX_BL_BITS = 7;
+var zip_LENGTH_CODES = 29;
+var zip_LITERALS =256;
+var zip_END_BLOCK = 256;
+var zip_L_CODES = zip_LITERALS + 1 + zip_LENGTH_CODES;
+var zip_D_CODES = 30;
+var zip_BL_CODES = 19;
+var zip_REP_3_6 = 16;
+var zip_REPZ_3_10 = 17;
+var zip_REPZ_11_138 = 18;
+var zip_HEAP_SIZE = 2 * zip_L_CODES + 1;
+var zip_H_SHIFT = parseInt((zip_HASH_BITS + zip_MIN_MATCH - 1) /
+			   zip_MIN_MATCH);
+
+/* variables */
+var zip_free_queue;
+var zip_qhead, zip_qtail;
+var zip_initflag;
+var zip_outbuf = null;
+var zip_outcnt, zip_outoff;
+var zip_complete;
+var zip_window;
+var zip_d_buf;
+var zip_l_buf;
+var zip_prev;
+var zip_bi_buf;
+var zip_bi_valid;
+var zip_block_start;
+var zip_ins_h;
+var zip_hash_head;
+var zip_prev_match;
+var zip_match_available;
+var zip_match_length;
+var zip_prev_length;
+var zip_strstart;
+var zip_match_start;
+var zip_eofile;
+var zip_lookahead;
+var zip_max_chain_length;
+var zip_max_lazy_match;
+var zip_compr_level;
+var zip_good_match;
+var zip_nice_match;
+var zip_dyn_ltree;
+var zip_dyn_dtree;
+var zip_static_ltree;
+var zip_static_dtree;
+var zip_bl_tree;
+var zip_l_desc;
+var zip_d_desc;
+var zip_bl_desc;
+var zip_bl_count;
+var zip_heap;
+var zip_heap_len;
+var zip_heap_max;
+var zip_depth;
+var zip_length_code;
+var zip_dist_code;
+var zip_base_length;
+var zip_base_dist;
+var zip_flag_buf;
+var zip_last_lit;
+var zip_last_dist;
+var zip_last_flags;
+var zip_flags;
+var zip_flag_bit;
+var zip_opt_len;
+var zip_static_len;
+var zip_deflate_data;
+var zip_deflate_pos;
+
+/* objects (deflate) */
+
+var zip_DeflateCT = function() {
+    this.fc = 0; // frequency count or bit string
+    this.dl = 0; // father node in Huffman tree or length of bit string
+}
+
+var zip_DeflateTreeDesc = function() {
+    this.dyn_tree = null;	// the dynamic tree
+    this.static_tree = null;	// corresponding static tree or NULL
+    this.extra_bits = null;	// extra bits for each code or NULL
+    this.extra_base = 0;	// base index for extra_bits
+    this.elems = 0;		// max number of elements in the tree
+    this.max_length = 0;	// max bit length for the codes
+    this.max_code = 0;		// largest code with non zero frequency
+}
+
+/* Values for max_lazy_match, good_match and max_chain_length, depending on
+ * the desired pack level (0..9). The values given below have been tuned to
+ * exclude worst case performance for pathological files. Better values may be
+ * found for specific files.
+ */
+var zip_DeflateConfiguration = function(a, b, c, d) {
+    this.good_length = a; // reduce lazy search above this match length
+    this.max_lazy = b;    // do not perform lazy search above this match length
+    this.nice_length = c; // quit search above this match length
+    this.max_chain = d;
+}
+
+var zip_DeflateBuffer = function() {
+    this.next = null;
+    this.len = 0;
+    this.ptr = new Array(zip_OUTBUFSIZ);
+    this.off = 0;
+}
+
+/* constant tables */
+var zip_extra_lbits = new Array(
+    0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0);
+var zip_extra_dbits = new Array(
+    0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13);
+var zip_extra_blbits = new Array(
+    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7);
+var zip_bl_order = new Array(
+    16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15);
+var zip_configuration_table = new Array(
+	new zip_DeflateConfiguration(0,    0,   0,    0),
+	new zip_DeflateConfiguration(4,    4,   8,    4),
+	new zip_DeflateConfiguration(4,    5,  16,    8),
+	new zip_DeflateConfiguration(4,    6,  32,   32),
+	new zip_DeflateConfiguration(4,    4,  16,   16),
+	new zip_DeflateConfiguration(8,   16,  32,   32),
+	new zip_DeflateConfiguration(8,   16, 128,  128),
+	new zip_DeflateConfiguration(8,   32, 128,  256),
+	new zip_DeflateConfiguration(32, 128, 258, 1024),
+	new zip_DeflateConfiguration(32, 258, 258, 4096));
+
+
+/* routines (deflate) */
+
+var zip_deflate_start = function(level) {
+    var i;
+
+    if(!level)
+	level = zip_DEFAULT_LEVEL;
+    else if(level < 1)
+	level = 1;
+    else if(level > 9)
+	level = 9;
+
+    zip_compr_level = level;
+    zip_initflag = false;
+    zip_eofile = false;
+    if(zip_outbuf != null)
+	return;
+
+    zip_free_queue = zip_qhead = zip_qtail = null;
+    zip_outbuf = new Array(zip_OUTBUFSIZ);
+    zip_window = new Array(zip_window_size);
+    zip_d_buf = new Array(zip_DIST_BUFSIZE);
+    zip_l_buf = new Array(zip_INBUFSIZ + zip_INBUF_EXTRA);
+    zip_prev = new Array(1 << zip_BITS);
+    zip_dyn_ltree = new Array(zip_HEAP_SIZE);
+    for(i = 0; i < zip_HEAP_SIZE; i++)
+	zip_dyn_ltree[i] = new zip_DeflateCT();
+    zip_dyn_dtree = new Array(2*zip_D_CODES+1);
+    for(i = 0; i < 2*zip_D_CODES+1; i++)
+	zip_dyn_dtree[i] = new zip_DeflateCT();
+    zip_static_ltree = new Array(zip_L_CODES+2);
+    for(i = 0; i < zip_L_CODES+2; i++)
+	zip_static_ltree[i] = new zip_DeflateCT();
+    zip_static_dtree = new Array(zip_D_CODES);
+    for(i = 0; i < zip_D_CODES; i++)
+	zip_static_dtree[i] = new zip_DeflateCT();
+    zip_bl_tree = new Array(2*zip_BL_CODES+1);
+    for(i = 0; i < 2*zip_BL_CODES+1; i++)
+	zip_bl_tree[i] = new zip_DeflateCT();
+    zip_l_desc = new zip_DeflateTreeDesc();
+    zip_d_desc = new zip_DeflateTreeDesc();
+    zip_bl_desc = new zip_DeflateTreeDesc();
+    zip_bl_count = new Array(zip_MAX_BITS+1);
+    zip_heap = new Array(2*zip_L_CODES+1);
+    zip_depth = new Array(2*zip_L_CODES+1);
+    zip_length_code = new Array(zip_MAX_MATCH-zip_MIN_MATCH+1);
+    zip_dist_code = new Array(512);
+    zip_base_length = new Array(zip_LENGTH_CODES);
+    zip_base_dist = new Array(zip_D_CODES);
+    zip_flag_buf = new Array(parseInt(zip_LIT_BUFSIZE / 8));
+}
+
+var zip_deflate_end = function() {
+    zip_free_queue = zip_qhead = zip_qtail = null;
+    zip_outbuf = null;
+    zip_window = null;
+    zip_d_buf = null;
+    zip_l_buf = null;
+    zip_prev = null;
+    zip_dyn_ltree = null;
+    zip_dyn_dtree = null;
+    zip_static_ltree = null;
+    zip_static_dtree = null;
+    zip_bl_tree = null;
+    zip_l_desc = null;
+    zip_d_desc = null;
+    zip_bl_desc = null;
+    zip_bl_count = null;
+    zip_heap = null;
+    zip_depth = null;
+    zip_length_code = null;
+    zip_dist_code = null;
+    zip_base_length = null;
+    zip_base_dist = null;
+    zip_flag_buf = null;
+}
+
+var zip_reuse_queue = function(p) {
+    p.next = zip_free_queue;
+    zip_free_queue = p;
+}
+
+var zip_new_queue = function() {
+    var p;
+
+    if(zip_free_queue != null)
+    {
+	p = zip_free_queue;
+	zip_free_queue = zip_free_queue.next;
+    }
+    else
+	p = new zip_DeflateBuffer();
+    p.next = null;
+    p.len = p.off = 0;
+
+    return p;
+}
+
+var zip_head1 = function(i) {
+    return zip_prev[zip_WSIZE + i];
+}
+
+var zip_head2 = function(i, val) {
+    return zip_prev[zip_WSIZE + i] = val;
+}
+
+/* put_byte is used for the compressed output, put_ubyte for the
+ * uncompressed output. However unlzw() uses window for its
+ * suffix table instead of its output buffer, so it does not use put_ubyte
+ * (to be cleaned up).
+ */
+var zip_put_byte = function(c) {
+    zip_outbuf[zip_outoff + zip_outcnt++] = c;
+    if(zip_outoff + zip_outcnt == zip_OUTBUFSIZ)
+	zip_qoutbuf();
+}
+
+/* Output a 16 bit value, lsb first */
+var zip_put_short = function(w) {
+    w &= 0xffff;
+    if(zip_outoff + zip_outcnt < zip_OUTBUFSIZ - 2) {
+	zip_outbuf[zip_outoff + zip_outcnt++] = (w & 0xff);
+	zip_outbuf[zip_outoff + zip_outcnt++] = (w >>> 8);
+    } else {
+	zip_put_byte(w & 0xff);
+	zip_put_byte(w >>> 8);
+    }
+}
+
+/* ==========================================================================
+ * Insert string s in the dictionary and set match_head to the previous head
+ * of the hash chain (the most recent string with same hash key). Return
+ * the previous length of the hash chain.
+ * IN  assertion: all calls to to INSERT_STRING are made with consecutive
+ *    input characters and the first MIN_MATCH bytes of s are valid
+ *    (except for the last MIN_MATCH-1 bytes of the input file).
+ */
+var zip_INSERT_STRING = function() {
+    zip_ins_h = ((zip_ins_h << zip_H_SHIFT)
+		 ^ (zip_window[zip_strstart + zip_MIN_MATCH - 1] & 0xff))
+	& zip_HASH_MASK;
+    zip_hash_head = zip_head1(zip_ins_h);
+    zip_prev[zip_strstart & zip_WMASK] = zip_hash_head;
+    zip_head2(zip_ins_h, zip_strstart);
+}
+
+/* Send a code of the given tree. c and tree must not have side effects */
+var zip_SEND_CODE = function(c, tree) {
+    zip_send_bits(tree[c].fc, tree[c].dl);
+}
+
+/* Mapping from a distance to a distance code. dist is the distance - 1 and
+ * must not have side effects. dist_code[256] and dist_code[257] are never
+ * used.
+ */
+var zip_D_CODE = function(dist) {
+    return (dist < 256 ? zip_dist_code[dist]
+	    : zip_dist_code[256 + (dist>>7)]) & 0xff;
+}
+
+/* ==========================================================================
+ * Compares to subtrees, using the tree depth as tie breaker when
+ * the subtrees have equal frequency. This minimizes the worst case length.
+ */
+var zip_SMALLER = function(tree, n, m) {
+    return tree[n].fc < tree[m].fc ||
+      (tree[n].fc == tree[m].fc && zip_depth[n] <= zip_depth[m]);
+}
+
+/* ==========================================================================
+ * read string data
+ */
+var zip_read_buff = function(buff, offset, n) {
+    var i;
+    for(i = 0; i < n && zip_deflate_pos < zip_deflate_data.length; i++)
+	buff[offset + i] =
+	    zip_deflate_data.charCodeAt(zip_deflate_pos++) & 0xff;
+    return i;
+}
+
+/* ==========================================================================
+ * Initialize the "longest match" routines for a new file
+ */
+var zip_lm_init = function() {
+    var j;
+
+    /* Initialize the hash table. */
+    for(j = 0; j < zip_HASH_SIZE; j++)
+//	zip_head2(j, zip_NIL);
+	zip_prev[zip_WSIZE + j] = 0;
+    /* prev will be initialized on the fly */
+
+    /* Set the default configuration parameters:
+     */
+    zip_max_lazy_match = zip_configuration_table[zip_compr_level].max_lazy;
+    zip_good_match     = zip_configuration_table[zip_compr_level].good_length;
+    if(!zip_FULL_SEARCH)
+	zip_nice_match = zip_configuration_table[zip_compr_level].nice_length;
+    zip_max_chain_length = zip_configuration_table[zip_compr_level].max_chain;
+
+    zip_strstart = 0;
+    zip_block_start = 0;
+
+    zip_lookahead = zip_read_buff(zip_window, 0, 2 * zip_WSIZE);
+    if(zip_lookahead <= 0) {
+	zip_eofile = true;
+	zip_lookahead = 0;
+	return;
+    }
+    zip_eofile = false;
+    /* Make sure that we always have enough lookahead. This is important
+     * if input comes from a device such as a tty.
+     */
+    while(zip_lookahead < zip_MIN_LOOKAHEAD && !zip_eofile)
+	zip_fill_window();
+
+    /* If lookahead < MIN_MATCH, ins_h is garbage, but this is
+     * not important since only literal bytes will be emitted.
+     */
+    zip_ins_h = 0;
+    for(j = 0; j < zip_MIN_MATCH - 1; j++) {
+//      UPDATE_HASH(ins_h, window[j]);
+	zip_ins_h = ((zip_ins_h << zip_H_SHIFT) ^ (zip_window[j] & 0xff)) & zip_HASH_MASK;
+    }
+}
+
+/* ==========================================================================
+ * Set match_start to the longest match starting at the given string and
+ * return its length. Matches shorter or equal to prev_length are discarded,
+ * in which case the result is equal to prev_length and match_start is
+ * garbage.
+ * IN assertions: cur_match is the head of the hash chain for the current
+ *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1
+ */
+var zip_longest_match = function(cur_match) {
+    var chain_length = zip_max_chain_length; // max hash chain length
+    var scanp = zip_strstart; // current string
+    var matchp;		// matched string
+    var len;		// length of current match
+    var best_len = zip_prev_length;	// best match length so far
+
+    /* Stop when cur_match becomes <= limit. To simplify the code,
+     * we prevent matches with the string of window index 0.
+     */
+    var limit = (zip_strstart > zip_MAX_DIST ? zip_strstart - zip_MAX_DIST : zip_NIL);
+
+    var strendp = zip_strstart + zip_MAX_MATCH;
+    var scan_end1 = zip_window[scanp + best_len - 1];
+    var scan_end  = zip_window[scanp + best_len];
+
+    /* Do not waste too much time if we already have a good match: */
+    if(zip_prev_length >= zip_good_match)
+	chain_length >>= 2;
+
+//  Assert(encoder->strstart <= window_size-MIN_LOOKAHEAD, "insufficient lookahead");
+
+    do {
+//    Assert(cur_match < encoder->strstart, "no future");
+	matchp = cur_match;
+
+	/* Skip to next match if the match length cannot increase
+	    * or if the match length is less than 2:
+	*/
+	if(zip_window[matchp + best_len]	!= scan_end  ||
+	   zip_window[matchp + best_len - 1]	!= scan_end1 ||
+	   zip_window[matchp]			!= zip_window[scanp] ||
+	   zip_window[++matchp]			!= zip_window[scanp + 1]) {
+	    continue;
+	}
+
+	/* The check at best_len-1 can be removed because it will be made
+         * again later. (This heuristic is not always a win.)
+         * It is not necessary to compare scan[2] and match[2] since they
+         * are always equal when the other bytes match, given that
+         * the hash keys are equal and that HASH_BITS >= 8.
+         */
+	scanp += 2;
+	matchp++;
+
+	/* We check for insufficient lookahead only every 8th comparison;
+         * the 256th check will be made at strstart+258.
+         */
+	do {
+	} while(zip_window[++scanp] == zip_window[++matchp] &&
+		zip_window[++scanp] == zip_window[++matchp] &&
+		zip_window[++scanp] == zip_window[++matchp] &&
+		zip_window[++scanp] == zip_window[++matchp] &&
+		zip_window[++scanp] == zip_window[++matchp] &&
+		zip_window[++scanp] == zip_window[++matchp] &&
+		zip_window[++scanp] == zip_window[++matchp] &&
+		zip_window[++scanp] == zip_window[++matchp] &&
+		scanp < strendp);
+
+      len = zip_MAX_MATCH - (strendp - scanp);
+      scanp = strendp - zip_MAX_MATCH;
+
+      if(len > best_len) {
+	  zip_match_start = cur_match;
+	  best_len = len;
+	  if(zip_FULL_SEARCH) {
+	      if(len >= zip_MAX_MATCH) break;
+	  } else {
+	      if(len >= zip_nice_match) break;
+	  }
+
+	  scan_end1  = zip_window[scanp + best_len-1];
+	  scan_end   = zip_window[scanp + best_len];
+      }
+    } while((cur_match = zip_prev[cur_match & zip_WMASK]) > limit
+	    && --chain_length != 0);
+
+    return best_len;
+}
+
+/* ==========================================================================
+ * Fill the window when the lookahead becomes insufficient.
+ * Updates strstart and lookahead, and sets eofile if end of input file.
+ * IN assertion: lookahead < MIN_LOOKAHEAD && strstart + lookahead > 0
+ * OUT assertions: at least one byte has been read, or eofile is set;
+ *    file reads are performed for at least two bytes (required for the
+ *    translate_eol option).
+ */
+var zip_fill_window = function() {
+    var n, m;
+
+    // Amount of free space at the end of the window.
+    var more = zip_window_size - zip_lookahead - zip_strstart;
+
+    /* If the window is almost full and there is insufficient lookahead,
+     * move the upper half to the lower one to make room in the upper half.
+     */
+    if(more == -1) {
+	/* Very unlikely, but possible on 16 bit machine if strstart == 0
+         * and lookahead == 1 (input done one byte at time)
+         */
+	more--;
+    } else if(zip_strstart >= zip_WSIZE + zip_MAX_DIST) {
+	/* By the IN assertion, the window is not empty so we can't confuse
+         * more == 0 with more == 64K on a 16 bit machine.
+         */
+//	Assert(window_size == (ulg)2*WSIZE, "no sliding with BIG_MEM");
+
+//	System.arraycopy(window, WSIZE, window, 0, WSIZE);
+	for(n = 0; n < zip_WSIZE; n++)
+	    zip_window[n] = zip_window[n + zip_WSIZE];
+      
+	zip_match_start -= zip_WSIZE;
+	zip_strstart    -= zip_WSIZE; /* we now have strstart >= MAX_DIST: */
+	zip_block_start -= zip_WSIZE;
+
+	for(n = 0; n < zip_HASH_SIZE; n++) {
+	    m = zip_head1(n);
+	    zip_head2(n, m >= zip_WSIZE ? m - zip_WSIZE : zip_NIL);
+	}
+	for(n = 0; n < zip_WSIZE; n++) {
+	    /* If n is not on any hash chain, prev[n] is garbage but
+	     * its value will never be used.
+	     */
+	    m = zip_prev[n];
+	    zip_prev[n] = (m >= zip_WSIZE ? m - zip_WSIZE : zip_NIL);
+	}
+	more += zip_WSIZE;
+    }
+    // At this point, more >= 2
+    if(!zip_eofile) {
+	n = zip_read_buff(zip_window, zip_strstart + zip_lookahead, more);
+	if(n <= 0)
+	    zip_eofile = true;
+	else
+	    zip_lookahead += n;
+    }
+}
+
+/* ==========================================================================
+ * Processes a new input file and return its compressed length. This
+ * function does not perform lazy evaluationof matches and inserts
+ * new strings in the dictionary only for unmatched strings or for short
+ * matches. It is used only for the fast compression options.
+ */
+var zip_deflate_fast = function() {
+    while(zip_lookahead != 0 && zip_qhead == null) {
+	var flush; // set if current block must be flushed
+
+	/* Insert the string window[strstart .. strstart+2] in the
+	 * dictionary, and set hash_head to the head of the hash chain:
+	 */
+	zip_INSERT_STRING();
+
+	/* Find the longest match, discarding those <= prev_length.
+	 * At this point we have always match_length < MIN_MATCH
+	 */
+	if(zip_hash_head != zip_NIL &&
+	   zip_strstart - zip_hash_head <= zip_MAX_DIST) {
+	    /* To simplify the code, we prevent matches with the string
+	     * of window index 0 (in particular we have to avoid a match
+	     * of the string with itself at the start of the input file).
+	     */
+	    zip_match_length = zip_longest_match(zip_hash_head);
+	    /* longest_match() sets match_start */
+	    if(zip_match_length > zip_lookahead)
+		zip_match_length = zip_lookahead;
+	}
+	if(zip_match_length >= zip_MIN_MATCH) {
+//	    check_match(strstart, match_start, match_length);
+
+	    flush = zip_ct_tally(zip_strstart - zip_match_start,
+				 zip_match_length - zip_MIN_MATCH);
+	    zip_lookahead -= zip_match_length;
+
+	    /* Insert new strings in the hash table only if the match length
+	     * is not too large. This saves time but degrades compression.
+	     */
+	    if(zip_match_length <= zip_max_lazy_match) {
+		zip_match_length--; // string at strstart already in hash table
+		do {
+		    zip_strstart++;
+		    zip_INSERT_STRING();
+		    /* strstart never exceeds WSIZE-MAX_MATCH, so there are
+		     * always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH
+		     * these bytes are garbage, but it does not matter since
+		     * the next lookahead bytes will be emitted as literals.
+		     */
+		} while(--zip_match_length != 0);
+		zip_strstart++;
+	    } else {
+		zip_strstart += zip_match_length;
+		zip_match_length = 0;
+		zip_ins_h = zip_window[zip_strstart] & 0xff;
+//		UPDATE_HASH(ins_h, window[strstart + 1]);
+		zip_ins_h = ((zip_ins_h<<zip_H_SHIFT) ^ (zip_window[zip_strstart + 1] & 0xff)) & zip_HASH_MASK;
+
+//#if MIN_MATCH != 3
+//		Call UPDATE_HASH() MIN_MATCH-3 more times
+//#endif
+
+	    }
+	} else {
+	    /* No match, output a literal byte */
+	    flush = zip_ct_tally(0, zip_window[zip_strstart] & 0xff);
+	    zip_lookahead--;
+	    zip_strstart++;
+	}
+	if(flush) {
+	    zip_flush_block(0);
+	    zip_block_start = zip_strstart;
+	}
+
+	/* Make sure that we always have enough lookahead, except
+	 * at the end of the input file. We need MAX_MATCH bytes
+	 * for the next match, plus MIN_MATCH bytes to insert the
+	 * string following the next match.
+	 */
+	while(zip_lookahead < zip_MIN_LOOKAHEAD && !zip_eofile)
+	    zip_fill_window();
+    }
+}
+
+var zip_deflate_better = function() {
+    /* Process the input block. */
+    while(zip_lookahead != 0 && zip_qhead == null) {
+	/* Insert the string window[strstart .. strstart+2] in the
+	 * dictionary, and set hash_head to the head of the hash chain:
+	 */
+	zip_INSERT_STRING();
+
+	/* Find the longest match, discarding those <= prev_length.
+	 */
+	zip_prev_length = zip_match_length;
+	zip_prev_match = zip_match_start;
+	zip_match_length = zip_MIN_MATCH - 1;
+
+	if(zip_hash_head != zip_NIL &&
+	   zip_prev_length < zip_max_lazy_match &&
+	   zip_strstart - zip_hash_head <= zip_MAX_DIST) {
+	    /* To simplify the code, we prevent matches with the string
+	     * of window index 0 (in particular we have to avoid a match
+	     * of the string with itself at the start of the input file).
+	     */
+	    zip_match_length = zip_longest_match(zip_hash_head);
+	    /* longest_match() sets match_start */
+	    if(zip_match_length > zip_lookahead)
+		zip_match_length = zip_lookahead;
+
+	    /* Ignore a length 3 match if it is too distant: */
+	    if(zip_match_length == zip_MIN_MATCH &&
+	       zip_strstart - zip_match_start > zip_TOO_FAR) {
+		/* If prev_match is also MIN_MATCH, match_start is garbage
+		 * but we will ignore the current match anyway.
+		 */
+		zip_match_length--;
+	    }
+	}
+	/* If there was a match at the previous step and the current
+	 * match is not better, output the previous match:
+	 */
+	if(zip_prev_length >= zip_MIN_MATCH &&
+	   zip_match_length <= zip_prev_length) {
+	    var flush; // set if current block must be flushed
+
+//	    check_match(strstart - 1, prev_match, prev_length);
+	    flush = zip_ct_tally(zip_strstart - 1 - zip_prev_match,
+				 zip_prev_length - zip_MIN_MATCH);
+
+	    /* Insert in hash table all strings up to the end of the match.
+	     * strstart-1 and strstart are already inserted.
+	     */
+	    zip_lookahead -= zip_prev_length - 1;
+	    zip_prev_length -= 2;
+	    do {
+		zip_strstart++;
+		zip_INSERT_STRING();
+		/* strstart never exceeds WSIZE-MAX_MATCH, so there are
+		 * always MIN_MATCH bytes ahead. If lookahead < MIN_MATCH
+		 * these bytes are garbage, but it does not matter since the
+		 * next lookahead bytes will always be emitted as literals.
+		 */
+	    } while(--zip_prev_length != 0);
+	    zip_match_available = 0;
+	    zip_match_length = zip_MIN_MATCH - 1;
+	    zip_strstart++;
+	    if(flush) {
+		zip_flush_block(0);
+		zip_block_start = zip_strstart;
+	    }
+	} else if(zip_match_available != 0) {
+	    /* If there was no match at the previous position, output a
+	     * single literal. If there was a match but the current match
+	     * is longer, truncate the previous match to a single literal.
+	     */
+	    if(zip_ct_tally(0, zip_window[zip_strstart - 1] & 0xff)) {
+		zip_flush_block(0);
+		zip_block_start = zip_strstart;
+	    }
+	    zip_strstart++;
+	    zip_lookahead--;
+	} else {
+	    /* There is no previous match to compare with, wait for
+	     * the next step to decide.
+	     */
+	    zip_match_available = 1;
+	    zip_strstart++;
+	    zip_lookahead--;
+	}
+
+	/* Make sure that we always have enough lookahead, except
+	 * at the end of the input file. We need MAX_MATCH bytes
+	 * for the next match, plus MIN_MATCH bytes to insert the
+	 * string following the next match.
+	 */
+	while(zip_lookahead < zip_MIN_LOOKAHEAD && !zip_eofile)
+	    zip_fill_window();
+    }
+}
+
+var zip_init_deflate = function() {
+    if(zip_eofile)
+	return;
+    zip_bi_buf = 0;
+    zip_bi_valid = 0;
+    zip_ct_init();
+    zip_lm_init();
+
+    zip_qhead = null;
+    zip_outcnt = 0;
+    zip_outoff = 0;
+
+    if(zip_compr_level <= 3)
+    {
+	zip_prev_length = zip_MIN_MATCH - 1;
+	zip_match_length = 0;
+    }
+    else
+    {
+	zip_match_length = zip_MIN_MATCH - 1;
+	zip_match_available = 0;
+    }
+
+    zip_complete = false;
+}
+
+/* ==========================================================================
+ * Same as above, but achieves better compression. We use a lazy
+ * evaluation for matches: a match is finally adopted only if there is
+ * no better match at the next window position.
+ */
+var zip_deflate_internal = function(buff, off, buff_size) {
+    var n;
+
+    if(!zip_initflag)
+    {
+	zip_init_deflate();
+	zip_initflag = true;
+	if(zip_lookahead == 0) { // empty
+	    zip_complete = true;
+	    return 0;
+	}
+    }
+
+    if((n = zip_qcopy(buff, off, buff_size)) == buff_size)
+	return buff_size;
+
+    if(zip_complete)
+	return n;
+
+    if(zip_compr_level <= 3) // optimized for speed
+	zip_deflate_fast();
+    else
+	zip_deflate_better();
+    if(zip_lookahead == 0) {
+	if(zip_match_available != 0)
+	    zip_ct_tally(0, zip_window[zip_strstart - 1] & 0xff);
+	zip_flush_block(1);
+	zip_complete = true;
+    }
+    return n + zip_qcopy(buff, n + off, buff_size - n);
+}
+
+var zip_qcopy = function(buff, off, buff_size) {
+    var n, i, j;
+
+    n = 0;
+    while(zip_qhead != null && n < buff_size)
+    {
+	i = buff_size - n;
+	if(i > zip_qhead.len)
+	    i = zip_qhead.len;
+//      System.arraycopy(qhead.ptr, qhead.off, buff, off + n, i);
+	for(j = 0; j < i; j++)
+	    buff[off + n + j] = zip_qhead.ptr[zip_qhead.off + j];
+	
+	zip_qhead.off += i;
+	zip_qhead.len -= i;
+	n += i;
+	if(zip_qhead.len == 0) {
+	    var p;
+	    p = zip_qhead;
+	    zip_qhead = zip_qhead.next;
+	    zip_reuse_queue(p);
+	}
+    }
+
+    if(n == buff_size)
+	return n;
+
+    if(zip_outoff < zip_outcnt) {
+	i = buff_size - n;
+	if(i > zip_outcnt - zip_outoff)
+	    i = zip_outcnt - zip_outoff;
+	// System.arraycopy(outbuf, outoff, buff, off + n, i);
+	for(j = 0; j < i; j++)
+	    buff[off + n + j] = zip_outbuf[zip_outoff + j];
+	zip_outoff += i;
+	n += i;
+	if(zip_outcnt == zip_outoff)
+	    zip_outcnt = zip_outoff = 0;
+    }
+    return n;
+}
+
+/* ==========================================================================
+ * Allocate the match buffer, initialize the various tables and save the
+ * location of the internal file attribute (ascii/binary) and method
+ * (DEFLATE/STORE).
+ */
+var zip_ct_init = function() {
+    var n;	// iterates over tree elements
+    var bits;	// bit counter
+    var length;	// length value
+    var code;	// code value
+    var dist;	// distance index
+
+    if(zip_static_dtree[0].dl != 0) return; // ct_init already called
+
+    zip_l_desc.dyn_tree		= zip_dyn_ltree;
+    zip_l_desc.static_tree	= zip_static_ltree;
+    zip_l_desc.extra_bits	= zip_extra_lbits;
+    zip_l_desc.extra_base	= zip_LITERALS + 1;
+    zip_l_desc.elems		= zip_L_CODES;
+    zip_l_desc.max_length	= zip_MAX_BITS;
+    zip_l_desc.max_code		= 0;
+
+    zip_d_desc.dyn_tree		= zip_dyn_dtree;
+    zip_d_desc.static_tree	= zip_static_dtree;
+    zip_d_desc.extra_bits	= zip_extra_dbits;
+    zip_d_desc.extra_base	= 0;
+    zip_d_desc.elems		= zip_D_CODES;
+    zip_d_desc.max_length	= zip_MAX_BITS;
+    zip_d_desc.max_code		= 0;
+
+    zip_bl_desc.dyn_tree	= zip_bl_tree;
+    zip_bl_desc.static_tree	= null;
+    zip_bl_desc.extra_bits	= zip_extra_blbits;
+    zip_bl_desc.extra_base	= 0;
+    zip_bl_desc.elems		= zip_BL_CODES;
+    zip_bl_desc.max_length	= zip_MAX_BL_BITS;
+    zip_bl_desc.max_code	= 0;
+
+    // Initialize the mapping length (0..255) -> length code (0..28)
+    length = 0;
+    for(code = 0; code < zip_LENGTH_CODES-1; code++) {
+	zip_base_length[code] = length;
+	for(n = 0; n < (1<<zip_extra_lbits[code]); n++)
+	    zip_length_code[length++] = code;
+    }
+    // Assert (length == 256, "ct_init: length != 256");
+
+    /* Note that the length 255 (match length 258) can be represented
+     * in two different ways: code 284 + 5 bits or code 285, so we
+     * overwrite length_code[255] to use the best encoding:
+     */
+    zip_length_code[length-1] = code;
+
+    /* Initialize the mapping dist (0..32K) -> dist code (0..29) */
+    dist = 0;
+    for(code = 0 ; code < 16; code++) {
+	zip_base_dist[code] = dist;
+	for(n = 0; n < (1<<zip_extra_dbits[code]); n++) {
+	    zip_dist_code[dist++] = code;
+	}
+    }
+    // Assert (dist == 256, "ct_init: dist != 256");
+    dist >>= 7; // from now on, all distances are divided by 128
+    for( ; code < zip_D_CODES; code++) {
+	zip_base_dist[code] = dist << 7;
+	for(n = 0; n < (1<<(zip_extra_dbits[code]-7)); n++)
+	    zip_dist_code[256 + dist++] = code;
+    }
+    // Assert (dist == 256, "ct_init: 256+dist != 512");
+
+    // Construct the codes of the static literal tree
+    for(bits = 0; bits <= zip_MAX_BITS; bits++)
+	zip_bl_count[bits] = 0;
+    n = 0;
+    while(n <= 143) { zip_static_ltree[n++].dl = 8; zip_bl_count[8]++; }
+    while(n <= 255) { zip_static_ltree[n++].dl = 9; zip_bl_count[9]++; }
+    while(n <= 279) { zip_static_ltree[n++].dl = 7; zip_bl_count[7]++; }
+    while(n <= 287) { zip_static_ltree[n++].dl = 8; zip_bl_count[8]++; }
+    /* Codes 286 and 287 do not exist, but we must include them in the
+     * tree construction to get a canonical Huffman tree (longest code
+     * all ones)
+     */
+    zip_gen_codes(zip_static_ltree, zip_L_CODES + 1);
+
+    /* The static distance tree is trivial: */
+    for(n = 0; n < zip_D_CODES; n++) {
+	zip_static_dtree[n].dl = 5;
+	zip_static_dtree[n].fc = zip_bi_reverse(n, 5);
+    }
+
+    // Initialize the first block of the first file:
+    zip_init_block();
+}
+
+/* ==========================================================================
+ * Initialize a new block.
+ */
+var zip_init_block = function() {
+    var n; // iterates over tree elements
+
+    // Initialize the trees.
+    for(n = 0; n < zip_L_CODES;  n++) zip_dyn_ltree[n].fc = 0;
+    for(n = 0; n < zip_D_CODES;  n++) zip_dyn_dtree[n].fc = 0;
+    for(n = 0; n < zip_BL_CODES; n++) zip_bl_tree[n].fc = 0;
+
+    zip_dyn_ltree[zip_END_BLOCK].fc = 1;
+    zip_opt_len = zip_static_len = 0;
+    zip_last_lit = zip_last_dist = zip_last_flags = 0;
+    zip_flags = 0;
+    zip_flag_bit = 1;
+}
+
+/* ==========================================================================
+ * Restore the heap property by moving down the tree starting at node k,
+ * exchanging a node with the smallest of its two sons if necessary, stopping
+ * when the heap property is re-established (each father smaller than its
+ * two sons).
+ */
+var zip_pqdownheap = function(
+    tree,	// the tree to restore
+    k) {	// node to move down
+    var v = zip_heap[k];
+    var j = k << 1;	// left son of k
+
+    while(j <= zip_heap_len) {
+	// Set j to the smallest of the two sons:
+	if(j < zip_heap_len &&
+	   zip_SMALLER(tree, zip_heap[j + 1], zip_heap[j]))
+	    j++;
+
+	// Exit if v is smaller than both sons
+	if(zip_SMALLER(tree, v, zip_heap[j]))
+	    break;
+
+	// Exchange v with the smallest son
+	zip_heap[k] = zip_heap[j];
+	k = j;
+
+	// And continue down the tree, setting j to the left son of k
+	j <<= 1;
+    }
+    zip_heap[k] = v;
+}
+
+/* ==========================================================================
+ * Compute the optimal bit lengths for a tree and update the total bit length
+ * for the current block.
+ * IN assertion: the fields freq and dad are set, heap[heap_max] and
+ *    above are the tree nodes sorted by increasing frequency.
+ * OUT assertions: the field len is set to the optimal bit length, the
+ *     array bl_count contains the frequencies for each bit length.
+ *     The length opt_len is updated; static_len is also updated if stree is
+ *     not null.
+ */
+var zip_gen_bitlen = function(desc) { // the tree descriptor
+    var tree		= desc.dyn_tree;
+    var extra		= desc.extra_bits;
+    var base		= desc.extra_base;
+    var max_code	= desc.max_code;
+    var max_length	= desc.max_length;
+    var stree		window.Modernizr=function(n,t,i){function a(n){c.cssText=n}function yt(n,t){return a(y.join(n+";")+(t||""))}function h(n,t){return typeof n===t}function v(n,t){return!!~(""+n).indexOf(t)}function lt(n,t){var u,r;for(u in n)if(r=n[u],!v(r,"-")&&c[r]!==i)return t=="pfx"?r:!0;return!1}function pt(n,t,r){var f,u;for(f in n)if(u=t[n[f]],u!==i)return r===!1?n[f]:h(u,"function")?u.bind(r||t):u;return!1}function f(n,t,i){var r=n.charAt(0).toUpperCase()+n.slice(1),u=(n+" "+ot.join(r+" ")+r).split(" ");return h(t,"string")||h(t,"undefined")?lt(u,t):(u=(n+" "+st.join(r+" ")+r).split(" "),pt(u,t,i))}function wt(){u.input=function(i){for(var r=0,u=i.length;r<u;r++)w[i[r]]=!!(i[r]in o);return w.list&&(w.list=!!(t.createElement("datalist")&&n.HTMLDataListElement)),w}("autocomplete autofocus list placeholder max min multiple pattern required step".split(" ")),u.inputtypes=function(n){for(var u=0,r,f,e,h=n.length;u<h;u++)o.setAttribute("type",f=n[u]),r=o.type!=="text",r&&(o.value=nt,o.style.cssText="position:absolute;visibility:hidden;",/^range$/.test(f)&&o.style.WebkitAppearance!==i?(s.appendChild(o),e=t.defaultView,r=e.getComputedStyle&&e.getComputedStyle(o,null).WebkitAppearance!=="textfield"&&o.offsetHeight!==0,s.removeChild(o)):/^(search|tel)$/.test(f)||(r=/^(url|email)$/.test(f)?o.checkValidity&&o.checkValidity()===!1:o.value!=nt)),ht[n[u]]=!!r;return ht}("search tel url email datetime date month week time datetime-local number range color".split(" "))}var at="2.6.2",u={},g=!0,s=t.documentElement,e="modernizr",ut=t.createElement(e),c=ut.style,o=t.createElement("input"),nt=":)",ft={}.toString,y=" -webkit- -moz- -o- -ms- ".split(" "),et="Webkit Moz O ms",ot=et.split(" "),st=et.toLowerCase().split(" "),p={svg:"http://www.w3.org/2000/svg"},r={},ht={},w={},tt=[],it=tt.slice,b,l=function(n,i,r,u){var l,a,c,v,f=t.createElement("div"),h=t.body,o=h||t.createElement("body");if(parseInt(r,10))while(r--)c=t.createElement("div"),c.id=u?u[r]:e+(r+1),f.appendChild(c);return l=["&#173;",'<style id="s',e,'">',n,"<\/style>"].join(""),f.id=e,(h?f:o).innerHTML+=l,o.appendChild(f),h||(o.style.background="",o.style.overflow="hidden",v=s.style.overflow,s.style.overflow="hidden",s.appendChild(o)),a=i(f,n),h?f.parentNode.removeChild(f):(o.parentNode.removeChild(o),s.style.overflow=v),!!a},vt=function(t){var i=n.matchMedia||n.msMatchMedia,r;return i?i(t).matches:(l("@media "+t+" { #"+e+" { position: absolute; } }",function(t){r=(n.getComputedStyle?getComputedStyle(t,null):t.currentStyle).position=="absolute"}),r)},ct=function(){function r(r,u){u=u||t.createElement(n[r]||"div"),r="on"+r;var f=r in u;return f||(u.setAttribute||(u=t.createElement("div")),u.setAttribute&&u.removeAttribute&&(u.setAttribute(r,""),f=h(u[r],"function"),h(u[r],"undefined")||(u[r]=i),u.removeAttribute(r))),u=null,f}var n={select:"input",change:"input",submit:"form",reset:"form",error:"img",load:"img",abort:"img"};return r}(),rt={}.hasOwnProperty,k,d;k=h(rt,"undefined")||h(rt.call,"undefined")?function(n,t){return t in n&&h(n.constructor.prototype[t],"undefined")}:function(n,t){return rt.call(n,t)},Function.prototype.bind||(Function.prototype.bind=function(n){var t=this,i,r;if(typeof t!="function")throw new TypeError;return i=it.call(arguments,1),r=function(){var f,e,u;return this instanceof r?(f=function(){},f.prototype=t.prototype,e=new f,u=t.apply(e,i.concat(it.call(arguments))),Object(u)===u)?u:e:t.apply(n,i.concat(it.call(arguments)))},r}),r.flexbox=function(){return f("flexWrap")},r.flexboxlegacy=function(){return f("boxDirection")},r.canvas=function(){var n=t.createElement("canvas");return!!(n.getContext&&n.getContext("2d"))},r.canvastext=function(){return!!(u.canvas&&h(t.createElement("canvas").getContext("2d").fillText,"function"))},r.webgl=function(){return!!n.WebGLRenderingContext},r.touch=function(){var i;return"ontouchstart"in n||n.DocumentTouch&&t instanceof DocumentTouch?i=!0:l(["@media (",y.join("touch-enabled),("),e,")","{#modernizr{top:9px;position:absolute}}"].join(""),function(n){i=n.offsetTop===9}),i},r.geolocation=function(){return"geolocation"in navigator},r.postmessage=function(){return!!n.postMessage},r.websqldatabase=function(){return!!n.openDatabase},r.indexedDB=function(){return!!f("indexedDB",n)},r.hashchange=function(){return ct("hashchange",n)&&(t.documentMode===i||t.documentMode>7)},r.history=function(){return!!(n.history&&history.pushState)},r.draganddrop=function(){var n=t.createElement("div");return"draggable"in n||"ondragstart"in n&&"ondrop"in n},r.websockets=function(){return"WebSocket"in n||"MozWebSocket"in n},r.rgba=function(){return a("background-color:rgba(150,255,150,.5)"),v(c.backgroundColor,"rgba")},r.hsla=function(){return a("background-color:hsla(120,40%,100%,.5)"),v(c.backgroundColor,"rgba")||v(c.backgroundColor,"hsla")},r.multiplebgs=function(){return a("background:url(https://),url(https://),red url(https://)"),/(url\s*\(.*?){3}/.test(c.background)},r.backgroundsize=function(){return f("backgroundSize")},r.borderimage=function(){return f("borderImage")},r.borderradius=function(){return f("borderRadius")},r.boxshadow=function(){return f("boxShadow")},r.textshadow=function(){return t.createElement("div").style.textShadow===""},r.opacity=function(){return yt("opacity:.55"),/^0.55$/.test(c.opacity)},r.cssanimations=function(){return f("animationName")},r.csscolumns=function(){return f("columnCount")},r.cssgradients=function(){var n="background-image:",t="gradient(linear,left top,right bottom,from(#9f9),to(white));",i="linear-gradient(left top,#9f9, white);";return a((n+"-webkit- ".split(" ").join(t+n)+y.join(i+n)).slice(0,-n.length)),v(c.backgroundImage,"gradient")},r.cssreflections=function(){return f("boxReflect")},r.csstransforms=function(){return!!f("transform")},r.csstransforms3d=function(){var n=!!f("perspective");return n&&"webkitPerspective"in s.style&&l("@media (transform-3d),(-webkit-transform-3d){#modernizr{left:9px;position:absolute;height:3px;}}",function(t){n=t.offsetLeft===9&&t.offsetHeight===3}),n},r.csstransitions=function(){return f("transition")},r.fontface=function(){var n;return l('@font-face {font-family:"font";src:url("https://")}',function(i,r){var f=t.getElementById("smodernizr"),u=f.sheet||f.styleSheet,e=u?u.cssRules&&u.cssRules[0]?u.cssRules[0].cssText:u.cssText||"":"";n=/src/i.test(e)&&e.indexOf(r.split(" ")[0])===0}),n},r.generatedcontent=function(){var n;return l(["#",e,"{font:0/0 a}#",e,':after{content:"',nt,'";visibility:hidden;font:3px/1 a}'].join(""),function(t){n=t.offsetHeight>=3}),n},r.video=function(){var i=t.createElement("video"),n=!1;try{(n=!!i.canPlayType)&&(n=new Boolean(n),n.ogg=i.canPlayType('video/ogg; codecs="theora"').replace(/^no$/,""),n.h264=i.canPlayType('video/mp4; codecs="avc1.42E01E"').replace(/^no$/,""),n.webm=i.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,""))}catch(r){}return n},r.audio=function(){var i=t.createElement("audio"),n=!1;try{(n=!!i.canPlayType)&&(n=new Boolean(n),n.ogg=i.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,""),n.mp3=i.canPlayType("audio/mpeg;").replace(/^no$/,""),n.wav=i.canPlayType('audio/wav; codecs="1"').replace(/^no$/,""),n.m4a=(i.canPlayType("audio/x-m4a;")||i.canPlayType("audio/aac;")).replace(/^no$/,""))}catch(r){}return n},r.localstorage=function(){try{return localStorage.setItem(e,e),localStorage.removeItem(e),!0}catch(n){return!1}},r.sessionstorage=function(){try{return sessionStorage.setItem(e,e),sessionStorage.removeItem(e),!0}catch(n){return!1}},r.webworkers=function(){return!!n.Worker},r.applicationcache=function(){return!!n.applicationCache},r.svg=function(){return!!t.createElementNS&&!!t.createElementNS(p.svg,"svg").createSVGRect},r.inlinesvg=function(){var n=t.createElement("div");return n.innerHTML="<svg/>",(n.firstChild&&n.firstChild.namespaceURI)==p.svg},r.smil=function(){return!!t.createElementNS&&/SVGAnimate/.test(ft.call(t.createElementNS(p.svg,"animate")))},r.svgclippaths=function(){return!!t.createElementNS&&/SVGClipPath/.test(ft.call(t.createElementNS(p.svg,"clipPath")))};for(d in r)k(r,d)&&(b=d.toLowerCase(),u[b]=r[d](),tt.push((u[b]?"":"no-")+b));return u.input||wt(),u.addTest=function(n,t){if(typeof n=="object")for(var r in n)k(n,r)&&u.addTest(r,n[r]);else{if(n=n.toLowerCase(),u[n]!==i)return u;t=typeof t=="function"?t():t,typeof g!="undefined"&&g&&(s.className+=" "+(t?"":"no-")+n),u[n]=t}return u},a(""),ut=o=null,function(n,t){function p(n,t){var i=n.createElement("p"),r=n.getElementsByTagName("head")[0]||n.documentElement;return i.innerHTML="x<style>"+t+"<\/style>",r.insertBefore(i.lastChild,r.firstChild)}function c(){var n=r.elements;return typeof n=="string"?n.split(" "):n}function o(n){var t=h[n[s]];return t||(t={},e++,n[s]=e,h[e]=t),t}function l(n,r,u){if(r||(r=t),i)return r.createElement(n);u||(u=o(r));var f;return f=u.cache[n]?u.cache[n].cloneNode():y.test(n)?(u.cache[n]=u.createElem(n)).cloneNode():u.createElem(n),f.canHaveChildren&&!v.test(n)?u.frag.appendChild(f):f}function w(n,r){if(n||(n=t),i)return n.createDocumentFragment();r=r||o(n);for(var f=r.frag.cloneNode(),u=0,e=c(),s=e.length;u<s;u++)f.createElement(e[u]);return f}function b(n,t){t.cache||(t.cache={},t.createElem=n.createElement,t.createFrag=n.createDocumentFragment,t.frag=t.createFrag()),n.createElement=function(i){return r.shivMethods?l(i,n,t):t.createElem(i)},n.createDocumentFragment=Function("h,f","return function(){var n=f.cloneNode(),c=n.createElement;h.shivMethods&&("+c().join().replace(/\w+/g,function(n){return t.createElem(n),t.frag.createElement(n),'c("'+n+'")'})+");return n}")(r,t.frag)}function a(n){n||(n=t);var u=o(n);return!r.shivCSS||f||u.hasCSS||(u.hasCSS=!!p(n,"article,aside,figcaption,figure,footer,header,hgroup,nav,section{display:block}mark{background:#FF0;color:#000}")),i||b(n,u),n}var u=n.html5||{},v=/^<|^(?:button|map|select|textarea|object|iframe|option|optgroup)$/i,y=/^(?:a|b|code|div|fieldset|h1|h2|h3|h4|h5|h6|i|label|li|ol|p|q|span|strong|style|table|tbody|td|th|tr|ul)$/i,f,s="_html5shiv",e=0,h={},i,r;(function(){try{var n=t.createElement("a");n.innerHTML="<xyz><\/xyz>",f="hidden"in n,i=n.childNodes.length==1||function(){t.createElement("a");var n=t.createDocumentFragment();return typeof n.cloneNode=="undefined"||typeof n.createDocumentFragment=="undefined"||typeof n.createElement=="undefined"}()}catch(r){f=!0,i=!0}})(),r={elements:u.elements||"abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video",shivCSS:u.shivCSS!==!1,supportsUnknownElements:i,shivMethods:u.shivMethods!==!1,type:"default",shivDocument:a,createElement:l,createDocumentFragment:w},n.html5=r,a(t)}(this,t),u._version=at,u._prefixes=y,u._domPrefixes=st,u._cssomPrefixes=ot,u.mq=vt,u.hasEvent=ct,u.testProp=function(n){return lt([n])},u.testAllProps=f,u.testStyles=l,u.prefixed=function(n,t,i){return t?f(n,t,i):f(n,"pfx")},s.className=s.className.replace(/(^|\s)no-js(\s|$)/,"$1$2")+(g?" js "+tt.join(" "):""),u}(this,this.document)= desc.static_tree;
+    var h;		// heap index
+    var n, m;		// iterate over the tree elements
+    var bits;		// bit length
+    var xbits;		// extra bits
+    var f;		// frequency
+    var overflow = 0;	// number of elements with bit length too large
+
+    for(bits = 0; bits <= zip_MAX_BITS; bits++)
+	zip_bl_count[bits] = 0;
+
+    /* In a first pass, compute the optimal bit lengths (which may
+     * overflow in the case of the bit length tree).
+     */
+    tree[zip_heap[zip_heap_max]].dl = 0; // root of the heap
+
+    for(h = zip_heap_max + 1; h < zip_HEAP_SIZE; h++) {
+	n = zip_heap[h];
+	bits = tree[tree[n].dl].dl + 1;
+	if(bits > max_length) {
+	    bits = max_length;
+	    overflow++;
+	}
+	tree[n].dl = bits;
+	// We overwrite tree[n].dl which is no longer needed
+
+	if(n > max_code)
+	    continue; // not a leaf node
+
+	zip_bl_count[bits]++;
+	xbits = 0;
+	if(n >= base)
+	    xbits = extra[n - base];
+	f = tree[n].fc;
+	zip_opt_len += f * (bits + xbits);
+	if(stree != null)
+	    zip_static_len += f * (stree[n].dl + xbits);
+    }
+    if(overflow == 0)
+	return;
+
+    // This happens for example on obj2 and pic of the Calgary corpus
+
+    // Find the first bit length which could increase:
+    do {
+	bits = max_length - 1;
+	while(zip_bl_count[bits] == 0)
+	    bits--;
+	zip_bl_count[bits]--;		// move one leaf down the tree
+	zip_bl_count[bits + 1] += 2;	// move one overflow item as its brother
+	zip_bl_count[max_length]--;
+	/* The brother of the overflow item also moves one step up,
+	 * but this does not affect bl_count[max_length]
+	 */
+	overflow -= 2;
+    } while(overflow > 0);
+
+    /* Now recompute all bit lengths, scanning in increasing frequency.
+     * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all
+     * lengths instead of fixing only the wrong ones. This idea is taken
+     * from 'ar' written by Haruhiko Okumura.)
+     */
+    for(bits = max_length; bits != 0; bits--) {
+	n = zip_bl_count[bits];
+	while(n != 0) {
+	    m = zip_heap[--h];
+	    if(m > max_code)
+		continue;
+	    if(tree[m].dl != bits) {
+		zip_opt_len += (bits - tree[m].dl) * tree[m].fc;
+		tree[m].fc = bits;
+	    }
+	    n--;
+	}
+    }
+}
+
+  /* ==========================================================================
+   * Generate the codes for a given tree and bit counts (which need not be
+   * optimal).
+   * IN assertion: the array bl_count contains the bit length statistics for
+   * the given tree and the field len is set for all tree elements.
+   * OUT assertion: the field code is set for all tree elements of non
+   *     zero code length.
+   */
+var zip_gen_codes = function(tree,	// the tree to decorate
+		   max_code) {	// largest code with non zero frequency
+    var next_code = new Array(zip_MAX_BITS+1); // next code value for each bit length
+    var code = 0;		// running code value
+    var bits;			// bit index
+    var n;			// code index
+
+    /* The distribution counts are first used to generate the code values
+     * without bit reversal.
+     */
+    for(bits = 1; bits <= zip_MAX_BITS; bits++) {
+	code = ((code + zip_bl_count[bits-1]) << 1);
+	next_code[bits] = code;
+    }
+
+    /* Check that the bit counts in bl_count are consistent. The last code
+     * must be all ones.
+     */
+//    Assert (code + encoder->bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,
+//	    "inconsistent bit counts");
+//    Tracev((stderr,"\ngen_codes: max_code %d ", max_code));
+
+    for(n = 0; n <= max_code; n++) {
+	var len = tree[n].dl;
+	if(len == 0)
+	    continue;
+	// Now reverse the bits
+	tree[n].fc = zip_bi_reverse(next_code[len]++, len);
+
+//      Tracec(tree != static_ltree, (stderr,"\nn %3d %c l %2d c %4x (%x) ",
+//	  n, (isgraph(n) ? n : ' '), len, tree[n].fc, next_code[len]-1));
+    }
+}
+
+/* ==========================================================================
+ * Construct one Huffman tree and assigns the code bit strings and lengths.
+ * Update the total bit length for the current block.
+ * IN assertion: the field freq is set for all tree elements.
+ * OUT assertions: the fields len and code are set to the optimal bit length
+ *     and corresponding code. The length opt_len is updated; static_len is
+ *     also updated if stree is not null. The field max_code is set.
+ */
+var zip_build_tree = function(desc) { // the tree descriptor
+    var tree	= desc.dyn_tree;
+    var stree	= desc.static_tree;
+    var elems	= desc.elems;
+    var n, m;		// iterate over heap elements
+    var max_code = -1;	// largest code with non zero frequency
+    var node = elems;	// next internal node of the tree
+
+    /* Construct the initial heap, with least frequent element in
+     * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].
+     * heap[0] is not used.
+     */
+    zip_heap_len = 0;
+    zip_heap_max = zip_HEAP_SIZE;
+
+    for(n = 0; n < elems; n++) {
+	if(tree[n].fc != 0) {
+	    zip_heap[++zip_heap_len] = max_code = n;
+	    zip_depth[n] = 0;
+	} else
+	    tree[n].dl = 0;
+    }
+
+    /* The pkzip format requires that at least one distance code exists,
+     * and that at least one bit should be sent even if there is only one
+     * possible code. So to avoid special checks later on we force at least
+     * two codes of non zero frequency.
+     */
+    while(zip_heap_len < 2) {
+	var xnew = zip_heap[++zip_heap_len] = (max_code < 2 ? ++max_code : 0);
+	tree[xnew].fc = 1;
+	zip_depth[xnew] = 0;
+	zip_opt_len--;
+	if(stree != null)
+	    zip_static_len -= stree[xnew].dl;
+	// new is 0 or 1 so it does not have extra bits
+    }
+    desc.max_code = max_code;
+
+    /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,
+     * establish sub-heaps of increasing lengths:
+     */
+    for(n = zip_heap_len >> 1; n >= 1; n--)
+	zip_pqdownheap(tree, n);
+
+    /* Construct the Huffman tree by repeatedly combining the least two
+     * frequent nodes.
+     */
+    do {
+	n = zip_heap[zip_SMALLEST];
+	zip_heap[zip_SMALLEST] = zip_heap[zip_heap_len--];
+	zip_pqdownheap(tree, zip_SMALLEST);
+
+	m = zip_heap[zip_SMALLEST];  // m = node of next least frequency
+
+	// keep the nodes sorted by frequency
+	zip_heap[--zip_heap_max] = n;
+	zip_heap[--zip_heap_max] = m;
+
+	// Create a new node father of n and m
+	tree[node].fc = tree[n].fc + tree[m].fc;
+//	depth[node] = (char)(MAX(depth[n], depth[m]) + 1);
+	if(zip_depth[n] > zip_depth[m] + 1)
+	    zip_depth[node] = zip_depth[n];
+	else
+	    zip_depth[node] = zip_depth[m] + 1;
+	tree[n].dl = tree[m].dl = node;
+
+	// and insert the new node in the heap
+	zip_heap[zip_SMALLEST] = node++;
+	zip_pqdownheap(tree, zip_SMALLEST);
+
+    } while(zip_heap_len >= 2);
+
+    zip_heap[--zip_heap_max] = zip_heap[zip_SMALLEST];
+
+    /* At this point, the fields freq and dad are set. We can now
+     * generate the bit lengths.
+     */
+    zip_gen_bitlen(desc);
+
+    // The field len is now set, we can generate the bit codes
+    zip_gen_codes(tree, max_code);
+}
+
+/* ==========================================================================
+ * Scan a literal or distance tree to determine the frequencies of the codes
+ * in the bit length tree. Updates opt_len to take into account the repeat
+ * counts. (The contribution of the bit length codes will be added later
+ * during the construction of bl_tree.)
+ */
+var zip_scan_tree = function(tree,// the tree to be scanned
+		       max_code) {  // and its largest code of non zero frequency
+    var n;			// iterates over all tree elements
+    var prevlen = -1;		// last emitted length
+    var curlen;			// length of current code
+    var nextlen = tree[0].dl;	// length of next code
+    var count = 0;		// repeat count of the current code
+    var max_count = 7;		// max repeat count
+    var min_count = 4;		// min repeat count
+
+    if(nextlen == 0) {
+	max_count = 138;
+	min_count = 3;
+    }
+    tree[max_code + 1].dl = 0xffff; // guard
+
+    for(n = 0; n <= max_code; n++) {
+	curlen = nextlen;
+	nextlen = tree[n + 1].dl;
+	if(++count < max_count && curlen == nextlen)
+	    continue;
+	else if(count < min_count)
+	    zip_bl_tree[curlen].fc += count;
+	else if(curlen != 0) {
+	    if(curlen != prevlen)
+		zip_bl_tree[curlen].fc++;
+	    zip_bl_tree[zip_REP_3_6].fc++;
+	} else if(count <= 10)
+	    zip_bl_tree[zip_REPZ_3_10].fc++;
+	else
+	    zip_bl_tree[zip_REPZ_11_138].fc++;
+	count = 0; prevlen = curlen;
+	if(nextlen == 0) {
+	    max_count = 138;
+	    min_count = 3;
+	} else if(curlen == nextlen) {
+	    max_count = 6;
+	    min_count = 3;
+	} else {
+	    max_count = 7;
+	    min_count = 4;
+	}
+    }
+}
+
+  /* ==========================================================================
+   * Send a literal or distance tree in compressed form, using the codes in
+   * bl_tree.
+   */
+var zip_send_tree = function(tree, // the tree to be scanned
+		   max_code) { // and its largest code of non zero frequency
+    var n;			// iterates over all tree elements
+    var prevlen = -1;		// last emitted length
+    var curlen;			// length of current code
+    var nextlen = tree[0].dl;	// length of next code
+    var count = 0;		// repeat count of the current code
+    var max_count = 7;		// max repeat count
+    var min_count = 4;		// min repeat count
+
+    /* tree[max_code+1].dl = -1; */  /* guard already set */
+    if(nextlen == 0) {
+      max_count = 138;
+      min_count = 3;
+    }
+
+    for(n = 0; n <= max_code; n++) {
+	curlen = nextlen;
+	nextlen = tree[n+1].dl;
+	if(++count < max_count && curlen == nextlen) {
+	    continue;
+	} else if(count < min_count) {
+	    do { zip_SEND_CODE(curlen, zip_bl_tree); } while(--count != 0);
+	} else if(curlen != 0) {
+	    if(curlen != prevlen) {
+		zip_SEND_CODE(curlen, zip_bl_tree);
+		count--;
+	    }
+	    // Assert(count >= 3 && count <= 6, " 3_6?");
+	    zip_SEND_CODE(zip_REP_3_6, zip_bl_tree);
+	    zip_send_bits(count - 3, 2);
+	} else if(count <= 10) {
+	    zip_SEND_CODE(zip_REPZ_3_10, zip_bl_tree);
+	    zip_send_bits(count-3, 3);
+	} else {
+	    zip_SEND_CODE(zip_REPZ_11_138, zip_bl_tree);
+	    zip_send_bits(count-11, 7);
+	}
+	count = 0;
+	prevlen = curlen;
+	if(nextlen == 0) {
+	    max_count = 138;
+	    min_count = 3;
+	} else if(curlen == nextlen) {
+	    max_count = 6;
+	    min_count = 3;
+	} else {
+	    max_count = 7;
+	    min_count = 4;
+	}
+    }
+}
+
+/* ==========================================================================
+ * Construct the Huffman tree for the bit lengths and return the index in
+ * bl_order of the last bit length code to send.
+ */
+var zip_build_bl_tree = function() {
+    var max_blindex;  // index of last bit length code of non zero freq
+
+    // Determine the bit length frequencies for literal and distance trees
+    zip_scan_tree(zip_dyn_ltree, zip_l_desc.max_code);
+    zip_scan_tree(zip_dyn_dtree, zip_d_desc.max_code);
+
+    // Build the bit length tree:
+    zip_build_tree(zip_bl_desc);
+    /* opt_len now includes the length of the tree representations, except
+     * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.
+     */
+
+    /* Determine the number of bit length codes to send. The pkzip format
+     * requires that at least 4 bit length codes be sent. (appnote.txt says
+     * 3 but the actual value used is 4.)
+     */
+    for(max_blindex = zip_BL_CODES-1; max_blindex >= 3; max_blindex--) {
+	if(zip_bl_tree[zip_bl_order[max_blindex]].dl != 0) break;
+    }
+    /* Update opt_len to include the bit length tree and counts */
+    zip_opt_len += 3*(max_blindex+1) + 5+5+4;
+//    Tracev((stderr, "\ndyn trees: dyn %ld, stat %ld",
+//	    encoder->opt_len, encoder->static_len));
+
+    return max_blindex;
+}
+
+/* ==========================================================================
+ * Send the header for a block using dynamic Huffman trees: the counts, the
+ * lengths of the bit length codes, the literal tree and the distance tree.
+ * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.
+ */
+var zip_send_all_trees = function(lcodes, dcodes, blcodes) { // number of codes for each tree
+    var rank; // index in bl_order
+
+//    Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, "not enough codes");
+//    Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,
+//	    "too many codes");
+//    Tracev((stderr, "\nbl counts: "));
+    zip_send_bits(lcodes-257, 5); // not +255 as stated in appnote.txt
+    zip_send_bits(dcodes-1,   5);
+    zip_send_bits(blcodes-4,  4); // not -3 as stated in appnote.txt
+    for(rank = 0; rank < blcodes; rank++) {
+//      Tracev((stderr, "\nbl code %2d ", bl_order[rank]));
+	zip_send_bits(zip_bl_tree[zip_bl_order[rank]].dl, 3);
+    }
+
+    // send the literal tree
+    zip_send_tree(zip_dyn_ltree,lcodes-1);
+
+    // send the distance tree
+    zip_send_tree(zip_dyn_dtree,dcodes-1);
+}
+
+/* ==========================================================================
+ * Determine the best encoding for the current block: dynamic trees, static
+ * trees or store, and output the encoded block to the zip file.
+ */
+var zip_flush_block = function(eof) { // true if this is the last block for a file
+    var opt_lenb, static_lenb; // opt_len and static_len in bytes
+    var max_blindex;	// index of last bit length code of non zero freq
+    var stored_len;	// length of input block
+
+    stored_len = zip_strstart - zip_block_start;
+    zip_flag_buf[zip_last_flags] = zip_flags; // Save the flags for the last 8 items
+
+    // Construct the literal and distance trees
+    zip_build_tree(zip_l_desc);
+//    Tracev((stderr, "\nlit data: dyn %ld, stat %ld",
+//	    encoder->opt_len, encoder->static_len));
+
+    zip_build_tree(zip_d_desc);
+//    Tracev((stderr, "\ndist data: dyn %ld, stat %ld",
+//	    encoder->opt_len, encoder->static_len));
+    /* At this point, opt_len and static_len are the total bit lengths of
+     * the compressed block data, excluding the tree representations.
+     */
+
+    /* Build the bit length tree for the above two trees, and get the index
+     * in bl_order of the last bit length code to send.
+     */
+    max_blindex = zip_build_bl_tree();
+
+    // Determine the best encoding. Compute first the block length in bytes
+    opt_lenb	= (zip_opt_len   +3+7)>>3;
+    static_lenb = (zip_static_len+3+7)>>3;
+
+//    Trace((stderr, "\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u dist %u ",
+//	   opt_lenb, encoder->opt_len,
+//	   static_lenb, encoder->static_len, stored_len,
+//	   encoder->last_lit, encoder->last_dist));
+
+    if(static_lenb <= opt_lenb)
+	opt_lenb = static_lenb;
+    if(stored_len + 4 <= opt_lenb // 4: two words for the lengths
+       && zip_block_start >= 0) {
+	var i;
+
+	/* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.
+	 * Otherwise we can't have processed more than WSIZE input bytes since
+	 * the last block flush, because compression would have been
+	 * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to
+	 * transform a block into a stored block.
+	 */
+	zip_send_bits((zip_STORED_BLOCK<<1)+eof, 3);  /* send block type */
+	zip_bi_windup();		 /* align on byte boundary */
+	zip_put_short(stored_len);
+	zip_put_short(~stored_len);
+
+      // copy block
+/*
+      p = &window[block_start];
+      for(i = 0; i < stored_len; i++)
+	put_byte(p[i]);
+*/
+	for(i = 0; i < stored_len; i++)
+	    zip_put_byte(zip_window[zip_block_start + i]);
+
+    } else if(static_lenb == opt_lenb) {
+	zip_send_bits((zip_STATIC_TREES<<1)+eof, 3);
+	zip_compress_block(zip_static_ltree, zip_static_dtree);
+    } else {
+	zip_send_bits((zip_DYN_TREES<<1)+eof, 3);
+	zip_send_all_trees(zip_l_desc.max_code+1,
+			   zip_d_desc.max_code+1,
+			   max_blindex+1);
+	zip_compress_block(zip_dyn_ltree, zip_dyn_dtree);
+    }
+
+    zip_init_block();
+
+    if(eof != 0)
+	zip_bi_windup();
+}
+
+/* ==========================================================================
+ * Save the match info and tally the frequency counts. Return true if
+ * the current block must be flushed.
+ */
+var zip_ct_tally = function(
+	dist, // distance of matched string
+	lc) { // match length-MIN_MATCH or unmatched char (if dist==0)
+    zip_l_buf[zip_last_lit++] = lc;
+    if(dist == 0) {
+	// lc is the unmatched char
+	zip_dyn_ltree[lc].fc++;
+    } else {
+	// Here, lc is the match length - MIN_MATCH
+	dist--;		    // dist = match distance - 1
+//      Assert((ush)dist < (ush)MAX_DIST &&
+//	     (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&
+//	     (ush)D_CODE(dist) < (ush)D_CODES,  "ct_tally: bad match");
+
+	zip_dyn_ltree[zip_length_code[lc]+zip_LITERALS+1].fc++;
+	zip_dyn_dtree[zip_D_CODE(dist)].fc++;
+
+	zip_d_buf[zip_last_dist++] = dist;
+	zip_flags |= zip_flag_bit;
+    }
+    zip_flag_bit <<= 1;
+
+    // Output the flags if they fill a byte
+    if((zip_last_lit & 7) == 0) {
+	zip_flag_buf[zip_last_flags++] = zip_flags;
+	zip_flags = 0;
+	zip_flag_bit = 1;
+    }
+    // Try to guess if it is profitable to stop the current block here
+    if(zip_compr_level > 2 && (zip_last_lit & 0xfff) == 0) {
+	// Compute an upper bound for the compressed length
+	var out_length = zip_last_lit * 8;
+	var in_length = zip_strstart - zip_block_start;
+	var dcode;
+
+	for(dcode = 0; dcode < zip_D_CODES; dcode++) {
+	    out_length += zip_dyn_dtree[dcode].fc * (5 + zip_extra_dbits[dcode]);
+	}
+	out_length >>= 3;
+//      Trace((stderr,"\nlast_lit %u, last_dist %u, in %ld, out ~%ld(%ld%%) ",
+//	     encoder->last_lit, encoder->last_dist, in_length, out_length,
+//	     100L - out_length*100L/in_length));
+	if(zip_last_dist < parseInt(zip_last_lit/2) &&
+	   out_length < parseInt(in_length/2))
+	    return true;
+    }
+    return (zip_last_lit == zip_LIT_BUFSIZE-1 ||
+	    zip_last_dist == zip_DIST_BUFSIZE);
+    /* We avoid equality with LIT_BUFSIZE because of wraparound at 64K
+     * on 16 bit machines and because stored blocks are restricted to
+     * 64K-1 bytes.
+     */
+}
+
+  /* ==========================================================================
+   * Send the block data compressed using the given Huffman trees
+   */
+var zip_compress_block = function(
+	ltree,	// literal tree
+	dtree) {	// distance tree
+    var dist;		// distance of matched string
+    var lc;		// match length or unmatched char (if dist == 0)
+    var lx = 0;		// running index in l_buf
+    var dx = 0;		// running index in d_buf
+    var fx = 0;		// running index in flag_buf
+    var flag = 0;	// current flags
+    var code;		// the code to send
+    var extra;		// number of extra bits to send
+
+    if(zip_last_lit != 0) do {
+	if((lx & 7) == 0)
+	    flag = zip_flag_buf[fx++];
+	lc = zip_l_buf[lx++] & 0xff;
+	if((flag & 1) == 0) {
+	    zip_SEND_CODE(lc, ltree); /* send a literal byte */
+//	Tracecv(isgraph(lc), (stderr," '%c' ", lc));
+	} else {
+	    // Here, lc is the match length - MIN_MATCH
+	    code = zip_length_code[lc];
+	    zip_SEND_CODE(code+zip_LITERALS+1, ltree); // send the length code
+	    extra = zip_extra_lbits[code];
+	    if(extra != 0) {
+		lc -= zip_base_length[code];
+		zip_send_bits(lc, extra); // send the extra length bits
+	    }
+	    dist = zip_d_buf[dx++];
+	    // Here, dist is the match distance - 1
+	    code = zip_D_CODE(dist);
+//	Assert (code < D_CODES, "bad d_code");
+
+	    zip_SEND_CODE(code, dtree);	  // send the distance code
+	    extra = zip_extra_dbits[code];
+	    if(extra != 0) {
+		dist -= zip_base_dist[code];
+		zip_send_bits(dist, extra);   // send the extra distance bits
+	    }
+	} // literal or match pair ?
+	flag >>= 1;
+    } while(lx < zip_last_lit);
+
+    zip_SEND_CODE(zip_END_BLOCK, ltree);
+}
+
+/* ==========================================================================
+ * Send a value on a given number of bits.
+ * IN assertion: length <= 16 and value fits in length bits.
+ */
+var zip_Buf_size = 16; // bit size of bi_buf
+var zip_send_bits = function(
+	value,	// value to send
+	length) {	// number of bits
+    /* If not enough room in bi_buf, use (valid) bits from bi_buf and
+     * (16 - bi_valid) bits from value, leaving (width - (16-bi_valid))
+     * unused bits in value.
+     */
+    if(zip_bi_valid > zip_Buf_size - length) {
+	zip_bi_buf |= (value << zip_bi_valid);
+	zip_put_short(zip_bi_buf);
+	zip_bi_buf = (value >> (zip_Buf_size - zip_bi_valid));
+	zip_bi_valid += length - zip_Buf_size;
+    } else {
+	zip_bi_buf |= value << zip_bi_valid;
+	zip_bi_valid += length;
+    }
+}
+
+/* ==========================================================================
+ * Reverse the first len bits of a code, using straightforward code (a faster
+ * method would use a table)
+ * IN assertion: 1 <= len <= 15
+ */
+var zip_bi_reverse = function(
+	code,	// the value to invert
+	len) {	// its bit length
+    var res = 0;
+    do {
+	res |= code & 1;
+	code >>= 1;
+	res <<= 1;
+    } while(--len > 0);
+    return res >> 1;
+}
+
+/* ==========================================================================
+ * Write out any remaining bits in an incomplete byte.
+ */
+var zip_bi_windup = function() {
+    if(zip_bi_valid > 8) {
+	zip_put_short(zip_bi_buf);
+    } else if(zip_bi_valid > 0) {
+	zip_put_byte(zip_bi_buf);
+    }
+    zip_bi_buf = 0;
+    zip_bi_valid = 0;
+}
+
+var zip_qoutbuf = function() {
+    if(zip_outcnt != 0) {
+	var q, i;
+	q = zip_new_queue();
+	if(zip_qhead == null)
+	    zip_qhead = zip_qtail = q;
+	else
+	    zip_qtail = zip_qtail.next = q;
+	q.len = zip_outcnt - zip_outoff;
+//      System.arraycopy(zip_outbuf, zip_outoff, q.ptr, 0, q.len);
+	for(i = 0; i < q.len; i++)
+	    q.ptr[i] = zip_outbuf[zip_outoff + i];
+	zip_outcnt = zip_outoff = 0;
+    }
+}
+
+var zip_deflate = function(str, level) {
+    var i, j;
+
+    zip_deflate_data = str;
+    zip_deflate_pos = 0;
+    if(typeof level == "undefined")
+	level = zip_DEFAULT_LEVEL;
+    zip_deflate_start(level);
+
+    var buff = new Array(1024);
+    var aout = [];
+    while((i = zip_deflate_internal(buff, 0, buff.length)) > 0) {
+	var cbuf = new Array(i);
+	for(j = 0; j < i; j++){
+	    cbuf[j] = String.fromCharCode(buff[j]);
+	}
+	aout[aout.length] = cbuf.join("");
+    }
+    zip_deflate_data = null; // G.C.
+    return aout.join("");
+}
+
+if (! window.RawDeflate) RawDeflate = {};
+RawDeflate.deflate = zip_deflate;
+
+})();
753 scripts/zerobin/rawinflate.js
@@ -0,0 +1,753 @@
+/*
+ * $Id: rawinflate.js,v 0.2 2009/03/01 18:32:24 dankogai Exp $
+ *
+ * original:
+ * http://www.onicos.com/staff/iz/amuse/javascript/expert/inflate.txt
+ */
+
+(function(){
+
+/* Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>
+ * Version: 1.0.0.1
+ * LastModified: Dec 25 1999
+ */
+
+/* Interface:
+ * data = zip_inflate(src);
+ */
+
+/* constant parameters */
+var zip_WSIZE = 32768;		// Sliding Window size
+var zip_STORED_BLOCK = 0;
+var zip_STATIC_TREES = 1;
+var zip_DYN_TREES    = 2;
+
+/* for inflate */
+var zip_lbits = 9; 		// bits in base literal/length lookup table
+var zip_dbits = 6; 		// bits in base distance lookup table
+var zip_INBUFSIZ = 32768;	// Input buffer size
+var zip_INBUF_EXTRA = 64;	// Extra buffer
+
+/* variables (inflate) */
+var zip_slide;
+var zip_wp;			// current position in slide
+var zip_fixed_tl = null;	// inflate static
+var zip_fixed_td;		// inflate static
+var zip_fixed_bl, fixed_bd;	// inflate static
+var zip_bit_buf;		// bit buffer
+var zip_bit_len;		// bits in bit buffer
+var zip_method;
+var zip_eof;
+var zip_copy_leng;
+var zip_copy_dist;
+var zip_tl, zip_td;	// literal/length and distance decoder tables
+var zip_bl, zip_bd;	// number of bits decoded by tl and td
+
+var zip_inflate_data;
+var zip_inflate_pos;
+
+
+/* constant tables (inflate) */
+var zip_MASK_BITS = new Array(
+    0x0000,
+    0x0001, 0x0003, 0x0007, 0x000f, 0x001f, 0x003f, 0x007f, 0x00ff,
+    0x01ff, 0x03ff, 0x07ff, 0x0fff, 0x1fff, 0x3fff, 0x7fff, 0xffff);
+// Tables for deflate from PKZIP's appnote.txt.
+var zip_cplens = new Array( // Copy lengths for literal codes 257..285
+    3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,
+    35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0);
+/* note: see note #13 above about the 258 in this list. */
+var zip_cplext = new Array( // Extra bits for literal codes 257..285
+    0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2,
+    3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 99, 99); // 99==invalid
+var zip_cpdist = new Array( // Copy offsets for distance codes 0..29
+    1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,
+    257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,
+    8193, 12289, 16385, 24577);
+var zip_cpdext = new Array( // Extra bits for distance codes
+    0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6,
+    7, 7, 8, 8, 9, 9, 10, 10, 11, 11,
+    12, 12, 13, 13);
+var zip_border = new Array(  // Order of the bit length code lengths
+    16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15);
+/* objects (inflate) */
+
+var zip_HuftList = function() {
+    this.next = null;
+    this.list = null;
+}
+
+var zip_HuftNode = function() {
+    this.e = 0; // number of extra bits or operation
+    this.b = 0; // number of bits in this code or subcode
+
+    // union
+    this.n = 0; // literal, length base, or distance base
+    this.t = null; // (zip_HuftNode) pointer to next level of table
+}
+
+var zip_HuftBuild = function(b,	// code lengths in bits (all assumed <= BMAX)
+		       n,	// number of codes (assumed <= N_MAX)
+		       s,	// number of simple-valued codes (0..s-1)
+		       d,	// list of base values for non-simple codes
+		       e,	// list of extra bits for non-simple codes
+		       mm	// maximum lookup bits
+		   ) {
+    this.BMAX = 16;   // maximum bit length of any code
+    this.N_MAX = 288; // maximum number of codes in any set
+    this.status = 0;	// 0: success, 1: incomplete table, 2: bad input
+    this.root = null;	// (zip_HuftList) starting table
+    this.m = 0;		// maximum lookup bits, returns actual
+
+/* Given a list of code lengths and a maximum table size, make a set of
+   tables to decode that set of codes.	Return zero on success, one if
+   the given code set is incomplete (the tables are still built in this
+   case), two if the input is invalid (all zero length codes or an
+   oversubscribed set of lengths), and three if not enough memory.
+   The code with value 256 is special, and the tables are constructed
+   so that no bits beyond that code are fetched when that code is
+   decoded. */
+    {
+	var a;			// counter for codes of length k
+	var c = new Array(this.BMAX+1);	// bit length count table
+	var el;			// length of EOB code (value 256)
+	var f;			// i repeats in table every f entries
+	var g;			// maximum code length
+	var h;			// table level
+	var i;			// counter, current code
+	var j;			// counter
+	var k;			// number of bits in current code
+	var lx = new Array(this.BMAX+1);	// stack of bits per table
+	var p;			// pointer into c[], b[], or v[]
+	var pidx;		// index of p
+	var q;			// (zip_HuftNode) points to current table
+	var r = new zip_HuftNode(); // table entry for structure assignment
+	var u = new Array(this.BMAX); // zip_HuftNode[BMAX][]  table stack
+	var v = new Array(this.N_MAX); // values in order of bit length
+	var w;
+	var x = new Array(this.BMAX+1);// bit offsets, then code stack
+	var xp;			// pointer into x or c
+	var y;			// number of dummy codes added
+	var z;			// number of entries in current table
+	var o;
+	var tail;		// (zip_HuftList)
+
+	tail = this.root = null;
+	for(i = 0; i < c.length; i++)
+	    c[i] = 0;
+	for(i = 0; i < lx.length; i++)
+	    lx[i] = 0;
+	for(i = 0; i < u.length; i++)
+	    u[i] = null;
+	for(i = 0; i < v.length; i++)
+	    v[i] = 0;
+	for(i = 0; i < x.length; i++)
+	    x[i] = 0;
+
+	// Generate counts for each bit length
+	el = n > 256 ? b[256] : this.BMAX; // set length of EOB code, if any
+	p = b; pidx = 0;
+	i = n;
+	do {
+	    c[p[pidx]]++;	// assume all entries <= BMAX
+	    pidx++;
+	} while(--i > 0);
+	if(c[0] == n) {	// null input--all zero length codes
+	    this.root = null;
+	    this.m = 0;
+	    this.status = 0;
+	    return;
+	}
+
+	// Find minimum and maximum length, bound *m by those
+	for(j = 1; j <= this.BMAX; j++)
+	    if(c[j] != 0)
+		break;
+	k = j;			// minimum code length
+	if(mm < j)
+	    mm = j;
+	for(i = this.BMAX; i != 0; i--)
+	    if(c[i] != 0)
+		break;
+	g = i;			// maximum code length
+	if(mm > i)
+	    mm = i;
+
+	// Adjust last length count to fill out codes, if needed
+	for(y = 1 << j; j < i; j++, y <<= 1)
+	    if((y -= c[j]) < 0) {
+		this.status = 2;	// bad input: more codes than bits
+		this.m = mm;
+		return;
+	    }
+	if((y -= c[i]) < 0) {
+	    this.status = 2;
+	    this.m = mm;
+	    return;
+	}
+	c[i] += y;
+
+	// Generate starting offsets into the value table for each length
+	x[1] = j = 0;
+	p = c;
+	pidx = 1;
+	xp = 2;
+	while(--i > 0)		// note that i == g from above
+	    x[xp++] = (j += p[pidx++]);
+
+	// Make a table of values in order of bit lengths
+	p = b; pidx = 0;
+	i = 0;
+	do {
+	    if((j = p[pidx++]) != 0)
+		v[x[j]++] = i;
+	} while(++i < n);
+	n = x[g];			// set n to length of v
+
+	// Generate the Huffman codes and for each, make the table entries
+	x[0] = i = 0;		// first Huffman code is zero
+	p = v; pidx = 0;		// grab values in bit order
+	h = -1;			// no tables yet--level -1
+	w = lx[0] = 0;		// no bits decoded yet
+	q = null;			// ditto
+	z = 0;			// ditto
+
+	// go through the bit lengths (k already is bits in shortest code)
+	for(; k <= g; k++) {
+	    a = c[k];
+	    while(a-- > 0) {
+		// here i is the Huffman code of length k bits for value p[pidx]
+		// make tables up to required level
+		while(k > w + lx[1 + h]) {
+		    w += lx[1 + h]; // add bits already decoded
+		    h++;
+
+		    // compute minimum size table less than or equal to *m bits
+		    z = (z = g - w) > mm ? mm : z; // upper limit
+		    if((f = 1 << (j = k - w)) > a + 1) { // try a k-w bit table
+			// too few codes for k-w bit table
+			f -= a + 1;	// deduct codes from patterns left
+			xp = k;
+			while(++j < z) { // try smaller tables up to z bits
+			    if((f <<= 1) <= c[++xp])
+				break;	// enough codes to use up j bits
+			    f -= c[xp];	// else deduct codes from patterns
+			}
+		    }
+		    if(w + j > el && w < el)
+			j = el - w;	// make EOB code end at table
+		    z = 1 << j;	// table entries for j-bit table
+		    lx[1 + h] = j; // set table size in stack
+
+		    // allocate and link in new table
+		    q = new Array(z);
+		    for(o = 0; o < z; o++) {
+			q[o] = new zip_HuftNode();
+		    }
+
+		    if(tail == null)
+			tail = this.root = new zip_HuftList();
+		    else
+			tail = tail.next = new zip_HuftList();
+		    tail.next = null;
+		    tail.list = q;
+		    u[h] = q;	// table starts after link
+
+		    /* connect to last table, if there is one */
+		    if(h > 0) {
+			x[h] = i;		// save pattern for backing up
+			r.b = lx[h];	// bits to dump before this table
+			r.e = 16 + j;	// bits in this table
+			r.t = q;		// pointer to this table
+			j = (i & ((1 << w) - 1)) >> (w - lx[h]);
+			u[h-1][j].e = r.e;
+			u[h-1][j].b = r.b;
+			u[h-1][j].n = r.n;
+			u[h-1][j].t = r.t;
+		    }
+		}
+
+		// set up table entry in r
+		r.b = k - w;
+		if(pidx >= n)
+		    r.e = 99;		// out of values--invalid code
+		else if(p[pidx] < s) {
+		    r.e = (p[pidx] < 256 ? 16 : 15); // 256 is end-of-block code
+		    r.n = p[pidx++];	// simple code is just the value
+		} else {
+		    r.e = e[p[pidx] - s];	// non-simple--look up in lists
+		    r.n = d[p[pidx++] - s];
+		}
+
+		// fill code-like entries with r //
+		f = 1 << (k - w);
+		for(j = i >> w; j < z; j += f) {
+		    q[j].e = r.e;
+		    q[j].b = r.b;
+		    q[j].n = r.n;
+		    q[j].t = r.t;
+		}
+
+		// backwards increment the k-bit code i
+		for(j = 1 << (k - 1); (i & j) != 0; j >>= 1)
+		    i ^= j;
+		i ^= j;
+
+		// backup over finished tables
+		while((i & ((1 << w) - 1)) != x[h]) {
+		    w -= lx[h];		// don't need to update q
+		    h--;
+		}
+	    }
+	}
+
+	/* return actual size of base table */
+	this.m = lx[1];
+
+	/* Return true (1) if we were given an incomplete table */
+	this.status = ((y != 0 && g != 1) ? 1 : 0);
+    } /* end of constructor */
+}
+
+
+/* routines (inflate) */
+
+var zip_GET_BYTE = function() {
+    if(zip_inflate_data.length == zip_inflate_pos)
+	return -1;
+    return zip_inflate_data.charCodeAt(zip_inflate_pos++) & 0xff;
+}
+
+var zip_NEEDBITS = function(n) {
+    while(zip_bit_len < n) {
+	zip_bit_buf |= zip_GET_BYTE() << zip_bit_len;
+	zip_bit_len += 8;
+    }
+}
+
+var zip_GETBITS = function(n) {
+    return zip_bit_buf & zip_MASK_BITS[n];
+}
+
+var zip_DUMPBITS = function(n) {
+    zip_bit_buf >>= n;
+    zip_bit_len -= n;
+}
+
+var zip_inflate_codes = function(buff, off, size) {
+    /* inflate (decompress) the codes in a deflated (compressed) block.
+       Return an error code or zero if it all goes ok. */
+    var e;		// table entry flag/number of extra bits
+    var t;		// (zip_HuftNode) pointer to table entry
+    var n;
+
+    if(size == 0)
+      return 0;
+
+    // inflate the coded data
+    n = 0;
+    for(;;) {			// do until end of block
+	zip_NEEDBITS(zip_bl);
+	t = zip_tl.list[zip_GETBITS(zip_bl)];
+	e = t.e;
+	while(e > 16) {
+	    if(e == 99)
+		return -1;
+	    zip_DUMPBITS(t.b);
+	    e -= 16;
+	    zip_NEEDBITS(e);
+	    t = t.t[zip_GETBITS(e)];
+	    e = t.e;
+	}
+	zip_DUMPBITS(t.b);
+
+	if(e == 16) {		// then it's a literal
+	    zip_wp &= zip_WSIZE - 1;
+	    buff[off + n++] = zip_slide[zip_wp++] = t.n;
+	    if(n == size)
+		return size;
+	    continue;
+	}
+
+	// exit if end of block
+	if(e == 15)
+	    break;
+
+	// it's an EOB or a length
+
+	// get length of block to copy
+	zip_NEEDBITS(e);
+	zip_copy_leng = t.n + zip_GETBITS(e);
+	zip_DUMPBITS(e);
+
+	// decode distance of block to copy
+	zip_NEEDBITS(zip_bd);
+	t = zip_td.list[zip_GETBITS(zip_bd)];
+	e = t.e;
+
+	while(e > 16) {
+	    if(e == 99)
+		return -1;
+	    zip_DUMPBITS(t.b);
+	    e -= 16;
+	    zip_NEEDBITS(e);
+	    t = t.t[zip_GETBITS(e)];
+	    e = t.e;
+	}
+	zip_DUMPBITS(t.b);
+	zip_NEEDBITS(e);
+	zip_copy_dist = zip_wp - t.n - zip_GETBITS(e);
+	zip_DUMPBITS(e);
+
+	// do the copy
+	while(zip_copy_leng > 0 && n < size) {
+	    zip_copy_leng--;
+	    zip_copy_dist &= zip_WSIZE - 1;
+	    zip_wp &= zip_WSIZE - 1;
+	    buff[off + n++] = zip_slide[zip_wp++]
+		= zip_slide[zip_copy_dist++];
+	}
+
+	if(n == size)
+	    return size;
+    }
+
+    zip_method = -1; // done
+    return n;
+}
+
+var zip_inflate_stored = function(buff, off, size) {
+    /* "decompress" an inflated type 0 (stored) block. */
+    var n;
+
+    // go to byte boundary
+    n = zip_bit_len & 7;
+    zip_DUMPBITS(n);
+
+    // get the length and its complement
+    zip_NEEDBITS(16);
+    n = zip_GETBITS(16);
+    zip_DUMPBITS(16);
+    zip_NEEDBITS(16);
+    if(n != ((~zip_bit_buf) & 0xffff))
+	return -1;			// error in compressed data
+    zip_DUMPBITS(16);
+
+    // read and output the compressed data
+    zip_copy_leng = n;
+
+    n = 0;
+    while(zip_copy_leng > 0 && n < size) {
+	zip_copy_leng--;
+	zip_wp &= zip_WSIZE - 1;
+	zip_NEEDBITS(8);
+	buff[off + n++] = zip_slide[zip_wp++] =
+	    zip_GETBITS(8);
+	zip_DUMPBITS(8);
+    }
+
+    if(zip_copy_leng == 0)
+      zip_method = -1; // done
+    return n;
+}
+
+var zip_inflate_fixed = function(buff, off, size) {
+    /* decompress an inflated type 1 (fixed Huffman codes) block.  We should
+       either replace this with a custom decoder, or at least precompute the
+       Huffman tables. */
+
+    // if first time, set up tables for fixed blocks
+    if(zip_fixed_tl == null) {
+	var i;			// temporary variable
+	var l = new Array(288);	// length list for huft_build
+	var h;	// zip_HuftBuild
+
+	// literal table
+	for(i = 0; i < 144; i++)
+	    l[i] = 8;
+	for(; i < 256; i++)
+	    l[i] = 9;
+	for(; i < 280; i++)
+	    l[i] = 7;
+	for(; i < 288; i++)	// make a complete, but wrong code set
+	    l[i] = 8;
+	zip_fixed_bl = 7;
+
+	h = new zip_HuftBuild(l, 288, 257, zip_cplens, zip_cplext,
+			      zip_fixed_bl);
+	if(h.status != 0) {
+	    alert("HufBuild error: "+h.status);
+	    return -1;
+	}
+	zip_fixed_tl = h.root;
+	zip_fixed_bl = h.m;
+
+	// distance table
+	for(i = 0; i < 30; i++)	// make an incomplete code set
+	    l[i] = 5;
+	zip_fixed_bd = 5;
+
+	h = new zip_HuftBuild(l, 30, 0, zip_cpdist, zip_cpdext, zip_fixed_bd);
+	if(h.status > 1) {
+	    zip_fixed_tl = null;
+	    alert("HufBuild error: "+h.status);
+	    return -1;
+	}
+	zip_fixed_td = h.root;
+	zip_fixed_bd = h.m;
+    }
+
+    zip_tl = zip_fixed_tl;
+    zip_td = zip_fixed_td;
+    zip_bl = zip_fixed_bl;
+    zip_bd = zip_fixed_bd;
+    return zip_inflate_codes(buff, off, size);
+}
+
+var zip_inflate_dynamic = function(buff, off, size) {
+    // decompress an inflated type 2 (dynamic Huffman codes) block.
+    var i;		// temporary variables
+    var j;
+    var l;		// last length
+    var n;		// number of lengths to get
+    var t;		// (zip_HuftNode) literal/length code table
+    var nb;		// number of bit length codes
+    var nl;		// number of literal/length codes
+    var nd;		// number of distance codes
+    var ll = new Array(286+30); // literal/length and distance code lengths
+    var h;		// (zip_HuftBuild)
+
+    for(i = 0; i < ll.length; i++)
+	ll[i] = 0;
+
+    // read in table lengths
+    zip_NEEDBITS(5);
+    nl = 257 + zip_GETBITS(5);	// number of literal/length codes
+    zip_DUMPBITS(5);
+    zip_NEEDBITS(5);
+    nd = 1 + zip_GETBITS(5);	// number of distance codes
+    zip_DUMPBITS(5);
+    zip_NEEDBITS(4);
+    nb = 4 + zip_GETBITS(4);	// number of bit length codes
+    zip_DUMPBITS(4);
+    if(nl > 286 || nd > 30)
+      return -1;		// bad lengths
+
+    // read in bit-length-code lengths
+    for(j = 0; j < nb; j++)
+    {
+	zip_NEEDBITS(3);
+	ll[zip_border[j]] = zip_GETBITS(3);
+	zip_DUMPBITS(3);
+    }
+    for(; j < 19; j++)
+	ll[zip_border[j]] = 0;
+
+    // build decoding table for trees--single level, 7 bit lookup
+    zip_bl = 7;
+    h = new zip_HuftBuild(ll, 19, 19, null, null, zip_bl);
+    if(h.status != 0)
+	return -1;	// incomplete code set
+
+    zip_tl = h.root;
+    zip_bl = h.m;
+
+    // read in literal and distance code lengths
+    n = nl + nd;
+    i = l = 0;
+    while(i < n) {
+	zip_NEEDBITS(zip_bl);
+	t = zip_tl.list[zip_GETBITS(zip_bl)];
+	j = t.b;
+	zip_DUMPBITS(j);
+	j = t.n;
+	if(j < 16)		// length of code in bits (0..15)
+	    ll[i++] = l = j;	// save last length in l
+	else if(j == 16) {	// repeat last length 3 to 6 times
+	    zip_NEEDBITS(2);
+	    j = 3 + zip_GETBITS(2);
+	    zip_DUMPBITS(2);
+	    if(i + j > n)
+		return -1;
+	    while(j-- > 0)
+		ll[i++] = l;
+	} else if(j == 17) {	// 3 to 10 zero length codes
+	    zip_NEEDBITS(3);
+	    j = 3 + zip_GETBITS(3);
+	    zip_DUMPBITS(3);
+	    if(i + j > n)
+		return -1;
+	    while(j-- > 0)
+		ll[i++] = 0;
+	    l = 0;
+	} else {		// j == 18: 11 to 138 zero length codes
+	    zip_NEEDBITS(7);
+	    j = 11 + zip_GETBITS(7);
+	    zip_DUMPBITS(7);
+	    if(i + j > n)
+		return -1;
+	    while(j-- > 0)
+		ll[i++] = 0;
+	    l = 0;
+	}
+    }
+
+    // build the decoding tables for literal/length and distance codes
+    zip_bl = zip_lbits;
+    h = new zip_HuftBuild(ll, nl, 257, zip_cplens, zip_cplext, zip_bl);
+    if(zip_bl == 0)	// no literals or lengths
+	h.status = 1;
+    if(h.status != 0) {
+	if(h.status == 1)
+	    ;// **incomplete literal tree**
+	return -1;		// incomplete code set
+    }
+    zip_tl = h.root;
+    zip_bl = h.m;
+
+    for(i = 0; i < nd; i++)
+	ll[i] = ll[i + nl];
+    zip_bd = zip_dbits;
+    h = new zip_HuftBuild(ll, nd, 0, zip_cpdist, zip_cpdext, zip_bd);
+    zip_td = h.root;
+    zip_bd = h.m;
+
+    if(zip_bd == 0 && nl > 257) {   // lengths but no distances
+	// **incomplete distance tree**
+	return -1;
+    }
+
+    if(h.status == 1) {
+	;// **incomplete distance tree**
+    }
+    if(h.status != 0)
+	return -1;
+
+    // decompress until an end-of-block code
+    return zip_inflate_codes(buff, off, size);
+}
+
+var zip_inflate_start = function() {
+    var i;
+
+    if(zip_slide == null)
+	zip_slide = new Array(2 * zip_WSIZE);
+    zip_wp = 0;
+    zip_bit_buf = 0;
+    zip_bit_len = 0;
+    zip_method = -1;
+    zip_eof = false;
+    zip_copy_leng = zip_copy_dist = 0;
+    zip_tl = null;
+}
+
+var zip_inflate_internal = function(buff, off, size) {
+    // decompress an inflated entry
+    var n, i;
+
+    n = 0;
+    while(n < size) {
+	if(zip_eof && zip_method == -1)
+	    return n;
+
+	if(zip_copy_leng > 0) {
+	    if(zip_method != zip_STORED_BLOCK) {
+		// STATIC_TREES or DYN_TREES
+		while(zip_copy_leng > 0 && n < size) {
+		    zip_copy_leng--;
+		    zip_copy_dist &= zip_WSIZE - 1;
+		    zip_wp &= zip_WSIZE - 1;
+		    buff[off + n++] = zip_slide[zip_wp++] =
+			zip_slide[zip_copy_dist++];
+		}
+	    } else {
+		while(zip_copy_leng > 0 && n < size) {
+		    zip_copy_leng--;
+		    zip_wp &= zip_WSIZE - 1;
+		    zip_NEEDBITS(8);
+		    buff[off + n++] = zip_slide[zip_wp++] = zip_GETBITS(8);
+		    zip_DUMPBITS(8);
+		}
+		if(zip_copy_leng == 0)
+		    zip_method = -1; // done
+	    }
+	    if(n == size)
+		return n;
+	}
+
+	if(zip_method == -1) {
+	    if(zip_eof)
+		break;
+
+	    // read in last block bit
+	    zip_NEEDBITS(1);
+	    if(zip_GETBITS(1) != 0)
+		zip_eof = true;
+	    zip_DUMPBITS(1);
+
+	    // read in block type
+	    zip_NEEDBITS(2);
+	    zip_method = zip_GETBITS(2);
+	    zip_DUMPBITS(2);
+	    zip_tl = null;
+	    zip_copy_leng = 0;
+	}
+
+	switch(zip_method) {
+	  case 0: // zip_STORED_BLOCK
+	    i = zip_inflate_stored(buff, off + n, size - n);
+	    break;
+
+	  case 1: // zip_STATIC_TREES
+	    if(zip_tl != null)
+		i = zip_inflate_codes(buff, off + n, size - n);
+	    else
+		i = zip_inflate_fixed(buff, off + n, size - n);
+	    break;
+
+	  case 2: // zip_DYN_TREES
+	    if(zip_tl != null)
+		i = zip_inflate_codes(buff, off + n, size - n);
+	    else
+		i = zip_inflate_dynamic(buff, off + n, size - n);
+	    break;
+
+	  default: // error
+	    i = -1;
+	    break;
+	}
+
+	if(i == -1) {
+	    if(zip_eof)
+		return 0;
+	    return -1;
+	}
+	n += i;
+    }
+    return n;
+}
+
+var zip_inflate = function(str) {
+    var i, j;
+
+    zip_inflate_start();
+    zip_inflate_data = str;
+    zip_inflate_pos = 0;
+
+    var buff = new Array(1024);
+    var aout = [];
+    while((i = zip_inflate_internal(buff, 0, buff.length)) > 0) {
+	var cbuf = new Array(i);
+	for(j = 0; j < i; j++){
+	    cbuf[j] = String.fromCharCode(buff[j]);
+	}
+	aout[aout.length] = cbuf.join("");
+    }
+    zip_inflate_data = null; // G.C.
+    return aout.join("");
+}
+
+if (! window.RawDeflate) RawDeflate = {};
+RawDeflate.inflate = zip_inflate;
+
+})();
45 scripts/zerobin/sjcl.js
2 scripts/zerobin/vizhash.js
560 scripts/zerobin/zerobin.js
@@ -0,0 +1,560 @@
+/**
+ * ZeroBin 0.19
+ *
+ * @link http://sebsauvage.net/wiki/doku.php?id=php:zerobin
+ * @author sebsauvage
+ */
+
+// Immediately start random number generator collector.
+sjcl.random.startCollectors();
+
+/**
+ *  Converts a duration (in seconds) into human readable format.
+ *
+ *  @param int seconds
+ *  @return string
+ */
+function secondsToHuman(seconds)
+{
+    if (seconds<60) { var v=Math.floor(seconds); return v+' second'+((v>1)?'s':''); }
+    if (seconds<60*60) { var v=Math.floor(seconds/60); return v+' minute'+((v>1)?'s':''); }
+    if (seconds<60*60*24) { var v=Math.floor(seconds/(60*60)); return v+' hour'+((v>1)?'s':''); }
+    // If less than 2 months, display in days:
+    if (seconds<60*60*24*60) { var v=Math.floor(seconds/(60*60*24)); return v+' day'+((v>1)?'s':''); }
+    var v=Math.floor(seconds/(60*60*24*30)); return v+' month'+((v>1)?'s':'');
+}
+
+/**
+ * Converts an associative array to an encoded string
+ * for appending to the anchor.
+ *
+ * @param object associative_array Object to be serialized
+ * @return string
+ */
+function hashToParameterString(associativeArray)
+{
+  var parameterString = ""
+  for (key in associativeArray)
+  {
+    if( parameterString === "" )
+    {
+      parameterString = encodeURIComponent(key);
+      parameterString += "=" + encodeURIComponent(associativeArray[key]);
+    } else {
+      parameterString += "&" + encodeURIComponent(key);
+      parameterString += "=" + encodeURIComponent(associativeArray[key]);
+    }
+  }
+  //padding for URL shorteners
+  parameterString += "&p=p";
+  
+  return parameterString;
+}
+
+/**
+ * Converts a string to an associative array.
+ *
+ * @param string parameter_string String containing parameters
+ * @return object
+ */
+function parameterStringToHash(parameterString)
+{
+  var parameterHash = {};
+  var parameterArray = parameterString.split("&");
+  for (var i = 0; i < parameterArray.length; i++) {
+    //var currentParamterString = decodeURIComponent(parameterArray[i]);
+    var pair = parameterArray[i].split("=");
+    var key = decodeURIComponent(pair[0]);
+    var value = decodeURIComponent(pair[1]);
+    parameterHash[key] = value;
+  }
+  
+  return parameterHash;
+}
+
+/**
+ * Get an associative array of the parameters found in the anchor
+ *
+ * @return object
+ **/
+function getParameterHash()
+{
+  var hashIndex = window.location.href.indexOf("#");
+  if (hashIndex >= 0) {
+    return parameterStringToHash(window.location.href.substring(hashIndex + 1));
+  } else {
+    return {};
+  } 
+}
+
+/**
+ * Compress a message (deflate compression). Returns base64 encoded data.
+ *
+ * @param string message
+ * @return base64 string data
+ */
+function compress(message) {
+    return Base64.toBase64( RawDeflate.deflate( Base64.utob(message) ) );
+}
+
+/**
+ * Decompress a message compressed with compress().
+ */
+function decompress(data) {
+    return Base64.btou( RawDeflate.inflate( Base64.fromBase64(data) ) );
+}
+
+/**
+ * Compress, then encrypt message with key.
+ *
+ * @param string key
+ * @param string message
+ * @return encrypted string data
+ */
+function zeroCipher(key, message) {
+    return sjcl.encrypt(key,compress(message));
+}
+/**
+ *  Decrypt message with key, then decompress.
+ *
+ *  @param key
+ *  @param encrypted string data
+ *  @return string readable message
+ */
+function zeroDecipher(key, data) {
+    return decompress(sjcl.decrypt(key,data));
+}
+
+/**
+ * @return the current script location (without search or hash part of the URL).
+ *   eg. http://server.com/zero/?aaaa#bbbb --> http://server.com/zero/
+ */
+function scriptLocation() {
+  var scriptLocation = window.location.href.substring(0,window.location.href.length
+    - window.location.search.length - window.location.hash.length);
+  var hashIndex = scriptLocation.indexOf("#");
+  if (hashIndex !== -1) {
+    scriptLocation = scriptLocation.substring(0, hashIndex)
+  }
+  return scriptLocation
+}
+
+/**
+ * @return the paste unique identifier from the URL
+ *   eg. 'c05354954c49a487'
+ */
+function pasteID() {
+    return window.location.search.substring(1);
+}
+
+function htmlEntities(str) {
+    return String(str).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;');
+}
+/**
+ * Set text of a DOM element (required for IE)
+ * This is equivalent to element.text(text)
+ * @param object element : a DOM element.
+ * @param string text : the text to enter.
+ */
+function setElementText(element, text) {
+    // For IE<10.
+    if ($('div#oldienotice').is(":visible")) {
+        // IE<10 does not support white-space:pre-wrap; so we have to do this BIG UGLY STINKING THING.
+        var html = htmlEntities(text).replace(/\n/ig,"\r\n<br>");
+        element.html('<pre>'+html+'</pre>');
+    }
+    // for other (sane) browsers:
+    else {
+        element.text(text);
+    }
+}
+
+/** Apply syntax coloring to clear text area.
+  */
+function applySyntaxColoring()
+{
+    if ($('div#cleartext').html().substring(0,11) != '<pre><code>')
+    {
+        // highlight.js expects code to be surrounded by <pre><code>
+        $('div#cleartext').html('<pre><code>'+ $('div#cleartext').html()+'</code></pre>');
+    }
+    hljs.highlightBlock(document.getElementById('cleartext'));
+    $('div#cleartext').css('padding','0'); // Remove white padding around code box.
+}
+
+
+/**
+ * Show decrypted text in the display area, including discussion (if open)
+ *
+ * @param string key : decryption key
+ * @param array comments : Array of messages to display (items = array with keys ('data','meta')
+ */
+function displayMessages(key, comments) {
+    try { // Try to decrypt the paste.
+        var cleartext = zeroDecipher(key, comments[0].data);
+    } catch(err) {
+        $('div#cleartext').hide();
+        $('button#clonebutton').hide();
+        showError('Could not decrypt data (Wrong key ?)');
+        return;
+    }
+    setElementText($('div#cleartext'), cleartext);
+    urls2links($('div#cleartext')); // Convert URLs to clickable links.
+
+    // comments[0] is the paste itself.
+
+    if (comments[0].meta.syntaxcoloring) applySyntaxColoring();
+
+    // Display paste expiration.
+    if (comments[0].meta.expire_date) $('div#remainingtime').removeClass('foryoureyesonly').text('This document will expire in '+secondsToHuman(comments[0].meta.remaining_time)+'.').show();
+    if (comments[0].meta.burnafterreading) {
+        $('div#remainingtime').addClass('foryoureyesonly').text('FOR YOUR EYES ONLY.  Don\'t close this window, this message can\'t be displayed again.').show();
+        $('button#clonebutton').hide(); // Discourage cloning (as it can't really be prevented).
+    }
+
+    // If the discussion is opened on this paste, display it.
+    if (comments[0].meta.opendiscussion) {
+        $('div#comments').html('');
+        // For each comment.
+        for (var i = 1; i < comments.length; i++) {
+            var comment=comments[i];
+            var cleartext="[Could not decrypt comment ; Wrong key ?]";
+            try {
+                cleartext = zeroDecipher(key, comment.data);
+            } catch(err) { }
+            var place = $('div#comments');
+            // If parent comment exists, display below (CSS will automatically shift it right.)
+            var cname = 'div#comment_'+comment.meta.parentid
+
+            // If the element exists in page
+            if ($(cname).length) {
+                place = $(cname);
+            }
+            var divComment = $('<div class="comment" id="comment_' + comment.meta.commentid+'">'
+                               + '<div class="commentmeta"><span class="nickname"></span><span class="commentdate"></span></div><div class="commentdata"></div>'
+                               + '<button onclick="open_reply($(this),\'' + comment.meta.commentid + '\');return false;">Reply</button>'
+                               + '</div>');
+            setElementText(divComment.find('div.commentdata'), cleartext);
+            // Convert URLs to clickable links in comment.
+            urls2links(divComment.find('div.commentdata'));
+            divComment.find('span.nickname').html('<i>(Anonymous)</i>');
+
+            // Try to get optional nickname:
+            try {
+                divComment.find('span.nickname').text(zeroDecipher(key, comment.meta.nickname));
+            } catch(err) { }
+            divComment.find('span.commentdate').text('  ('+(new Date(comment.meta.postdate*1000).toString())+')').attr('title','CommentID: ' + comment.meta.commentid);
+
+            // If an avatar is available, display it.
+            if (comment.meta.vizhash) {
+                divComment.find('span.nickname').before('<img src="' + comment.meta.vizhash + '" class="vizhash" title="Anonymous avatar (Vizhash of the IP address)" />');
+            }
+
+            place.append(divComment);
+        }
+        $('div#comments').append('<div class="comment"><button onclick="open_reply($(this),\'' + pasteID() + '\');return false;">Add comment</button></div>');
+        $('div#discussion').show();
+    }
+}
+
+/**
+ * Open the comment entry when clicking the "Reply" button of a comment.
+ * @param object source : element which emitted the event.
+ * @param string commentid = identifier of the comment we want to reply to.
+ */
+function open_reply(source, commentid) {
+    $('div.reply').remove(); // Remove any other reply area.
+    source.after('<div class="reply">'
+                + '<input type="text" id="nickname" title="Optional nickname..." value="Optional nickname..." />'
+                + '<textarea id="replymessage" class="replymessage" cols="80" rows="7"></textarea>'
+                + '<br><button id="replybutton" onclick="send_comment(\'' + commentid + '\');return false;">Post comment</button>'
+                + '<div id="replystatus">&nbsp;</div>'
+                + '</div>');
+    $('input#nickname').focus(function() {
+        $(this).css('color', '#000');
+        if ($(this).val() == $(this).attr('title')) {
+            $(this).val('');
+        }
+    });
+    $('textarea#replymessage').focus();
+}
+
+/**
+ * Send a reply in a discussion.
+ * @param string parentid : the comment identifier we want to send a reply to.
+ */
+function send_comment(parentid) {
+    // Do not send if no data.
+    if ($('textarea#replymessage').val().length==0) {
+        return;
+    }
+
+    showStatus('Sending comment...', spin=true);
+    var cipherdata = zeroCipher(pageKey(), $('textarea#replymessage').val());
+    var ciphernickname = '';
+    var nick=$('input#nickname').val();
+    if (nick != '' && nick != 'Optional nickname...') {
+        ciphernickname = zeroCipher(pageKey(), nick);
+    }
+    var data_to_send = { data:cipherdata,
+                         parentid: parentid,
+                         pasteid:  pasteID(),
+                         nickname: ciphernickname
+                       };
+
+    $.post(scriptLocation(), data_to_send, 'json')
+        .error(function() {
+            showError('Comment could not be sent (serveur error or not responding).');
+        })
+        .success(function(data) {
+            if (data.status == 0) {
+                showStatus('Comment posted.');
+                location.reload();
+            }
+            else if (data.status==1) {
+                showError('Could not post comment: '+data.message);
+            }
+            else {
+                showError('Could not post comment.');
+            }
+        });
+    }
+
+
+/**
+ *  Send a new paste to server
+ */
+function send_data() {
+    // Do not send if no data.
+    if ($('textarea#message').val().length == 0) {
+        return;
+    }
+
+    // If sjcl has not collected enough entropy yet, display a message.
+    if (!sjcl.random.isReady())
+    {
+        showStatus('Sending paste (Please move your mouse for more entropy)...', spin=true);
+        sjcl.random.addEventListener('seeded', function(){ send_data(); }); 
+        return; 
+    }
+    
+    showStatus('Sending paste...', spin=true);
+
+    var randomkey = sjcl.codec.base64.fromBits(sjcl.random.randomWords(8, 0), 0);
+    var cipherdata = zeroCipher(randomkey, $('textarea#message').val());
+    var data_to_send = { data:           cipherdata,
+                         expire:         $('select#pasteExpiration').val(),
+                         burnafterreading: $('input#burnafterreading').is(':checked') ? 1 : 0,
+                         opendiscussion: $('input#opendiscussion').is(':checked') ? 1 : 0,
+                         syntaxcoloring: $('input#syntaxcoloring').is(':checked') ? 1 : 0
+                       };
+    $.post(scriptLocation(), data_to_send, 'json')
+        .error(function() {
+            showError('Data could not be sent (serveur error or not responding).');
+        })
+        .success(function(data) {
+            if (data.status == 0) {
+                stateExistingPaste();
+                var url = scriptLocation() + "?" + data.id + '#' + randomkey;
+                var deleteUrl = scriptLocation() + "?pasteid=" + data.id + '&deletetoken=' + data.deletetoken;
+                showStatus('');
+
+                $('div#pastelink').html('Your paste is <a id="pasteurl" href="' + url + '">' + url + '</a> <span id="copyhint">(Hit CTRL+C to copy)</span>');
+                $('div#deletelink').html('<a href="' + deleteUrl + '">Delete link</a>');
+                $('div#pasteresult').show();
+                selectText('pasteurl'); // We pre-select the link so that the user only has to CTRL+C the link.
+
+                setElementText($('div#cleartext'), $('textarea#message').val());
+                urls2links($('div#cleartext'));
+
+                // FIXME: Add option to remove syntax highlighting ?
+                if ($('input#syntaxcoloring').is(':checked')) applySyntaxColoring();
+
+                showStatus('');
+            }
+            else if (data.status==1) {
+                showError('Could not create paste: '+data.message);
+            }
+            else {
+                showError('Could not create paste.');
+            }
+        });
+}
+
+
+/** Text range selection.
+ *  From: http://stackoverflow.com/questions/985272/jquery-selecting-text-in-an-element-akin-to-highlighting-with-your-mouse
+ *  @param string element : Indentifier of the element to select (id="").
+ */
+function selectText(element) {
+    var doc = document
+        , text = doc.getElementById(element)
+        , range, selection
+    ;    
+    if (doc.body.createTextRange) { //ms
+        range = doc.body.createTextRange();
+        range.moveToElementText(text);
+        range.select();
+    } else if (window.getSelection) { //all others
+        selection = window.getSelection();        
+        range = doc.createRange();
+        range.selectNodeContents(text);
+        selection.removeAllRanges();
+        selection.addRange(range);
+    }
+}
+/**
+ * Put the screen in "New paste" mode.
+ */
+function stateNewPaste() {
+    $('button#sendbutton').show();
+    $('button#clonebutton').hide();
+    $('button#rawtextbutton').hide();
+    $('div#expiration').show();
+    $('div#remainingtime').hide();
+    $('div#burnafterreadingoption').show();
+    $('div#opendisc').show();
+    $('div#syntaxcoloringoption').show();
+    $('button#newbutton').show();
+    $('div#pasteresult').hide();
+    $('textarea#message').text('');
+    $('textarea#message').show();
+    $('div#cleartext').hide();
+    $('div#message').focus();
+    $('div#discussion').hide();
+}
+
+/**
+ * Put the screen in "Existing paste" mode.
+ */
+function stateExistingPaste() {
+    $('button#sendbutton').hide();
+
+    // No "clone" for IE<10.
+    if ($('div#oldienotice').is(":visible")) {
+        $('button#clonebutton').hide();
+    }
+    else {
+        $('button#clonebutton').show();
+    }
+    $('button#rawtextbutton').show();
+
+    $('div#expiration').hide();
+    $('div#burnafterreadingoption').hide();
+    $('div#opendisc').hide();
+    $('div#syntaxcoloringoption').hide();    
+    $('button#newbutton').show();
+    $('div#pasteresult').hide();
+    $('textarea#message').hide();
+    $('div#cleartext').show();
+}
+
+/** Return raw text
+  */
+function rawText()
+{
+    history.pushState(document.title, document.title, 'document.txt');
+    var paste = $('div#cleartext').text();
+    var newDoc = document.open('text/plain', 'replace');
+    newDoc.write(paste);
+    newDoc.close();
+}
+
+/**
+ * Clone the current paste.
+ */
+function clonePaste() {
+    stateNewPaste();
+    
+    //Erase the id and the key in url
+    history.replaceState(document.title, document.title, scriptLocation());
+    
+    showStatus('');
+    $('textarea#message').text($('div#cleartext').text());
+}
+
+/**
+ * Create a new paste.
+ */
+function newPaste() {
+    stateNewPaste();
+    showStatus('');
+    $('textarea#message').text('');
+}
+
+/**
+ * Display an error message
+ * (We use the same function for paste and reply to comments)
+ */
+function showError(message) {
+    $('div#status').addClass('errorMessage').text(message);
+    $('div#replystatus').addClass('errorMessage').text(message);
+}
+
+/**
+ * Display status
+ * (We use the same function for paste and reply to comments)
+ *
+ * @param string message : text to display
+ * @param boolean spin (optional) : tell if the "spinning" animation should be displayed.
+ */
+function showStatus(message, spin) {
+    $('div#replystatus').removeClass('errorMessage');
+    $('div#replystatus').text(message);
+    if (!message) {
+        $('div#status').html('&nbsp;');
+        return;
+    }
+    if (message == '') {
+        $('div#status').html('&nbsp;');
+        return;
+    }
+    $('div#status').removeClass('errorMessage');
+    $('div#status').text(message);
+    if (spin) {
+        var img = '<img src="img/busy.gif" style="width:16px;height:9px;margin:0px 4px 0px 0px;" />';
+        $('div#status').prepend(img);
+        $('div#replystatus').prepend(img);
+    }
+}
+
+/**
+ * Convert URLs to clickable links.
+ * URLs to handle:
+ * <code>
+ *     magnet:?xt.1=urn:sha1:YNCKHTQCWBTRNJIV4WNAE52SJUQCZO5C&xt.2=urn:sha1:TXGCZQTH26NL6OUQAJJPFALHG2LTGBC7
+ *     http://localhost:8800/zero/?6f09182b8ea51997#WtLEUO5Epj9UHAV9JFs+6pUQZp13TuspAUjnF+iM+dM=
+ *     http://user:password@localhost:8800/zero/?6f09182b8ea51997#WtLEUO5Epj9UHAV9JFs+6pUQZp13TuspAUjnF+iM+dM=
+ * </code>
+ *
+ * @param object element : a jQuery DOM element.
+ * @FIXME: add ppa & apt links.
+ */
+function urls2links(element) {
+    var re = /((http|https|ftp):\/\/[\w?=&.\/-;#@~%+-]+(?![\w\s?&.\/;#~%"=-]*>))/ig;
+    element.html(element.html().replace(re,'<a href="$1" rel="nofollow">$1</a>'));
+    var re = /((magnet):[\w?=&.\/-;#@~%+-]+)/ig;
+    element.html(element.html().replace(re,'<a href="$1">$1</a>'));
+}
+
+/**
+ * Return the deciphering key stored in anchor part of the URL
+ */
+function pageKey() {
+    var key = window.location.hash.substring(1);  // Get key
+
+    // Some stupid web 2.0 services and redirectors add data AFTER the anchor
+    // (such as &utm_source=...).
+    // We will strip any additional data.
+
+    // First, strip everything after the equal sign (=) which signals end of base64 string.
+    i = key.indexOf('='); if (i>-1) { key = key.substring(0,i+1); }
+
+    // If the equal sign was not present, some parameters may remain:
+    i = key.indexOf('&'); if (i>-1) { key = key.substring(0,i); }
+
+    // Then add trailing equal sign if it's missing
+    if (key.charAt(key.length-1)!=='=') key+='=';
+
+    return key;
+}
25 sendMessage.php
@@ -0,0 +1,25 @@
+<?php
+require 'inc/constants.php';
+require 'inc/init.php';
+require 'inc/functions.php';
+require 'inc/classes.php';
+require 'inc/dbmanager.php';
+
+$dbManager = new DbManager();
+
+$chatRoom = $dbManager->GetChatroom($_POST['roomId']);
+$userName = $_POST['user'];
+$message = $_POST['message'];
+$time = $_SERVER['REQUEST_TIME'];
+
+if(!is_null($chatRoom)) {
+    $dbManager->UpdateChatRoomDateLastMessage($_POST['roomId'], $time);
+    
+    $dbManager->AddMessage($_POST['roomId'], $message, $userName, getHashForIp(), $time);
+    
+    echo 'true';
+    exit;
+}
+
+echo 'false';
+?>
62 stats.php
@@ -0,0 +1,62 @@
+<?php 
+require 'inc/constants.php';
+require 'inc/init.php';
+require 'inc/functions.php';
+require 'inc/classes.php';
+require 'inc/dbmanager.php';
+
+$dbManager = new DbManager();
+
+$nbChatrooms = $dbManager->GetNbChatRooms();
+$nbMessages = $dbManager->GetNbMessages();
+?><!DOCTYPE html>
+<html lang="en">
+<head>
+    <meta charset="utf-8" />
+    <title>Stats - MyCryptoChat by HowTommy.net</title>
+    <link href="/favicon.ico" rel="shortcut icon" type="image/x-icon" />function sendMessage() { if ($.trim($("#userName").val()) == "") { alert("Please choose a name!") } else if (pageKey() == "" || pageKey() == "=") { alert("The key is missing (the part of the website url after '#').") } else { if ($.trim($("#textMessage").val()) != "") { var key = pageKey(); $.post("sendMessage.php", { roomId: roomId, user: zeroCipher(key, $.trim($("#userName").val())), message: zeroCipher(key, $.trim($("#textMessage").val())) }, function (data) { if (data != false) { $("#textMessage").val(""); $("#textMessage").focus(); getMessages(false) } else { alert("An error occured... :(") } }) } } } var isRefreshTitle = false; var refreshTitleInterval; var nbIps = 1; function getMessages(changeTitle) { var key = pageKey(); $.post("getMessages.php", { roomId: roomId, dateLastGetMessages: dateLastGetMessages, nbIps: nbIps }, function (data) { if (data == "noRoom") { $("#chatroom").html("<i>This conversation is over... You should start a new one to keep talking!</i>"); stopTimerCheck() } else if (data == "destroyed") { $("#chatroom").html("<i>This conversation self-destroyed. It was only created for one visitor.</i>"); stopTimerCheck() } else if (data != "noNew") { if (data.chatLines == undefined) { $("#nbUsers").html(data.nbIps) } else if (data.chatLines == "") { if (key == "" || key == "=") { document.location.hash = "#" + sjcl.codec.base64.fromBits(sjcl.random.randomWords(8, 0), 0) } $("#chatroom").html("<i>No messages yet...</i>") } else if (key == "" || key == "=") { $("#chatroom").html("<i>The key is missing (the part of the website url after '#').</i>"); stopTimerCheck() } else { var hasErrors = false; var hasElements = false; var chatRoom = $("#chatroom"); chatRoom.html(""); nbIps = data.nbIps; $("#nbUsers").html(data.nbIps); for (i = 0; i < data.chatLines.length; i++) { try { var user = zeroDecipher(key, data.chatLines[i].userId); var decryptedMessage = zeroDecipher(key, data.chatLines[i].message); hasElements = true; if (vizhash.supportCanvas()) { var vhash = vizhash.canvasHash(data.chatLines[i].hash, 15, 10); chatRoom.append("<span class='chathour'>(" + getDateFromTimestamp(data.chatLines[i].date) + ")</span> "); chatRoom.append(vhash.canvas); chatRoom.append(" <a onclick='addText(\" @" + htmlEncode(user) + ": \"); return false;' class='userNameLink' href='#'><b>" + htmlEncode(user) + "</b></a> : " + replaceUrlTextWithUrl(htmlEncode(decryptedMessage)).replace(/(?:\r\n|\r|\n)/g, '<br />') + "<br />") } else { chatRoom.append("<i>" + data.chatLines[i].date + "</i> - <a onclick='addText(\" @" + htmlEncode(user) + ": \"); return false;' class='userNameLink' href='#'><b>" + htmlEncode(user) + "</b></a> : "); chatRoom.append(" <b>" + htmlEncode(user) + "</b> : " + replaceUrlTextWithUrl(htmlEncode(decryptedMessage)).replace(/(?:\r\n|\r|\n)/g, '<br />') + "<br />") } } catch (e) { hasErrors = true } } if (!hasElements && hasErrors) { chatRoom.html("The key seems to be corrupted. Are you sure that you copied the full URL (with #xxxxxxxxxxxxxxxx-xxxxxxx-xxxxxxxx) ?"); stopTimerCheck() } else { var objDiv = document.getElementById("chatroom"); objDiv.scrollTop = objDiv.scrollHeight; dateLastGetMessages = data.dateLastGetMessages; if (changeTitle && !isRefreshTitle) { refreshTitleInterval = setInterval(function () { if (document.title == "Private chat room - MyCryptoChat by HowTommy.net") { document.title = "New messages ! - MyCryptoChat by HowTommy.net" } else { document.title = "Private chat room - MyCryptoChat by HowTommy.net" } }, 3000); isRefreshTitle = true } } } } }) } function replaceUrlTextWithUrl(content) { var re = /((http|https|ftp):\/\/[\w?=&.\/-;#@~%+-]+(?![\w\s?&.\/;#~%"=-]*>))/ig; content = content.replace(re, '<a href="$1" rel="nofollow">$1</a>'); re = /((magnet):[\w?=&.\/-;#@~%+-]+)/ig; content = content.replace(re, '<a href="$1">$1</a>'); return content } function stopRefreshTitle() { if (isRefreshTitle) { clearInterval(refreshTitleInterval); document.title = "Private chat room - MyCryptoChat by HowTommy.net"; isRefreshTitle = false } } function htmlEncode(value) { return $('<div/>').text(value).html() } var checkIntervalTimer; function stopTimerCheck() { clearInterval(checkIntervalTimer) } function getDateFromTimestamp(date) { var date = new Date(date * 1000); var hours = date.getHours(); var minutes = date.getMinutes(); hours = hours > 9 ? hours : "0" + hours; minutes = minutes > 9 ? minutes : "0" + minutes; return hours + ':' + minutes } function removeChatroom(withPassword) { if (confirm('Are you sure?')) { var removePassword = ''; if (withPassword) { var removePassword = prompt("Please enter the password to remove the chat room", "") } $.post("removeChatroom.php", { roomId: roomId, removePassword: removePassword }, function (data) { if (data == "error") { alert('An error occured') } else if (data == "wrongPassword") { alert('Wrong password') } else if (data == "removed") { alert('The chat room has been removed.'); window.location = 'index.php' } }) } } function addText(text) { var editor = $('#textMessage'); var value = editor.val(); editor.val(""); editor.focus(); editor.val(value + text) } $(function () { getMessages(false); checkIntervalTimer = setInterval("getMessages(true)", 15000); $('body').on('mousemove', stopRefreshTitle) });
+    <meta name="viewport" content="width=device-width" />
+    <link href="styles/myCryptoChat.css" rel="stylesheet" />
+    <script src="scripts/modernizr.js"></script>
+</head>
+<body>
+    <header>
+        <div class="content-wrapper">
+            <div class="float-left">
+                <p class="site-title"><a href="index.php">MyCryptoChat</a></p>
+            </div>
+            <div class="float-right">
+                <section id="login">
+                </section>
+                <nav>
+                    <ul id="menu">
+                        <li><a href="index.php">Home</a></li>
+                        <li><a href="stats.php">Stats</a></li>
+                        <li><a href="about.php">About</a></li>
+                    </ul>
+                </nav>
+            </div>
+        </div>
+    </header>
+    <div id="body">
+        <section class="content-wrapper main-content clear-fix">
+
+            <h2>Stats about MyCryptoChat</h2>
+
+            <p>
+                Number of chat rooms: <?php echo $nbChatrooms; ?><br />
+                Number of messages: <?php echo $nbMessages; ?>
+            </p>
+
+        </section>
+    </div>
+    <footer>
+        <div class="content-wrapper">
+            <div class="float-left">
+                <p>&copy; 2013 - MyCryptoChat <?php echo MYCRYPTOCHAT_VERSION; ?> by HowTommy.net</p>
+            </div>
+        </div>
+    </footer>
+    <script src="scripts/jquery.js"></script>
+</body>
+</html>
1 styles/myCryptoChat.css
805 styles/myCryptoChat/myCryptoChat.css
@@ -0,0 +1,805 @@
+html {
+    background-color: #e2e2e2;
+    margin: 0;
+    padding: 0;
+}
+
+body {
+    background-color: #fff;
+    border-top: solid 10px #000;
+    color: #333;
+    font-size: .85em;
+    font-family: "Segoe UI", Verdana, Helvetica, Sans-Serif;
+    margin: 0;
+    padding: 0;
+}
+
+a {
+    color: #333;
+    outline: none;
+    padding-left: 3px;
+    padding-right: 3px;
+    text-decoration: underline;
+}
+
+    a:link, a:visited,
+    a:active, a:hover {
+        color: #333;
+    }
+
+    a:hover {
+        background-color: #c7d1d6;
+    }
+
+header, footer, hgroup,
+nav, section {
+    display: block;
+}
+
+mark {
+    background-color: #a6dbed;
+    padding-left: 5px;
+    padding-right: 5px;
+}
+
+.float-left {
+    float: left;
+}
+
+.float-right {
+    float: right;
+}
+
+.clear-fix:after {
+    content: ".";
+    clear: both;
+    display: block;
+    height: 0;
+    visibility: hidden;
+}
+
+h1, h2, h3,
+h4, h5, h6 {
+    color: #000;
+    margin-bottom: 0;
+    padding-bottom: 0;
+}
+
+h1 {
+    font-size: 2em;
+}
+
+h2 {
+    font-size: 1.75em;
+}
+
+h3 {
+    font-size: 1.2em;
+}
+
+h4 {
+    font-size: 1.1em;
+}
+
+h5, h6 {
+    font-size: 1em;
+}
+
+    h5 a:link, h5 a:visited, h5 a:active {
+        padding: 0;
+        text-decoration: none;
+    }
+
+
+/* main layout
+----------------------------------------------------------*/
+.content-wrapper {
+    margin: 0 auto;
+    max-width: 960px;
+}
+
+#body {
+    background-color: #efeeef;
+    clear: both;
+    padding-bottom: 35px;
+}
+
+.main-content {
+    background: url("../Images/accent.png") no-repeat;
+    padding-left: 10px;
+    padding-top: 30px;
+}
+
+.featured + .main-content {
+    background: url("../Images/heroAccent.png") no-repeat;
+}
+
+header .content-wrapper {
+    padding-top: 20px;
+}
+
+footer {
+    clear: both;
+    background-color: #e2e2e2;
+    font-size: .8em;
+    height: 100px;
+}
+
+
+/* site title
+----------------------------------------------------------*/
+.site-title {
+    color: #c8c8c8;
+    font-family: Rockwell, Consolas, "Courier New", Courier, monospace;
+    font-size: 2.3em;
+    margin: 0;
+}
+
+    .site-title a, .site-title a:hover, .site-title a:active {
+        background: none;
+        color: #c8c8c8;
+        outline: none;
+        text-decoration: none;
+    }
+
+
+/* login
+----------------------------------------------------------*/
+#login {
+    display: block;
+    font-size: .85em;
+    margin: 0 0 10px;
+    text-align: right;
+}
+
+    #login a {
+        background-color: #d3dce0;
+        margin-left: 10px;
+        margin-right: 3px;
+        padding: 2px 3px;
+        text-decoration: none;
+    }
+
+        #login a.username {
+            background: none;
+            margin: 0;
+            padding: 0;
+            text-decoration: underline;
+        }
+
+    #login ul {
+        margin: 0;
+    }
+
+    #login li {
+        display: inline;
+        list-style: none;
+    }
+
+
+/* menu
+----------------------------------------------------------*/
+ul#menu {
+    font-size: 1.3em;
+    font-weight: 600;
+    margin: 0 0 5px;
+    padding: 0;
+    text-align: right;
+}
+
+    ul#menu li {
+        display: inline;
+        list-style: none;
+        padding-left: 15px;
+    }
+
+        ul#menu li a {
+            background: none;
+            color: #999;
+            text-decoration: none;
+        }
+
+            ul#menu li a:hover {
+                color: #333;
+                text-decoration: none;
+            }
+
+
+/* page elements
+----------------------------------------------------------*/
+/* featured */
+.featured {
+    background-color: #fff;
+}
+
+    .featured .content-wrapper {
+        background-color: #7ac0da;
+        background-image: -ms-linear-gradient(left, #7ac0da 0%, #a4d4e6 100%);
+        background-image: -o-linear-gradient(left, #7ac0da 0%, #a4d4e6 100%);
+        background-image: -webkit-gradient(linear, left top, right top, color-stop(0, #7ac0da), color-stop(1, #a4d4e6));
+        background-image: -webkit-linear-gradient(left, #7ac0da 0%, #a4d4e6 100%);
+        background-image: linear-gradient(left, #7ac0da 0%, #a4d4e6 100%);
+        color: #3e5667;
+        padding: 20px 40px 30px 40px;
+    }
+
+    .featured hgroup.title h1, .featured hgroup.title h2 {
+        color: #fff;
+    }
+
+    .featured p {
+        font-size: 1.1em;
+    }
+
+/* page titles */
+hgroup.title {
+    margin-bottom: 10px;
+}
+
+    hgroup.title h1, hgroup.title h2 {
+        display: inline;
+    }
+
+    hgroup.title h2 {
+        font-weight: normal;
+        margin-left: 3px;
+    }
+
+/* features */
+section.feature {
+    width: 300px;
+    float: left;
+    padding: 10px;
+}
+
+/* ordered list */
+ol.round {
+    list-style-type: none;
+    padding-left: 0;
+}
+
+    ol.round li {
+        margin: 25px 0;
+        padding-left: 45px;
+    }
+
+        ol.round li.zero {
+            background: url("../Images/orderedList0.png") no-repeat;
+        }
+
+        ol.round li.one {
+            background: url("../Images/orderedList1.png") no-repeat;
+        }
+
+        ol.round li.two {
+            background: url("../Images/orderedList2.png") no-repeat;
+        }
+
+        ol.round li.three {
+            background: url("../Images/orderedList3.png") no-repeat;
+        }
+
+        ol.round li.four {
+            background: url("../Images/orderedList4.png") no-repeat;
+        }
+
+        ol.round li.five {
+            background: url("../Images/orderedList5.png") no-repeat;
+        }
+
+        ol.round li.six {
+            background: url("../Images/orderedList6.png") no-repeat;
+        }
+
+        ol.round li.seven {
+            background: url("../Images/orderedList7.png") no-repeat;
+        }
+
+        ol.round li.eight {
+            background: url("../Images/orderedList8.png") no-repeat;
+        }
+
+        ol.round li.nine {
+            background: url("../Images/orderedList9.png") no-repeat;
+        }
+
+/* content */
+article {
+    float: left;
+    width: 70%;
+}
+
+aside {
+    float: right;
+    width: 25%;
+}
+
+    aside ul {
+        list-style: none;
+        padding: 0;
+    }
+
+        aside ul li {
+            background: url("../Images/bullet.png") no-repeat 0 50%;
+            padding: 2px 0 2px 20px;
+        }
+
+.label {
+    font-weight: 700;
+}
+
+/* login page */
+#loginForm {
+    border-right: solid 2px #c8c8c8;
+    float: left;
+    width: 55%;
+}
+
+    #loginForm .validation-error {
+        display: block;
+        margin-left: 15px;
+    }
+
+    #loginForm .validation-summary-errors ul {
+        margin: 0;
+        padding: 0;
+    }
+
+    #loginForm .validation-summary-errors li {
+        display: inline;
+        list-style: none;
+        margin: 0;
+    }
+
+    #loginForm input {
+        width: 250px;
+    }
+
+        #loginForm input[type="checkbox"],
+        #loginForm input[type="submit"],
+        #loginForm input[type="button"],
+        #loginForm button {
+            width: auto;
+        }
+
+#socialLoginForm {
+    margin-left: 40px;
+    float: left;
+    width: 40%;
+}
+
+    #socialLoginForm h2 {
+        margin-bottom: 5px;
+    }
+
+#socialLoginList button {
+    margin-bottom: 12px;
+}
+
+#logoutForm {
+    display: inline;
+}
+
+/* contact */
+.contact h3 {
+    font-size: 1.2em;
+}
+
+.contact p {
+    margin: 5px 0 0 10px;
+}
+
+.contact iframe {
+    border: 1px solid #333;
+    margin: 5px 0 0 10px;
+}
+
+/* forms */
+fieldset {
+    border: none;
+    margin: 0;
+    padding: 0;
+}
+
+    fieldset legend {
+        display: none;
+    }
+
+    fieldset ol {
+        padding: 0;
+        list-style: none;
+    }
+
+        fieldset ol li {
+            padding-bottom: 5px;
+        }
+
+label {
+    display: block;
+    font-size: 1.2em;
+    font-weight: 600;
+}
+
+    label.checkbox {
+        display: inline;
+    }
+
+input, textarea {
+    border: 1px solid #e2e2e2;
+    background: #fff;
+    color: #333;
+    font-size: 1.2em;
+    margin: 5px 0 6px 0;
+    padding: 5px;
+    width: 300px;
+}
+
+textarea {
+    font-family: inherit;
+    width: 500px;
+}
+
+    input:focus, textarea:focus {
+        border: 1px solid #7ac0da;
+    }
+
+input[type="checkbox"] {
+    background: transparent;
+    border: inherit;
+    width: auto;
+}
+
+input[type="submit"],
+input[type="button"],
+button {
+    background-color: #d3dce0;
+    border: 1px solid #787878;
+    cursor: pointer;
+    font-size: 1.2em;
+    font-weight: 600;
+    padding: 7px;
+    margin-right: 8px;
+    width: auto;
+}
+
+td input[type="submit"],
+td input[type="button"],
+td button {
+    font-size: 1em;
+    padding: 4px;
+    margin-right: 4px;
+}
+
+/* info and errors */
+.message-info {
+    border: 1px solid;
+    clear: both;
+    padding: 10px 20px;
+}
+
+.message-error {
+    clear: both;
+    color: #e80c4d;
+    font-size: 1.1em;
+    font-weight: bold;
+    margin: 20px 0 10px 0;
+}
+
+.message-success {
+    color: #7ac0da;
+    font-size: 1.3em;
+    font-weight: bold;
+    margin: 20px 0 10px 0;
+}
+
+.error {
+    color: #e80c4d;
+}
+
+/* styles for validation helpers */
+.field-validation-error {
+    color: #e80c4d;
+    font-weight: bold;
+}
+
+.field-validation-valid {
+    display: none;
+}
+
+input.input-validation-error {
+    border: 1px solid #e80c4d;
+}
+
+input[type="checkbox"].input-validation-error {
+    border: 0 none;
+}
+
+.validation-summary-errors {
+    color: #e80c4d;
+    font-weight: bold;
+    font-size: 1.1em;
+}
+
+.validation-summary-valid {
+    display: none;
+}
+
+
+/* tables
+----------------------------------------------------------*/
+table {
+    border-collapse: collapse;
+    border-spacing: 0;
+    margin-top: 0.75em;
+    border: 0 none;
+}
+
+th {
+    font-size: 1.2em;
+    text-align: left;
+    border: none 0px;
+    padding-left: 0;
+}
+
+    th a {
+        display: block;
+        position: relative;
+    }
+
+        th a:link, th a:visited, th a:active, th a:hover {
+            color: #333;
+            font-weight: 600;
+            text-decoration: none;
+            padding: 0;
+        }
+
+        th a:hover {
+            color: #000;
+        }
+
+    th.asc a, th.desc a {
+        margin-right: .75em;
+    }
+
+        th.asc a:after, th.desc a:after {
+            display: block;
+            position: absolute;
+            right: 0em;
+            top: 0;
+            font-size: 0.75em;
+        }
+
+        th.asc a:after {
+            content: '▲';
+        }
+
+        th.desc a:after {
+            content: '▼';
+        }
+
+td {
+    padding: 0.25em 2em 0.25em 0em;
+    border: 0 none;
+}
+
+tr.pager td {
+    padding: 0 0.25em 0 0;
+}
+
+
+/********************
+*   Mobile Styles   *
+********************/
+@media only screen and (max-width: 850px) {
+
+    /* header
+    ----------------------------------------------------------*/
+    header .float-left,
+    header .float-right {
+        float: none;
+    }
+
+    /* logo */
+    header .site-title {
+        margin: 10px;
+        text-align: center;
+    }
+
+    /* login */
+    #login {
+        font-size: .85em;
+        margin: 0 0 12px;
+        text-align: center;
+    }
+
+        #login ul {
+            margin: 5px 0;
+            padding: 0;
+        }
+
+        #login li {
+            display: inline;
+            list-style: none;
+            margin: 0;
+            padding: 0;
+        }
+
+        #login a {
+            background: none;
+            color: #999;
+            font-weight: 600;
+            margin: 2px;
+            padding: 0;
+        }
+
+            #login a:hover {
+                color: #333;
+            }
+
+    /* menu */
+    nav {
+        margin-bottom: 5px;
+    }
+
+    ul#menu {
+        margin: 0;
+        padding: 0;
+        text-align: center;
+    }
+
+        ul#menu li {
+            margin: 0;
+            padding: 0;
+        }
+
+
+    /* main layout
+    ----------------------------------------------------------*/
+    .main-content,
+    .featured + .main-content {
+        background-position: 10px 0;
+    }
+
+    .content-wrapper {
+        padding-right: 10px;
+        padding-left: 10px;
+    }
+
+    .featured .content-wrapper {
+        padding: 10px;
+    }
+
+    /* page content */
+    article, aside {
+        float: none;
+        width: 100%;
+    }
+
+    /* ordered list */
+    ol.round {
+        list-style-type: none;
+        padding-left: 0;
+    }
+
+        ol.round li {
+            padding-left: 10px;
+            margin: 25px 0;
+        }
+
+            ol.round li.zero,
+            ol.round li.one,
+            ol.round li.two,
+            ol.round li.three,
+            ol.round li.four,
+            ol.round li.five,
+            ol.round li.six,
+            ol.round li.seven,
+            ol.round li.eight,
+            ol.round li.nine {
+                background: none;
+            }
+
+    /* features */
+    section.feature {
+        float: none;
+        padding: 10px;
+        width: auto;
+    }
+
+        section.feature img {
+            color: #999;
+            content: attr(alt);
+            font-size: 1.5em;
+            font-weight: 600;
+        }
+
+    /* forms */
+    input {
+        width: 90%;
+    }
+
+    /* login page */
+    #loginForm {
+        border-right: none;
+        float: none;
+        width: auto;
+    }
+
+        #loginForm .validation-error {
+            display: block;
+            margin-left: 15px;
+        }
+
+    #socialLoginForm {
+        margin-left: 0;
+        float: none;
+        width: auto;
+    }
+
+
+    /* footer
+    ----------------------------------------------------------*/
+    footer .float-left,
+    footer .float-right {
+        float: none;
+    }
+
+    footer {
+        text-align: center;
+        height: auto;
+        padding: 10px 0;
+    }
+
+        footer p {
+            margin: 0;
+        }
+}
+
+/* custom css */
+
+#chatroom {
+    background: white;
+    border: 1px solid gray;
+    height: 300px;
+    width: 90%;
+    margin-top: 20px;
+    margin-bottom: 5px;
+    padding: 10px;
+    overflow: auto;
+}
+
+.mb20 {
+    margin-bottom: 20px;
+}
+
+#divUsers {
+    font-size: 0.9em;
+    margin-bottom: 5px;
+    width: 90%;
+    text-align: center;
+    padding-left: 10px;
+    padding-right: 10px;
+}
+
+#textMessage {
+    max-width: 90%;
+}
+
+#divButtonRemoveChatroom {
+    text-align: center;
+    font-size: 0.8em;
+}
+
+.labelIndex {
+    font-weight: normal;
+    display: inline;
+    font-size: 1.0em;
+}
+
+#divRemovePassword {
+    display: none;
+}
+
+.userNameLink {
+    text-decoration: none;
+}
17 web.config
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<configuration>
+    <system.webServer>
+        <defaultDocument>
+            <files>
+                <clear />
+                <add value="index.php" />
+                <add value="index.htm" />
+                <add value="index.html" />
+                <add value="iisstart.htm" />
+                <add value="default.aspx" />
+                <add value="Default.asp" />
+                <add value="Default.htm" />
+            </files>
+        </defaultDocument>
+    </system.webServer>
+</configuration>
0 comments on commit de6ba44
@itchie6

Attach files by dragging & dropping or

.
Styling with Markdown is supported

You’re receiving notifications because you’re subscribed to this repository.

    Contact GitHub API Training Shop Blog About 

    © 2016 GitHub, Inc. Terms Privacy Security Status Help 

